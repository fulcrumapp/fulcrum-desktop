"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _form = _interopRequireDefault(require("./models/form"));

var _choiceList = _interopRequireDefault(require("./models/choice-list"));

var _classificationSet = _interopRequireDefault(require("./models/classification-set"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class LocalDatabaseDataSource {
  constructor(account) {
    this.account = account;
    this.db = account.db;
    this.choiceLists = {};
    this.classificationSets = {};
    this.forms = {};
  }

  async load(db) {
    this.choiceLists = await this.loadObjects(db, _choiceList.default);
    this.classificationSets = await this.loadObjects(db, _classificationSet.default);
    this.forms = await this.loadObjects(db, _form.default);
  }

  async loadObjects(db, type) {
    const objects = await type.findAll(db);
    const map = {};

    for (const object of objects) {
      map[object.id] = object;
    }

    return map;
  }

  getChoiceList(id, callback) {
    return callback(null, this.choiceLists[id]);
  }

  getClassificationSet(id, callback) {
    return callback(null, this.classificationSets[id]);
  }

  getForm(id, callback) {
    return callback(null, this.forms[id]);
  }

}

exports.default = LocalDatabaseDataSource;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zcWxpdGUtZGF0YS1zb3VyY2UuanMiXSwibmFtZXMiOlsiTG9jYWxEYXRhYmFzZURhdGFTb3VyY2UiLCJjb25zdHJ1Y3RvciIsImFjY291bnQiLCJkYiIsImNob2ljZUxpc3RzIiwiY2xhc3NpZmljYXRpb25TZXRzIiwiZm9ybXMiLCJsb2FkIiwibG9hZE9iamVjdHMiLCJDaG9pY2VMaXN0IiwiQ2xhc3NpZmljYXRpb25TZXQiLCJGb3JtIiwidHlwZSIsIm9iamVjdHMiLCJmaW5kQWxsIiwibWFwIiwib2JqZWN0IiwiaWQiLCJnZXRDaG9pY2VMaXN0IiwiY2FsbGJhY2siLCJnZXRDbGFzc2lmaWNhdGlvblNldCIsImdldEZvcm0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUVlLE1BQU1BLHVCQUFOLENBQThCO0FBQzNDQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVTtBQUNuQixTQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLQyxFQUFMLEdBQVVELE9BQU8sQ0FBQ0MsRUFBbEI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CLEVBQW5CO0FBQ0EsU0FBS0Msa0JBQUwsR0FBMEIsRUFBMUI7QUFDQSxTQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNEOztBQUVTLFFBQUpDLElBQUksQ0FBQ0osRUFBRCxFQUFLO0FBQ2IsU0FBS0MsV0FBTCxHQUFtQixNQUFNLEtBQUtJLFdBQUwsQ0FBaUJMLEVBQWpCLEVBQXFCTSxtQkFBckIsQ0FBekI7QUFDQSxTQUFLSixrQkFBTCxHQUEwQixNQUFNLEtBQUtHLFdBQUwsQ0FBaUJMLEVBQWpCLEVBQXFCTywwQkFBckIsQ0FBaEM7QUFDQSxTQUFLSixLQUFMLEdBQWEsTUFBTSxLQUFLRSxXQUFMLENBQWlCTCxFQUFqQixFQUFxQlEsYUFBckIsQ0FBbkI7QUFDRDs7QUFFZ0IsUUFBWEgsV0FBVyxDQUFDTCxFQUFELEVBQUtTLElBQUwsRUFBVztBQUMxQixVQUFNQyxPQUFPLEdBQUcsTUFBTUQsSUFBSSxDQUFDRSxPQUFMLENBQWFYLEVBQWIsQ0FBdEI7QUFFQSxVQUFNWSxHQUFHLEdBQUcsRUFBWjs7QUFFQSxTQUFLLE1BQU1DLE1BQVgsSUFBcUJILE9BQXJCLEVBQThCO0FBQzVCRSxNQUFBQSxHQUFHLENBQUNDLE1BQU0sQ0FBQ0MsRUFBUixDQUFILEdBQWlCRCxNQUFqQjtBQUNEOztBQUVELFdBQU9ELEdBQVA7QUFDRDs7QUFFREcsRUFBQUEsYUFBYSxDQUFDRCxFQUFELEVBQUtFLFFBQUwsRUFBZTtBQUMxQixXQUFPQSxRQUFRLENBQUMsSUFBRCxFQUFPLEtBQUtmLFdBQUwsQ0FBaUJhLEVBQWpCLENBQVAsQ0FBZjtBQUNEOztBQUVERyxFQUFBQSxvQkFBb0IsQ0FBQ0gsRUFBRCxFQUFLRSxRQUFMLEVBQWU7QUFDakMsV0FBT0EsUUFBUSxDQUFDLElBQUQsRUFBTyxLQUFLZCxrQkFBTCxDQUF3QlksRUFBeEIsQ0FBUCxDQUFmO0FBQ0Q7O0FBRURJLEVBQUFBLE9BQU8sQ0FBQ0osRUFBRCxFQUFLRSxRQUFMLEVBQWU7QUFDcEIsV0FBT0EsUUFBUSxDQUFDLElBQUQsRUFBTyxLQUFLYixLQUFMLENBQVdXLEVBQVgsQ0FBUCxDQUFmO0FBQ0Q7O0FBckMwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBGb3JtIGZyb20gJy4vbW9kZWxzL2Zvcm0nO1xuaW1wb3J0IENob2ljZUxpc3QgZnJvbSAnLi9tb2RlbHMvY2hvaWNlLWxpc3QnO1xuaW1wb3J0IENsYXNzaWZpY2F0aW9uU2V0IGZyb20gJy4vbW9kZWxzL2NsYXNzaWZpY2F0aW9uLXNldCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvY2FsRGF0YWJhc2VEYXRhU291cmNlIHtcbiAgY29uc3RydWN0b3IoYWNjb3VudCkge1xuICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgdGhpcy5kYiA9IGFjY291bnQuZGI7XG4gICAgdGhpcy5jaG9pY2VMaXN0cyA9IHt9O1xuICAgIHRoaXMuY2xhc3NpZmljYXRpb25TZXRzID0ge307XG4gICAgdGhpcy5mb3JtcyA9IHt9O1xuICB9XG5cbiAgYXN5bmMgbG9hZChkYikge1xuICAgIHRoaXMuY2hvaWNlTGlzdHMgPSBhd2FpdCB0aGlzLmxvYWRPYmplY3RzKGRiLCBDaG9pY2VMaXN0KTtcbiAgICB0aGlzLmNsYXNzaWZpY2F0aW9uU2V0cyA9IGF3YWl0IHRoaXMubG9hZE9iamVjdHMoZGIsIENsYXNzaWZpY2F0aW9uU2V0KTtcbiAgICB0aGlzLmZvcm1zID0gYXdhaXQgdGhpcy5sb2FkT2JqZWN0cyhkYiwgRm9ybSk7XG4gIH1cblxuICBhc3luYyBsb2FkT2JqZWN0cyhkYiwgdHlwZSkge1xuICAgIGNvbnN0IG9iamVjdHMgPSBhd2FpdCB0eXBlLmZpbmRBbGwoZGIpO1xuXG4gICAgY29uc3QgbWFwID0ge307XG5cbiAgICBmb3IgKGNvbnN0IG9iamVjdCBvZiBvYmplY3RzKSB7XG4gICAgICBtYXBbb2JqZWN0LmlkXSA9IG9iamVjdDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgZ2V0Q2hvaWNlTGlzdChpZCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgdGhpcy5jaG9pY2VMaXN0c1tpZF0pO1xuICB9XG5cbiAgZ2V0Q2xhc3NpZmljYXRpb25TZXQoaWQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHRoaXMuY2xhc3NpZmljYXRpb25TZXRzW2lkXSk7XG4gIH1cblxuICBnZXRGb3JtKGlkLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB0aGlzLmZvcm1zW2lkXSk7XG4gIH1cbn1cblxuIl19