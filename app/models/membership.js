"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _minidb = require("minidb");

var _role = _interopRequireDefault(require("./role"));

var _fulcrumCore = require("fulcrum-core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Membership {
  constructor(attributes) {
    this.updateFromAPIAttributes(attributes);
  }

  updateFromAPIAttributes(attrs) {
    const attributes = attrs || {};
    this._id = attributes.id;
    this._firstName = attributes.first_name;
    this._lastName = attributes.last_name;
    this._userID = attributes.user_id;
    this._email = attributes.email;
    this._roleID = attributes.role_id;
    this._createdAt = _fulcrumCore.DateUtils.parseISOTimestamp(attributes.created_at);
    this._updatedAt = _fulcrumCore.DateUtils.parseISOTimestamp(attributes.updated_at);
  }

  get id() {
    return this._id;
  }

  get updatedAt() {
    return this._updatedAt;
  }

  static get tableName() {
    return 'memberships';
  }

  static get columns() {
    return [{
      name: 'accountRowID',
      column: 'account_id',
      type: 'integer',
      null: false
    }, {
      name: 'id',
      column: 'resource_id',
      type: 'string',
      null: false
    }, {
      name: 'userID',
      column: 'user_resource_id',
      type: 'string',
      null: false
    }, {
      name: 'roleID',
      column: 'role_resource_id',
      type: 'string',
      null: false
    }, {
      name: 'roleRowID',
      column: 'role_id',
      type: 'integer',
      null: false
    }, {
      name: 'email',
      column: 'email',
      type: 'string',
      null: false
    }, {
      name: 'firstName',
      column: 'first_name',
      type: 'string',
      null: false
    }, {
      name: 'lastName',
      column: 'last_name',
      type: 'string',
      null: false
    }, {
      name: 'createdAt',
      column: 'server_created_at',
      type: 'datetime'
    }, {
      name: 'updatedAt',
      column: 'server_updated_at',
      type: 'datetime'
    }, {
      name: 'deletedAt',
      column: 'deleted_at',
      type: 'datetime'
    }];
  }

  async getLocalRole() {
    this._role = await _role.default.findFirst(this.db, {
      resource_id: this._roleID
    });
    this._roleRowID = this._role ? this._role.rowID : null;
    return this._role;
  } // role


  getRole() {
    return this.loadOne('role', _role.default);
  }

  get role() {
    return this._role;
  }

  set role(role) {
    this.setOne('role', role);
  }

}

exports.default = Membership;

_minidb.PersistentObject.register(Membership);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvbWVtYmVyc2hpcC5qcyJdLCJuYW1lcyI6WyJNZW1iZXJzaGlwIiwiY29uc3RydWN0b3IiLCJhdHRyaWJ1dGVzIiwidXBkYXRlRnJvbUFQSUF0dHJpYnV0ZXMiLCJhdHRycyIsIl9pZCIsImlkIiwiX2ZpcnN0TmFtZSIsImZpcnN0X25hbWUiLCJfbGFzdE5hbWUiLCJsYXN0X25hbWUiLCJfdXNlcklEIiwidXNlcl9pZCIsIl9lbWFpbCIsImVtYWlsIiwiX3JvbGVJRCIsInJvbGVfaWQiLCJfY3JlYXRlZEF0IiwiRGF0ZVV0aWxzIiwicGFyc2VJU09UaW1lc3RhbXAiLCJjcmVhdGVkX2F0IiwiX3VwZGF0ZWRBdCIsInVwZGF0ZWRfYXQiLCJ1cGRhdGVkQXQiLCJ0YWJsZU5hbWUiLCJjb2x1bW5zIiwibmFtZSIsImNvbHVtbiIsInR5cGUiLCJudWxsIiwiZ2V0TG9jYWxSb2xlIiwiX3JvbGUiLCJSb2xlIiwiZmluZEZpcnN0IiwiZGIiLCJyZXNvdXJjZV9pZCIsIl9yb2xlUm93SUQiLCJyb3dJRCIsImdldFJvbGUiLCJsb2FkT25lIiwicm9sZSIsInNldE9uZSIsIlBlcnNpc3RlbnRPYmplY3QiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRWUsTUFBTUEsVUFBTixDQUFpQjtBQUM5QkMsRUFBQUEsV0FBVyxDQUFDQyxVQUFELEVBQWE7QUFDdEIsU0FBS0MsdUJBQUwsQ0FBNkJELFVBQTdCO0FBQ0Q7O0FBRURDLEVBQUFBLHVCQUF1QixDQUFDQyxLQUFELEVBQVE7QUFDN0IsVUFBTUYsVUFBVSxHQUFHRSxLQUFLLElBQUksRUFBNUI7QUFFQSxTQUFLQyxHQUFMLEdBQVdILFVBQVUsQ0FBQ0ksRUFBdEI7QUFDQSxTQUFLQyxVQUFMLEdBQWtCTCxVQUFVLENBQUNNLFVBQTdCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQlAsVUFBVSxDQUFDUSxTQUE1QjtBQUNBLFNBQUtDLE9BQUwsR0FB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QSxXQUFXLEVBQUUsS0FBS3BCO0FBQW5CLEtBQXhCLENBQW5CO0FBQ0EsU0FBS3FCLFVBQUwsR0FBa0IsS0FBS0wsS0FBTCxHQUFhLEtBQUtBLEtBQUwsQ0FBV00sS0FBeEIsR0FBZ0MsSUFBbEQ7QUFDQSxXQUFPLEtBQUtOLEtBQVo7QUFDRCxHQWxENkIsQ0FvRDlCOzs7QUFDQU8sRUFBQUEsT0FBTyxHQUFHO0FBQ1IsV0FBTyxLQUFLQyxPQUFMLENBQWEsTUFBYixFQUFxQlAsYUFBckIsQ0FBUDtBQUNEOztBQUVPLE1BQUpRLElBQUksR0FBRztBQUNULFdBQU8sS0FBS1QsS0FBWjtBQUNEOztBQUVPLE1BQUpTLElBQUksQ0FBQ0EsSUFBRCxFQUFPO0FBQ2IsU0FBS0MsTUFBTCxDQUFZLE1BQVosRUFBb0JELElBQXBCO0FBQ0Q7O0FBL0Q2Qjs7OztBQWtFaENFLHlCQUFpQkMsUUFBakIsQ0FBMEIzQyxVQUExQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBlcnNpc3RlbnRPYmplY3QgfSBmcm9tICdtaW5pZGInO1xuaW1wb3J0IFJvbGUgZnJvbSAnLi9yb2xlJztcbmltcG9ydCB7IERhdGVVdGlscyB9IGZyb20gJ2Z1bGNydW0tY29yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbWJlcnNoaXAge1xuICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzKSB7XG4gICAgdGhpcy51cGRhdGVGcm9tQVBJQXR0cmlidXRlcyhhdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHVwZGF0ZUZyb21BUElBdHRyaWJ1dGVzKGF0dHJzKSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IGF0dHJzIHx8IHt9O1xuXG4gICAgdGhpcy5faWQgPSBhdHRyaWJ1dGVzLmlkO1xuICAgIHRoaXMuX2ZpcnN0TmFtZSA9IGF0dHJpYnV0ZXMuZmlyc3RfbmFtZTtcbiAgICB0aGlzLl9sYXN0TmFtZSA9IGF0dHJpYnV0ZXMubGFzdF9uYW1lO1xuICAgIHRoaXMuX3VzZXJJRCA9IGF0dHJpYnV0ZXMudXNlcl9pZDtcbiAgICB0aGlzLl9lbWFpbCA9IGF0dHJpYnV0ZXMuZW1haWw7XG4gICAgdGhpcy5fcm9sZUlEID0gYXR0cmlidXRlcy5yb2xlX2lkO1xuICAgIHRoaXMuX2NyZWF0ZWRBdCA9IERhdGVVdGlscy5wYXJzZUlTT1RpbWVzdGFtcChhdHRyaWJ1dGVzLmNyZWF0ZWRfYXQpO1xuICAgIHRoaXMuX3VwZGF0ZWRBdCA9IERhdGVVdGlscy5wYXJzZUlTT1RpbWVzdGFtcChhdHRyaWJ1dGVzLnVwZGF0ZWRfYXQpO1xuICB9XG5cbiAgZ2V0IGlkKCkge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIGdldCB1cGRhdGVkQXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZWRBdDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdGFibGVOYW1lKCkge1xuICAgIHJldHVybiAnbWVtYmVyc2hpcHMnO1xuICB9XG5cbiAgc3RhdGljIGdldCBjb2x1bW5zKCkge1xuICAgIHJldHVybiBbXG4gICAgICB7IG5hbWU6ICdhY2NvdW50Um93SUQnLCBjb2x1bW46ICdhY2NvdW50X2lkJywgdHlwZTogJ2ludGVnZXInLCBudWxsOiBmYWxzZSB9LFxuICAgICAgeyBuYW1lOiAnaWQnLCBjb2x1bW46ICdyZXNvdXJjZV9pZCcsIHR5cGU6ICdzdHJpbmcnLCBudWxsOiBmYWxzZSB9LFxuICAgICAgeyBuYW1lOiAndXNlcklEJywgY29sdW1uOiAndXNlcl9yZXNvdXJjZV9pZCcsIHR5cGU6ICdzdHJpbmcnLCBudWxsOiBmYWxzZSB9LFxuICAgICAgeyBuYW1lOiAncm9sZUlEJywgY29sdW1uOiAncm9sZV9yZXNvdXJjZV9pZCcsIHR5cGU6ICdzdHJpbmcnLCBudWxsOiBmYWxzZSB9LFxuICAgICAgeyBuYW1lOiAncm9sZVJvd0lEJywgY29sdW1uOiAncm9sZV9pZCcsIHR5cGU6ICdpbnRlZ2VyJywgbnVsbDogZmFsc2UgfSxcbiAgICAgIHsgbmFtZTogJ2VtYWlsJywgY29sdW1uOiAnZW1haWwnLCB0eXBlOiAnc3RyaW5nJywgbnVsbDogZmFsc2UgfSxcbiAgICAgIHsgbmFtZTogJ2ZpcnN0TmFtZScsIGNvbHVtbjogJ2ZpcnN0X25hbWUnLCB0eXBlOiAnc3RyaW5nJywgbnVsbDogZmFsc2UgfSxcbiAgICAgIHsgbmFtZTogJ2xhc3ROYW1lJywgY29sdW1uOiAnbGFzdF9uYW1lJywgdHlwZTogJ3N0cmluZycsIG51bGw6IGZhbHNlIH0sXG4gICAgICB7IG5hbWU6ICdjcmVhdGVkQXQnLCBjb2x1bW46ICdzZXJ2ZXJfY3JlYXRlZF9hdCcsIHR5cGU6ICdkYXRldGltZScgfSxcbiAgICAgIHsgbmFtZTogJ3VwZGF0ZWRBdCcsIGNvbHVtbjogJ3NlcnZlcl91cGRhdGVkX2F0JywgdHlwZTogJ2RhdGV0aW1lJyB9LFxuICAgICAgeyBuYW1lOiAnZGVsZXRlZEF0JywgY29sdW1uOiAnZGVsZXRlZF9hdCcsIHR5cGU6ICdkYXRldGltZScgfVxuICAgIF07XG4gIH1cblxuICBhc3luYyBnZXRMb2NhbFJvbGUoKSB7XG4gICAgdGhpcy5fcm9sZSA9IGF3YWl0IFJvbGUuZmluZEZpcnN0KHRoaXMuZGIsIHtyZXNvdXJjZV9pZDogdGhpcy5fcm9sZUlEfSk7XG4gICAgdGhpcy5fcm9sZVJvd0lEID0gdGhpcy5fcm9sZSA/IHRoaXMuX3JvbGUucm93SUQgOiBudWxsO1xuICAgIHJldHVybiB0aGlzLl9yb2xlO1xuICB9XG5cbiAgLy8gcm9sZVxuICBnZXRSb2xlKCkge1xuICAgIHJldHVybiB0aGlzLmxvYWRPbmUoJ3JvbGUnLCBSb2xlKTtcbiAgfVxuXG4gIGdldCByb2xlKCkge1xuICAgIHJldHVybiB0aGlzLl9yb2xlO1xuICB9XG5cbiAgc2V0IHJvbGUocm9sZSkge1xuICAgIHRoaXMuc2V0T25lKCdyb2xlJywgcm9sZSk7XG4gIH1cbn1cblxuUGVyc2lzdGVudE9iamVjdC5yZWdpc3RlcihNZW1iZXJzaGlwKTtcbiJdfQ==