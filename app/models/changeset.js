"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _minidb = require("minidb");

var _fulcrumCore = require("fulcrum-core");

class Changeset extends _fulcrumCore.Changeset {
  static get tableName() {
    return 'changesets';
  }

  static get columns() {
    return [{
      name: 'accountRowID',
      column: 'account_id',
      type: 'integer',
      null: false
    }, {
      name: 'id',
      column: 'resource_id',
      type: 'string',
      null: false
    }, {
      name: 'formRowID',
      column: 'form_id',
      type: 'integer'
    }, {
      name: 'formID',
      column: 'form_resource_id',
      type: 'string'
    }, {
      name: 'metadata',
      column: 'metadata',
      type: 'json'
    }, {
      name: 'metadataIndexText',
      column: 'metadata_index_text',
      type: 'string'
    }, {
      name: 'closedAt',
      column: 'closed_at',
      type: 'datetime'
    }, {
      name: 'closedByRowID',
      column: 'closed_by_id',
      type: 'integer'
    }, {
      name: 'closedByID',
      column: 'closed_by_resource_id',
      type: 'string'
    }, {
      name: 'createdByRowID',
      column: 'created_by_id',
      type: 'integer'
    }, {
      name: 'createdByID',
      column: 'created_by_resource_id',
      type: 'string'
    }, {
      name: 'updatedByRowID',
      column: 'updated_by_id',
      type: 'integer'
    }, {
      name: 'updatedByID',
      column: 'updated_by_resource_id',
      type: 'string'
    }, {
      name: 'numberOfChanges',
      column: 'number_of_changes',
      type: 'integer'
    }, {
      name: 'numberOfCreates',
      column: 'number_of_creates',
      type: 'integer'
    }, {
      name: 'numberOfUpdates',
      column: 'number_of_updates',
      type: 'integer'
    }, {
      name: 'numberOfDeletes',
      column: 'number_of_deletes',
      type: 'integer'
    }, {
      name: 'minLat',
      column: 'min_lat',
      type: 'double'
    }, {
      name: 'maxLat',
      column: 'max_lat',
      type: 'double'
    }, {
      name: 'minLon',
      column: 'min_lon',
      type: 'double'
    }, {
      name: 'maxLon',
      column: 'max_lon',
      type: 'double'
    }, {
      name: 'createdAt',
      column: 'server_created_at',
      type: 'datetime'
    }, {
      name: 'updatedAt',
      column: 'server_updated_at',
      type: 'datetime'
    }];
  }

  async beforeSave(options) {
    this._metadataIndexText = this.metadataIndexText;
  }

}

exports.default = Changeset;

_minidb.PersistentObject.register(Changeset);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvY2hhbmdlc2V0LmpzIl0sIm5hbWVzIjpbIkNoYW5nZXNldCIsIkNoYW5nZXNldEJhc2UiLCJ0YWJsZU5hbWUiLCJjb2x1bW5zIiwibmFtZSIsImNvbHVtbiIsInR5cGUiLCJudWxsIiwiYmVmb3JlU2F2ZSIsIm9wdGlvbnMiLCJfbWV0YWRhdGFJbmRleFRleHQiLCJtZXRhZGF0YUluZGV4VGV4dCIsIlBlcnNpc3RlbnRPYmplY3QiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVlLE1BQU1BLFNBQU4sU0FBd0JDLHNCQUF4QixDQUFzQztBQUMvQixhQUFUQyxTQUFTLEdBQUc7QUFDckIsV0FBTyxZQUFQO0FBQ0Q7O0FBRWlCLGFBQVBDLE9BQU8sR0FBRztBQUNuQixXQUFPLENBQ0w7QUFBRUMsTUFBQUEsSUFBSSxFQUFFLGNBQVI7QUFBd0JDLE1BQUFBLE1BQU0sRUFBRSxZQUFoQztBQUE4Q0MsTUFBQUEsSUFBSSxFQUFFLFNBQXBEO0FBQStEQyxNQUFBQSxJQUFJLEVBQUU7QUFBckUsS0FESyxFQUVMO0FBQUVILE1BQUFBLElBQUksRUFBRSxJQUFSO0FBQWNDLE1BQUFBLE1BQU0sRUFBRSxhQUF0QjtBQUFxQ0MsTUFBQUEsSUFBSSxFQUFFLFFBQTNDO0FBQXFEQyxNQUFBQSxJQUFJLEVBQUU7QUFBM0QsS0FGSyxFQUdMO0FBQUVILE1BQUFBLElBQUksRUFBRSxXQUFSO0FBQXFCQyxNQUFBQSxNQUFNLEVBQUUsU0FBN0I7QUFBd0NDLE1BQUFBLElBQUksRUFBRTtBQUE5QyxLQUhLLEVBSUw7QUFBRUYsTUFBQUEsSUFBSSxFQUFFLFFBQVI7QUFBa0JDLE1BQUFBLE1BQU0sRUFBRSxrQkFBMUI7QUFBOENDLE1BQUFBLElBQUksRUFBRTtBQUFwRCxLQUpLLEVBS0w7QUFBRUYsTUFBQUEsSUFBSSxFQUFFLFVBQVI7QUFBb0JDLE1BQUFBLE1BQU0sRUFBRSxVQUE1QjtBQUF3Q0MsTUFBQUEsSUFB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RUFBVTtBQUN4QixTQUFLQyxrQkFBTCxHQUEwQixLQUFLQyxpQkFBL0I7QUFDRDs7QUFuQ2tEOzs7O0FBc0NyREMseUJBQWlCQyxRQUFqQixDQUEwQmIsU0FBMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQZXJzaXN0ZW50T2JqZWN0IH0gZnJvbSAnbWluaWRiJztcbmltcG9ydCB7IENoYW5nZXNldCBhcyBDaGFuZ2VzZXRCYXNlIH0gZnJvbSAnZnVsY3J1bS1jb3JlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhbmdlc2V0IGV4dGVuZHMgQ2hhbmdlc2V0QmFzZSB7XG4gIHN0YXRpYyBnZXQgdGFibGVOYW1lKCkge1xuICAgIHJldHVybiAnY2hhbmdlc2V0cyc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGNvbHVtbnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHsgbmFtZTogJ2FjY291bnRSb3dJRCcsIGNvbHVtbjogJ2FjY291bnRfaWQnLCB0eXBlOiAnaW50ZWdlcicsIG51bGw6IGZhbHNlIH0sXG4gICAgICB7IG5hbWU6ICdpZCcsIGNvbHVtbjogJ3Jlc291cmNlX2lkJywgdHlwZTogJ3N0cmluZycsIG51bGw6IGZhbHNlIH0sXG4gICAgICB7IG5hbWU6ICdmb3JtUm93SUQnLCBjb2x1bW46ICdmb3JtX2lkJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICdmb3JtSUQnLCBjb2x1bW46ICdmb3JtX3Jlc291cmNlX2lkJywgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgIHsgbmFtZTogJ21ldGFkYXRhJywgY29sdW1uOiAnbWV0YWRhdGEnLCB0eXBlOiAnanNvbicgfSxcbiAgICAgIHsgbmFtZTogJ21ldGFkYXRhSW5kZXhUZXh0JywgY29sdW1uOiAnbWV0YWRhdGFfaW5kZXhfdGV4dCcsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICB7IG5hbWU6ICdjbG9zZWRBdCcsIGNvbHVtbjogJ2Nsb3NlZF9hdCcsIHR5cGU6ICdkYXRldGltZScgfSxcbiAgICAgIHsgbmFtZTogJ2Nsb3NlZEJ5Um93SUQnLCBjb2x1bW46ICdjbG9zZWRfYnlfaWQnLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ2Nsb3NlZEJ5SUQnLCBjb2x1bW46ICdjbG9zZWRfYnlfcmVzb3VyY2VfaWQnLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgeyBuYW1lOiAnY3JlYXRlZEJ5Um93SUQnLCBjb2x1bW46ICdjcmVhdGVkX2J5X2lkJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICdjcmVhdGVkQnlJRCcsIGNvbHVtbjogJ2NyZWF0ZWRfYnlfcmVzb3VyY2VfaWQnLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgeyBuYW1lOiAndXBkYXRlZEJ5Um93SUQnLCBjb2x1bW46ICd1cGRhdGVkX2J5X2lkJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICd1cGRhdGVkQnlJRCcsIGNvbHVtbjogJ3VwZGF0ZWRfYnlfcmVzb3VyY2VfaWQnLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgeyBuYW1lOiAnbnVtYmVyT2ZDaGFuZ2VzJywgY29sdW1uOiAnbnVtYmVyX29mX2NoYW5nZXMnLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ251bWJlck9mQ3JlYXRlcycsIGNvbHVtbjogJ251bWJlcl9vZl9jcmVhdGVzJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICdudW1iZXJPZlVwZGF0ZXMnLCBjb2x1bW46ICdudW1iZXJfb2ZfdXBkYXRlcycsIHR5cGU6ICdpbnRlZ2VyJyB9LFxuICAgICAgeyBuYW1lOiAnbnVtYmVyT2ZEZWxldGVzJywgY29sdW1uOiAnbnVtYmVyX29mX2RlbGV0ZXMnLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ21pbkxhdCcsIGNvbHVtbjogJ21pbl9sYXQnLCB0eXBlOiAnZG91YmxlJyB9LFxuICAgICAgeyBuYW1lOiAnbWF4TGF0JywgY29sdW1uOiAnbWF4X2xhdCcsIHR5cGU6ICdkb3VibGUnIH0sXG4gICAgICB7IG5hbWU6ICdtaW5Mb24nLCBjb2x1bW46ICdtaW5fbG9uJywgdHlwZTogJ2RvdWJsZScgfSxcbiAgICAgIHsgbmFtZTogJ21heExvbicsIGNvbHVtbjogJ21heF9sb24nLCB0eXBlOiAnZG91YmxlJyB9LFxuICAgICAgeyBuYW1lOiAnY3JlYXRlZEF0JywgY29sdW1uOiAnc2VydmVyX2NyZWF0ZWRfYXQnLCB0eXBlOiAnZGF0ZXRpbWUnIH0sXG4gICAgICB7IG5hbWU6ICd1cGRhdGVkQXQnLCBjb2x1bW46ICdzZXJ2ZXJfdXBkYXRlZF9hdCcsIHR5cGU6ICdkYXRldGltZScgfVxuICAgIF07XG4gIH1cblxuICBhc3luYyBiZWZvcmVTYXZlKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9tZXRhZGF0YUluZGV4VGV4dCA9IHRoaXMubWV0YWRhdGFJbmRleFRleHQ7XG4gIH1cbn1cblxuUGVyc2lzdGVudE9iamVjdC5yZWdpc3RlcihDaGFuZ2VzZXQpO1xuIl19