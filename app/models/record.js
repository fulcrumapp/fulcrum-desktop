"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _minidb = require("minidb");

var _fulcrumCore = require("fulcrum-core");

var _sqliteRecordValues = _interopRequireDefault(require("./record-values/sqlite-record-values"));

var _form = _interopRequireDefault(require("./form"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Record extends _fulcrumCore.Record {
  static get tableName() {
    return 'records';
  }

  static get columns() {
    return [{
      name: 'accountRowID',
      column: 'account_id',
      type: 'integer',
      null: false
    }, {
      name: 'id',
      column: 'resource_id',
      type: 'string',
      null: false
    }, {
      name: 'formValuesJSON',
      column: 'form_values',
      type: 'json',
      null: false
    }, {
      name: 'clientCreatedAt',
      column: 'client_created_at',
      type: 'datetime'
    }, {
      name: 'clientUpdatedAt',
      column: 'client_updated_at',
      type: 'datetime'
    }, {
      name: 'createdAt',
      column: 'server_created_at',
      type: 'datetime'
    }, {
      name: 'updatedAt',
      column: 'server_updated_at',
      type: 'datetime'
    }, {
      name: 'status',
      column: 'status',
      type: 'string'
    }, {
      name: 'latitude',
      column: 'latitude',
      type: 'double'
    }, {
      name: 'longitude',
      column: 'longitude',
      type: 'double'
    }, {
      name: 'altitude',
      column: 'altitude',
      type: 'double'
    }, {
      name: 'speed',
      column: 'speed',
      type: 'double'
    }, {
      name: 'course',
      column: 'course',
      type: 'double'
    }, {
      name: 'horizontalAccuracy',
      column: 'horizontal_accuracy',
      type: 'double'
    }, {
      name: 'verticalAccuracy',
      column: 'vertical_accuracy',
      type: 'double'
    }, {
      name: 'formRowID',
      column: 'form_id',
      type: 'integer'
    }, {
      name: 'projectRowID',
      column: 'project_id',
      type: 'integer'
    }, {
      name: 'projectID',
      column: 'project_resource_id',
      type: 'string'
    }, {
      name: 'assignedToRowID',
      column: 'assigned_to_id',
      type: 'integer'
    }, {
      name: 'assignedToID',
      column: 'assigned_to_resource_id',
      type: 'string'
    }, {
      name: 'updatedByRowID',
      column: 'updated_by_id',
      type: 'integer'
    }, {
      name: 'updatedByID',
      column: 'updated_by_resource_id',
      type: 'string'
    }, {
      name: 'createdByRowID',
      column: 'created_by_id',
      type: 'integer'
    }, {
      name: 'createdByID',
      column: 'created_by_resource_id',
      type: 'string'
    }, {
      name: 'changesetRowID',
      column: 'changeset_id',
      type: 'integer'
    }, {
      name: 'changesetID',
      column: 'changeset_resource_id',
      type: 'string'
    }, {
      name: 'version',
      column: 'version',
      type: 'integer',
      null: false
    }, {
      name: 'hasChanges',
      column: 'has_changes',
      type: 'boolean'
    }, {
      name: 'draft',
      column: 'draft',
      type: 'boolean',
      null: false
    }, {
      name: 'isNew',
      column: 'is_new',
      type: 'boolean',
      null: false
    }, {
      name: 'lastError',
      column: 'last_error',
      type: 'string'
    }, {
      name: 'indexText',
      column: 'index_text',
      type: 'string'
    }, {
      name: 'title',
      column: 'title',
      type: 'string'
    }, {
      name: 'createdDuration',
      column: 'created_duration',
      type: 'integer'
    }, {
      name: 'updatedDuration',
      column: 'updated_duration',
      type: 'integer'
    }, {
      name: 'editedDuration',
      column: 'edited_duration',
      type: 'integer'
    }, {
      name: 'updatedLatitude',
      column: 'updated_latitude',
      type: 'double'
    }, {
      name: 'updatedLongitude',
      column: 'updated_longitude',
      type: 'double'
    }, {
      name: 'updatedAltitude',
      column: 'updated_altitude',
      type: 'double'
    }, {
      name: 'updatedAccuracy',
      column: 'updated_accuracy',
      type: 'double'
    }, {
      name: 'createdLatitude',
      column: 'created_latitude',
      type: 'double'
    }, {
      name: 'createdLongitude',
      column: 'created_longitude',
      type: 'double'
    }, {
      name: 'createdAltitude',
      column: 'created_altitude',
      type: 'double'
    }, {
      name: 'createdAccuracy',
      column: 'created_accuracy',
      type: 'double'
    }];
  }

  databaseValues(db) {
    const values = _minidb.PersistentObject.prototype.databaseValues.call(this);

    if (values.has_changes == null) {
      values.has_changes = false;
    }

    if (values.draft == null) {
      values.draft = false;
    }

    if (values.is_new == null) {
      values.is_new = false;
    }

    values.title = this.displayValue;
    return values;
  }

  get recordValueOptions() {
    return {
      escapeIdentifier: value => this.db.ident(value),
      accountPrefix: 'account_' + this.accountRowID
    };
  }

  async afterSave(options) {
    const statements = _sqliteRecordValues.default.updateForRecordStatements(this.db, this, this.recordValueOptions);

    await this.db.execute(statements.map(o => o.sql).join('\n'));
  }

  async beforeSave(options) {
    this._indexText = this.formValues.searchableValue;
  }

  async beforeDelete(options) {
    const statements = _sqliteRecordValues.default.deleteForRecordStatements(this.db, this, this.form, this.recordValueOptions);

    await this.db.execute(statements.map(o => o.sql).join('\n'));
  }

  getForm() {
    return this.loadOne('form', _form.default);
  }

  get form() {
    return this._form;
  }

  set form(form) {
    this.setOne('form', form);
  }

  static queryRowToAttributes(row) {
    const attributes = {
      id: row._record_id,
      project_id: row._project_id,
      assigned_to_id: row._assigned_to_id,
      status: row._status,
      latitude: row._latitude,
      longitude: row._longitude,
      client_created_at: new Date(row._created_at),
      client_updated_at: new Date(row._updated_at),
      version: row._version,
      created_by_id: row._created_by_id,
      updated_by_id: row._updated_by_id,
      created_at: new Date(row._server_created_at),
      updated_at: new Date(row._server_updated_at),
      altitude: row._altitude,
      speed: row._speed,
      course: row._course,
      horizontal_accuracy: row._horizontal_accuracy,
      vertical_accuracy: row._vertical_accuracy,
      form_values: JSON.parse(row._form_values),
      changeset_id: row._changeset_id,
      created_latitude: row._created_latitude,
      created_longitude: row._created_longitude,
      created_geometry: row._created_geometry,
      created_altitude: row._created_altitude,
      created_horizontal_accuracy: row._created_horizontal_accuracy,
      updated_latitude: row._updated_latitude,
      updated_longitude: row._updated_longitude,
      updated_geometry: row._updated_geometry,
      updated_altitude: row._updated_altitude,
      updated_horizontal_accuracy: row._updated_horizontal_accuracy,
      created_duration: row._created_duration,
      updated_duration: row._updated_duration,
      edited_duration: row._edited_duration
    };
    return attributes;
  }

}

exports.default = Record;

_minidb.PersistentObject.register(Record);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvcmVjb3JkLmpzIl0sIm5hbWVzIjpbIlJlY29yZCIsIlJlY29yZEJhc2UiLCJ0YWJsZU5hbWUiLCJjb2x1bW5zIiwibmFtZSIsImNvbHVtbiIsInR5cGUiLCJudWxsIiwiZGF0YWJhc2VWYWx1ZXMiLCJkYiIsInZhbHVlcyIsIlBlcnNpc3RlbnRPYmplY3QiLCJwcm90b3R5cGUiLCJjYWxsIiwiaGFzX2NoYW5nZXMiLCJkcmFmdCIsImlzX25ldyIsInRpdGxlIiwiZGlzcGxheVZhbHVlIiwicmVjb3JkVmFsdWVPcHRpb25zIiwiZXNjYXBlSWRlbnRpZmllciIsInZhbHVlIiwiaWRlbnQiLCJhY2NvdW50UHJlZml4IiwiYWNjb3VudFJvd0lEIiwiYWZ0ZXJTYXZlIiwib3B0aW9ucyIsInN0YXRlbWVudHMiLCJTUUxpdGVSZWNvcmRWYWx1ZXMiLCJ1cGRhdGVGb3JSZWNvcmRTdGF0ZW1lbnRzIiwiZXhlY3V0ZSIsIm1hcCIsIm8iLCJzcWwiLCJqb2luIiwiYmVmb3JlU2F2ZSIsIl9pbmRleFRleHQiLCJmb3JtVmFsdWVzIiwic2VhcmNoYWJsZVZhbHVlIiwiYmVmb3JlRGVsZXRlIiwiZGVsZXRlRm9yUmVjb3JkU3RhdGVtZW50cyIsImZvcm0iLCJnZXRGb3JtIiwibG9hZE9uZSIsIkZvcm0iLCJfZm9ybSIsInNldE9uZSIsInF1ZXJ5Um93VG9BdHRyaWJ1dGVzIiwicm93IiwiYXR0cmlidXRlcyIsImlkIiwiX3JlY29yZF9pZCIsInByb2plY3RfaWQiLCJfcHJvamVjdF9pZCIsImFzc2lnbmVkX3RvX2lkIiwiX2Fzc2lnbmVkX3RvX2lkIiwic3RhdHVzIiwiX3N0YXR1cyIsImxhdGl0dWRlIiwiX2xhdGl0dWRlIiwibG9uZ2l0dWRlIiwiX2xvbmdpdHVkZSIsImNsaWVudF9jcmVhdGVkX2F0IiwiRGF0ZSIsIl9jcmVhdGVkX2F0IiwiY2xpZW50X3VwZGF0ZWRfYXQiLCJfdXBkYXRlZF9hdCIsInZlcnNpb24iLCJfdmVyc2lvbiIsImNyZWF0ZWRfYnlfaWQiLCJfY3JlYXRlZF9ieV9pZCIsInVwZGF0ZWRfYnlfaWQiLCJfdXBkYXRlZF9ieV9pZCIsImNyZWF0ZWRfYXQiLCJfc2VydmVyX2NyZWF0ZWRfYXQiLCJ1cGRhdGVkX2F0IiwiX3NlcnZlcl91cGRhdGVkX2F0IiwiYWx0aXR1ZGUiLCJfYWx0aXR1ZGUiLCJzcGVlZCIsIl9zcGVlZCIsImNvdXJzZSIsIl9jb3Vyc2UiLCJob3Jpem9udGFsX2FjY3VyYWN5IiwiX2hvcml6b250YWxfYWNjdXJhY3kiLCJ2ZXJ0aWNhbF9hY2N1cmFjeSIsIl92ZXJ0aWNhbF9hY2N1cmFjeSIsImZvcm1fdmFsdWVzIiwiSlNPTiIsInBhcnNlIiwiX2Zvcm1fdmFsdWVzIiwiY2hhbmdlc2V0X2lkIiwiX2NoYW5nZXNldF9pZCIsImNyZWF0ZWRfbGF0aXR1ZGUiLCJfY3JlYXRlZF9sYXRpdHVkZSIsImNyZWF0ZWRfbG9uZ2l0dWRlIiwiX2NyZWF0ZWRfbG9uZ2l0dWRlIiwiY3JlYXRlZF9nZW9tZXRyeSIsIl9jcmVhdGVkX2dlb21ldHJ5IiwiY3JlYXRlZF9hbHRpdHVkZSIsIl9jcmVhdGVkX2FsdGl0dWRlIiwiY3JlYXRlZF9ob3Jpem9udGFsX2FjY3VyYWN5IiwiX2NyZWF0ZWRfaG9yaXpvbnRhbF9hY2N1cmFjeSIsInVwZGF0ZWRfbGF0aXR1ZGUiLCJfdXBkYXRlZF9sYXRpdHVkZSIsInVwZGF0ZWRfbG9uZ2l0dWRlIiwiX3VwZGF0ZWRfbG9uZ2l0dWRlIiwidXBkYXRlZF9nZW9tZXRyeSIsIl91cGRhdGVkX2dlb21ldHJ5IiwidXBkYXRlZF9hbHRpdHVkZSIsIl91cGRhdGVkX2FsdGl0dWRlIiwidXBkYXRlZF9ob3Jpem9udGFsX2FjY3VyYWN5IiwiX3VwZGF0ZWRfaG9yaXpvbnRhbF9hY2N1cmFjeSIsImNyZWF0ZWRfZHVyYXRpb24iLCJfY3JlYXRlZF9kdXJhdGlvbiIsInVwZGF0ZWRfZHVyYXRpb24iLCJfdXBkYXRlZF9kdXJhdGlvbiIsImVkaXRlZF9kdXJhdGlvbiIsIl9lZGl0ZWRfZHVy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LE1BQUFBLGdCQUFnQixFQUFFakQsR0FBRyxDQUFDa0QsaUJBdkJMO0FBd0JqQkMsTUFBQUEsZ0JBQWdCLEVBQUVuRCxHQUFHLENBQUNvRCxpQkF4Qkw7QUF5QmpCQyxNQUFBQSwyQkFBMkIsRUFBRXJELEdBQUcsQ0FBQ3NELDRCQXpCaEI7QUEwQmpCQyxNQUFBQSxnQkFBZ0IsRUFBRXZELEdBQUcsQ0FBQ3dELGlCQTFCTDtBQTJCakJDLE1BQUFBLGlCQUFpQixFQUFFekQsR0FBRyxDQUFDMEQsa0JBM0JOO0FBNEJqQkMsTUFBQUEsZ0JBQWdCLEVBQUUzRCxHQUFHLENBQUM0RCxpQkE1Qkw7QUE2QmpCQyxNQUFBQSxnQkFBZ0IsRUFBRTdELEdBQUcsQ0FBQzhELGlCQTdCTDtBQThCakJDLE1BQUFBLDJCQUEyQixFQUFFL0QsR0FBRyxDQUFDZ0UsNEJBOUJoQjtBQStCakJDLE1BQUFBLGdCQUFnQixFQUFFakUsR0FBRyxDQUFDa0UsaUJBL0JMO0FBZ0NqQkMsTUFBQUEsZ0JBQWdCLEVBQUVuRSxHQUFHLENBQUNvRSxpQkFoQ0w7QUFpQ2pCQyxNQUFBQSxlQUFlLEVBQUVyRSxHQUFHLENBQUNzRTtBQWpDSixLQUFuQjtBQW9DQSxXQUFPckUsVUFBUDtBQUNEOztBQW5KNEM7Ozs7QUFzSi9DdEMseUJBQWlCNEcsUUFBakIsQ0FBMEJ2SCxNQUExQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBlcnNpc3RlbnRPYmplY3QgfSBmcm9tICdtaW5pZGInO1xuaW1wb3J0IHsgUmVjb3JkIGFzIFJlY29yZEJhc2UgfSBmcm9tICdmdWxjcnVtLWNvcmUnO1xuaW1wb3J0IFNRTGl0ZVJlY29yZFZhbHVlcyBmcm9tICcuL3JlY29yZC12YWx1ZXMvc3FsaXRlLXJlY29yZC12YWx1ZXMnO1xuaW1wb3J0IEZvcm0gZnJvbSAnLi9mb3JtJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjb3JkIGV4dGVuZHMgUmVjb3JkQmFzZSB7XG4gIHN0YXRpYyBnZXQgdGFibGVOYW1lKCkge1xuICAgIHJldHVybiAncmVjb3Jkcyc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGNvbHVtbnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHsgbmFtZTogJ2FjY291bnRSb3dJRCcsIGNvbHVtbjogJ2FjY291bnRfaWQnLCB0eXBlOiAnaW50ZWdlcicsIG51bGw6IGZhbHNlIH0sXG4gICAgICB7IG5hbWU6ICdpZCcsIGNvbHVtbjogJ3Jlc291cmNlX2lkJywgdHlwZTogJ3N0cmluZycsIG51bGw6IGZhbHNlIH0sXG4gICAgICB7IG5hbWU6ICdmb3JtVmFsdWVzSlNPTicsIGNvbHVtbjogJ2Zvcm1fdmFsdWVzJywgdHlwZTogJ2pzb24nLCBudWxsOiBmYWxzZSB9LFxuICAgICAgeyBuYW1lOiAnY2xpZW50Q3JlYXRlZEF0JywgY29sdW1uOiAnY2xpZW50X2NyZWF0ZWRfYXQnLCB0eXBlOiAnZGF0ZXRpbWUnIH0sXG4gICAgICB7IG5hbWU6ICdjbGllbnRVcGRhdGVkQXQnLCBjb2x1bW46ICdjbGllbnRfdXBkYXRlZF9hdCcsIHR5cGU6ICdkYXRldGltZScgfSxcbiAgICAgIHsgbmFtZTogJ2NyZWF0ZWRBdCcsIGNvbHVtbjogJ3NlcnZlcl9jcmVhdGVkX2F0JywgdHlwZTogJ2RhdGV0aW1lJyB9LFxuICAgICAgeyBuYW1lOiAndXBkYXRlZEF0JywgY29sdW1uOiAnc2VydmVyX3VwZGF0ZWRfYXQnLCB0eXBlOiAnZGF0ZXRpbWUnIH0sXG4gICAgICB7IG5hbWU6ICdzdGF0dXMnLCBjb2x1bW46ICdzdGF0dXMnLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgeyBuYW1lOiAnbGF0aXR1ZGUnLCBjb2x1bW46ICdsYXRpdHVkZScsIHR5cGU6ICdkb3VibGUnIH0sXG4gICAgICB7IG5hbWU6ICdsb25naXR1ZGUnLCBjb2x1bW46ICdsb25naXR1ZGUnLCB0eXBlOiAnZG91YmxlJyB9LFxuICAgICAgeyBuYW1lOiAnYWx0aXR1ZGUnLCBjb2x1bW46ICdhbHRpdHVkZScsIHR5cGU6ICdkb3VibGUnIH0sXG4gICAgICB7IG5hbWU6ICdzcGVlZCcsIGNvbHVtbjogJ3NwZWVkJywgdHlwZTogJ2RvdWJsZScgfSxcbiAgICAgIHsgbmFtZTogJ2NvdXJzZScsIGNvbHVtbjogJ2NvdXJzZScsIHR5cGU6ICdkb3VibGUnIH0sXG4gICAgICB7IG5hbWU6ICdob3Jpem9udGFsQWNjdXJhY3knLCBjb2x1bW46ICdob3Jpem9udGFsX2FjY3VyYWN5JywgdHlwZTogJ2RvdWJsZScgfSxcbiAgICAgIHsgbmFtZTogJ3ZlcnRpY2FsQWNjdXJhY3knLCBjb2x1bW46ICd2ZXJ0aWNhbF9hY2N1cmFjeScsIHR5cGU6ICdkb3VibGUnIH0sXG4gICAgICB7IG5hbWU6ICdmb3JtUm93SUQnLCBjb2x1bW46ICdmb3JtX2lkJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICdwcm9qZWN0Um93SUQnLCBjb2x1bW46ICdwcm9qZWN0X2lkJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICdwcm9qZWN0SUQnLCBjb2x1bW46ICdwcm9qZWN0X3Jlc291cmNlX2lkJywgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgIHsgbmFtZTogJ2Fzc2lnbmVkVG9Sb3dJRCcsIGNvbHVtbjogJ2Fzc2lnbmVkX3RvX2lkJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICdhc3NpZ25lZFRvSUQnLCBjb2x1bW46ICdhc3NpZ25lZF90b19yZXNvdXJjZV9pZCcsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICB7IG5hbWU6ICd1cGRhdGVkQnlSb3dJRCcsIGNvbHVtbjogJ3VwZGF0ZWRfYnlfaWQnLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ3VwZGF0ZWRCeUlEJywgY29sdW1uOiAndXBkYXRlZF9ieV9yZXNvdXJjZV9pZCcsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICB7IG5hbWU6ICdjcmVhdGVkQnlSb3dJRCcsIGNvbHVtbjogJ2NyZWF0ZWRfYnlfaWQnLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ2NyZWF0ZWRCeUlEJywgY29sdW1uOiAnY3JlYXRlZF9ieV9yZXNvdXJjZV9pZCcsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICB7IG5hbWU6ICdjaGFuZ2VzZXRSb3dJRCcsIGNvbHVtbjogJ2NoYW5nZXNldF9pZCcsIHR5cGU6ICdpbnRlZ2VyJyB9LFxuICAgICAgeyBuYW1lOiAnY2hhbmdlc2V0SUQnLCBjb2x1bW46ICdjaGFuZ2VzZXRfcmVzb3VyY2VfaWQnLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgeyBuYW1lOiAndmVyc2lvbicsIGNvbHVtbjogJ3ZlcnNpb24nLCB0eXBlOiAnaW50ZWdlcicsIG51bGw6IGZhbHNlIH0sXG4gICAgICB7IG5hbWU6ICdoYXNDaGFuZ2VzJywgY29sdW1uOiAnaGFzX2NoYW5nZXMnLCB0eXBlOiAnYm9vbGVhbicgfSxcbiAgICAgIHsgbmFtZTogJ2RyYWZ0JywgY29sdW1uOiAnZHJhZnQnLCB0eXBlOiAnYm9vbGVhbicsIG51bGw6IGZhbHNlIH0sXG4gICAgICB7IG5hbWU6ICdpc05ldycsIGNvbHVtbjogJ2lzX25ldycsIHR5cGU6ICdib29sZWFuJywgbnVsbDogZmFsc2UgfSxcbiAgICAgIHsgbmFtZTogJ2xhc3RFcnJvcicsIGNvbHVtbjogJ2xhc3RfZXJyb3InLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgeyBuYW1lOiAnaW5kZXhUZXh0JywgY29sdW1uOiAnaW5kZXhfdGV4dCcsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICB7IG5hbWU6ICd0aXRsZScsIGNvbHVtbjogJ3RpdGxlJywgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgIHsgbmFtZTogJ2NyZWF0ZWREdXJhdGlvbicsIGNvbHVtbjogJ2NyZWF0ZWRfZHVyYXRpb24nLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ3VwZGF0ZWREdXJhdGlvbicsIGNvbHVtbjogJ3VwZGF0ZWRfZHVyYXRpb24nLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ2VkaXRlZER1cmF0aW9uJywgY29sdW1uOiAnZWRpdGVkX2R1cmF0aW9uJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICd1cGRhdGVkTGF0aXR1ZGUnLCBjb2x1bW46ICd1cGRhdGVkX2xhdGl0dWRlJywgdHlwZTogJ2RvdWJsZScgfSxcbiAgICAgIHsgbmFtZTogJ3VwZGF0ZWRMb25naXR1ZGUnLCBjb2x1bW46ICd1cGRhdGVkX2xvbmdpdHVkZScsIHR5cGU6ICdkb3VibGUnIH0sXG4gICAgICB7IG5hbWU6ICd1cGRhdGVkQWx0aXR1ZGUnLCBjb2x1bW46ICd1cGRhdGVkX2FsdGl0dWRlJywgdHlwZTogJ2RvdWJsZScgfSxcbiAgICAgIHsgbmFtZTogJ3VwZGF0ZWRBY2N1cmFjeScsIGNvbHVtbjogJ3VwZGF0ZWRfYWNjdXJhY3knLCB0eXBlOiAnZG91YmxlJyB9LFxuICAgICAgeyBuYW1lOiAnY3JlYXRlZExhdGl0dWRlJywgY29sdW1uOiAnY3JlYXRlZF9sYXRpdHVkZScsIHR5cGU6ICdkb3VibGUnIH0sXG4gICAgICB7IG5hbWU6ICdjcmVhdGVkTG9uZ2l0dWRlJywgY29sdW1uOiAnY3JlYXRlZF9sb25naXR1ZGUnLCB0eXBlOiAnZG91YmxlJyB9LFxuICAgICAgeyBuYW1lOiAnY3JlYXRlZEFsdGl0dWRlJywgY29sdW1uOiAnY3JlYXRlZF9hbHRpdHVkZScsIHR5cGU6ICdkb3VibGUnIH0sXG4gICAgICB7IG5hbWU6ICdjcmVhdGVkQWNjdXJhY3knLCBjb2x1bW46ICdjcmVhdGVkX2FjY3VyYWN5JywgdHlwZTogJ2RvdWJsZScgfVxuICAgIF07XG4gIH1cblxuICBkYXRhYmFzZVZhbHVlcyhkYikge1xuICAgIGNvbnN0IHZhbHVlcyA9IFBlcnNpc3RlbnRPYmplY3QucHJvdG90eXBlLmRhdGFiYXNlVmFsdWVzLmNhbGwodGhpcyk7XG5cbiAgICBpZiAodmFsdWVzLmhhc19jaGFuZ2VzID09IG51bGwpIHtcbiAgICAgIHZhbHVlcy5oYXNfY2hhbmdlcyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZXMuZHJhZnQgPT0gbnVsbCkge1xuICAgICAgdmFsdWVzLmRyYWZ0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlcy5pc19uZXcgPT0gbnVsbCkge1xuICAgICAgdmFsdWVzLmlzX25ldyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhbHVlcy50aXRsZSA9IHRoaXMuZGlzcGxheVZhbHVlO1xuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuXG4gIGdldCByZWNvcmRWYWx1ZU9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVzY2FwZUlkZW50aWZpZXI6ICh2YWx1ZSkgPT4gdGhpcy5kYi5pZGVudCh2YWx1ZSksXG4gICAgICBhY2NvdW50UHJlZml4OiAnYWNjb3VudF8nICsgdGhpcy5hY2NvdW50Um93SURcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgYWZ0ZXJTYXZlKG9wdGlvbnMpIHtcbiAgICBjb25zdCBzdGF0ZW1lbnRzID0gU1FMaXRlUmVjb3JkVmFsdWVzLnVwZGF0ZUZvclJlY29yZFN0YXRlbWVudHModGhpcy5kYiwgdGhpcywgdGhpcy5yZWNvcmRWYWx1ZU9wdGlvbnMpO1xuXG4gICAgYXdhaXQgdGhpcy5kYi5leGVjdXRlKHN0YXRlbWVudHMubWFwKG8gPT4gby5zcWwpLmpvaW4oJ1xcbicpKTtcbiAgfVxuXG4gIGFzeW5jIGJlZm9yZVNhdmUob3B0aW9ucykge1xuICAgIHRoaXMuX2luZGV4VGV4dCA9IHRoaXMuZm9ybVZhbHVlcy5zZWFyY2hhYmxlVmFsdWU7XG4gIH1cblxuICBhc3luYyBiZWZvcmVEZWxldGUob3B0aW9ucykge1xuICAgIGNvbnN0IHN0YXRlbWVudHMgPSBTUUxpdGVSZWNvcmRWYWx1ZXMuZGVsZXRlRm9yUmVjb3JkU3RhdGVtZW50cyh0aGlzLmRiLCB0aGlzLCB0aGlzLmZvcm0sIHRoaXMucmVjb3JkVmFsdWVPcHRpb25zKTtcblxuICAgIGF3YWl0IHRoaXMuZGIuZXhlY3V0ZShzdGF0ZW1lbnRzLm1hcChvID0+IG8uc3FsKS5qb2luKCdcXG4nKSk7XG4gIH1cblxuICBnZXRGb3JtKCkge1xuICAgIHJldHVybiB0aGlzLmxvYWRPbmUoJ2Zvcm0nLCBGb3JtKTtcbiAgfVxuXG4gIGdldCBmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLl9mb3JtO1xuICB9XG5cbiAgc2V0IGZvcm0oZm9ybSkge1xuICAgIHRoaXMuc2V0T25lKCdmb3JtJywgZm9ybSk7XG4gIH1cblxuICBzdGF0aWMgcXVlcnlSb3dUb0F0dHJpYnV0ZXMocm93KSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICAgIGlkOiByb3cuX3JlY29yZF9pZCxcbiAgICAgIHByb2plY3RfaWQ6IHJvdy5fcHJvamVjdF9pZCxcbiAgICAgIGFzc2lnbmVkX3RvX2lkOiByb3cuX2Fzc2lnbmVkX3RvX2lkLFxuICAgICAgc3RhdHVzOiByb3cuX3N0YXR1cyxcbiAgICAgIGxhdGl0dWRlOiByb3cuX2xhdGl0dWRlLFxuICAgICAgbG9uZ2l0dWRlOiByb3cuX2xvbmdpdHVkZSxcbiAgICAgIGNsaWVudF9jcmVhdGVkX2F0OiBuZXcgRGF0ZShyb3cuX2NyZWF0ZWRfYXQpLFxuICAgICAgY2xpZW50X3VwZGF0ZWRfYXQ6IG5ldyBEYXRlKHJvdy5fdXBkYXRlZF9hdCksXG4gICAgICB2ZXJzaW9uOiByb3cuX3ZlcnNpb24sXG4gICAgICBjcmVhdGVkX2J5X2lkOiByb3cuX2NyZWF0ZWRfYnlfaWQsXG4gICAgICB1cGRhdGVkX2J5X2lkOiByb3cuX3VwZGF0ZWRfYnlfaWQsXG4gICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZShyb3cuX3NlcnZlcl9jcmVhdGVkX2F0KSxcbiAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKHJvdy5fc2VydmVyX3VwZGF0ZWRfYXQpLFxuICAgICAgYWx0aXR1ZGU6IHJvdy5fYWx0aXR1ZGUsXG4gICAgICBzcGVlZDogcm93Ll9zcGVlZCxcbiAgICAgIGNvdXJzZTogcm93Ll9jb3Vyc2UsXG4gICAgICBob3Jpem9udGFsX2FjY3VyYWN5OiByb3cuX2hvcml6b250YWxfYWNjdXJhY3ksXG4gICAgICB2ZXJ0aWNhbF9hY2N1cmFjeTogcm93Ll92ZXJ0aWNhbF9hY2N1cmFjeSxcbiAgICAgIGZvcm1fdmFsdWVzOiBKU09OLnBhcnNlKHJvdy5fZm9ybV92YWx1ZXMpLFxuICAgICAgY2hhbmdlc2V0X2lkOiByb3cuX2NoYW5nZXNldF9pZCxcbiAgICAgIGNyZWF0ZWRfbGF0aXR1ZGU6IHJvdy5fY3JlYXRlZF9sYXRpdHVkZSxcbiAgICAgIGNyZWF0ZWRfbG9uZ2l0dWRlOiByb3cuX2NyZWF0ZWRfbG9uZ2l0dWRlLFxuICAgICAgY3JlYXRlZF9nZW9tZXRyeTogcm93Ll9jcmVhdGVkX2dlb21ldHJ5LFxuICAgICAgY3JlYXRlZF9hbHRpdHVkZTogcm93Ll9jcmVhdGVkX2FsdGl0dWRlLFxuICAgICAgY3JlYXRlZF9ob3Jpem9udGFsX2FjY3VyYWN5OiByb3cuX2NyZWF0ZWRfaG9yaXpvbnRhbF9hY2N1cmFjeSxcbiAgICAgIHVwZGF0ZWRfbGF0aXR1ZGU6IHJvdy5fdXBkYXRlZF9sYXRpdHVkZSxcbiAgICAgIHVwZGF0ZWRfbG9uZ2l0dWRlOiByb3cuX3VwZGF0ZWRfbG9uZ2l0dWRlLFxuICAgICAgdXBkYXRlZF9nZW9tZXRyeTogcm93Ll91cGRhdGVkX2dlb21ldHJ5LFxuICAgICAgdXBkYXRlZF9hbHRpdHVkZTogcm93Ll91cGRhdGVkX2FsdGl0dWRlLFxuICAgICAgdXBkYXRlZF9ob3Jpem9udGFsX2FjY3VyYWN5OiByb3cuX3VwZGF0ZWRfaG9yaXpvbnRhbF9hY2N1cmFjeSxcbiAgICAgIGNyZWF0ZWRfZHVyYXRpb246IHJvdy5fY3JlYXRlZF9kdXJhdGlvbixcbiAgICAgIHVwZGF0ZWRfZHVyYXRpb246IHJvdy5fdXBkYXRlZF9kdXJhdGlvbixcbiAgICAgIGVkaXRlZF9kdXJhdGlvbjogcm93Ll9lZGl0ZWRfZHVyYXRpb25cbiAgICB9O1xuXG4gICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gIH1cbn1cblxuUGVyc2lzdGVudE9iamVjdC5yZWdpc3RlcihSZWNvcmQpO1xuIl19