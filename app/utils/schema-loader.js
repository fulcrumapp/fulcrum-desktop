"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fulcrumQuerySql = require("fulcrum-query-sql");

var _pgFormat = _interopRequireDefault(require("pg-format"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SchemaLoader {
  static async loadFormSchema(form) {
    const cols = await this.loadColumns(form);
    return new _fulcrumQuerySql.FormSchema(form, cols.rawFormColumns, cols.rawRepeatableColumns, {
      fullSchema: true
    });
  }

  static async loadColumns(form) {
    const tableNames = [`form_${form.rowID}_view`];
    const repeatables = form.elementsOfType('Repeatable');

    for (const repeatable of repeatables) {
      tableNames.push(`form_${form.rowID}_${repeatable.key}_view`);
    }

    const sql = (0, _pgFormat.default)(`
SELECT
  tables.field AS table_field,
  columns.name,
  columns.ordinal,
  columns.field,
  columns.type,
  columns.part
FROM columns
INNER JOIN tables ON columns.table_name = tables.name
WHERE
  columns.table_name IN (%L)
ORDER BY columns.table_name, columns.ordinal
    `, tableNames);
    const rows = await form.db.all(sql);
    const rawFormColumns = [];
    const rawRepeatableColumns = {};

    for (const row of rows) {
      if (row.table_field) {
        if (!rawRepeatableColumns[row.table_field]) {
          rawRepeatableColumns[row.table_field] = [];
        }

        rawRepeatableColumns[row.table_field].push(row);
      } else {
        rawFormColumns.push(row);
      }
    }

    return {
      rawFormColumns,
      rawRepeatableColumns
    };
  }

}

exports.default = SchemaLoader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9zY2hlbWEtbG9hZGVyLmpzIl0sIm5hbWVzIjpbIlNjaGVtYUxvYWRlciIsImxvYWRGb3JtU2NoZW1hIiwiZm9ybSIsImNvbHMiLCJsb2FkQ29sdW1ucyIsIkZvcm1TY2hlbWEiLCJyYXdGb3JtQ29sdW1ucyIsInJhd1JlcGVhdGFibGVDb2x1bW5zIiwiZnVsbFNjaGVtYSIsInRhYmxlTmFtZXMiLCJyb3dJRCIsInJlcGVhdGFibGVzIiwiZWxlbWVudHNPZlR5cGUiLCJyZXBlYXRhYmxlIiwicHVzaCIsImtleSIsInNxbCIsInJvd3MiLCJkYiIsImFsbCIsInJvdyIsInRhYmxlX2ZpZWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFZSxNQUFNQSxZQUFOLENBQW1CO0FBQ0wsZUFBZEMsY0FBYyxDQUFDQyxJQUFELEVBQU87QUFDaEMsVUFBTUMsSUFBSSxHQUFHLE1BQU0sS0FBS0MsV0FBTCxDQUFpQkYsSUFBakIsQ0FBbkI7QUFFQSxXQUFPLElBQUlHLDJCQUFKLENBQWVILElBQWYsRUFBcUJDLElBQUksQ0FBQ0csY0FBMUIsRUFBMENILElBQUksQ0FBQ0ksb0JBQS9DLEVBQXFFO0FBQUNDLE1BQUFBLFVBQVUsRUFBRTtBQUFiLEtBQXJFLENBQVA7QUFDRDs7QUFFdUIsZUFBWEosV0FBVyxDQUFDRixJQUFELEVBQU87QUFDN0IsVUFBTU8sVUFBVSxHQUFHLENBQ2hCLFFBQU9QLElBQUksQ0FBQ1EsS0FBTSxPQURGLENBQW5CO0FBSUEsVUFBTUMsV0FBVyxHQUFHVCxJQUFJLENBQUNVLGNBQUwsQ0FBb0IsWUFBcEIsQ0FBcEI7O0FBRUEsU0FBSyxNQUFNQyxVQUFYLElBQXlCRixXQUF6QixFQUFzQztBQUNwQ0YsTUFBQUEsVUFBVSxDQUFDSyxJQUFYLENBQWlCLFFBQU9aLElBQUksQ0FBQ1EsS0FBTSxJQUFHRyxVQUFVLENBQUNFLEdBQUksT0FBckQ7QUFDRDs7QUFFRCxVQUFNQyxHQUFHLEdBQUcsdUJBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FiZ0IsRUFhVFAsVUFiUyxDQUFaO0FBZUEsVUFBTVEsSUFBSSxHQUFHLE1BQU1mLElBQUksQ0FBQ2dCLEVBQUwsQ0FBUUMsR0FBUixDQUFZSCxHQUFaLENBQW5CO0FBRUEsVUFBTVYsY0FBYyxHQUFHLEVBQXZCO0FBQ0EsVUFBTUMsb0JBQW9CLEdBQUcsRUFBN0I7O0FBRUEsU0FBSyxNQUFNYSxHQUFYLElBQWtCSCxJQUFsQixFQUF3QjtBQUN0QixVQUFJRyxHQUFHLENBQUNDLFdBQVIsRUFBcUI7QUFDbkIsWUFBSSxDQUFDZCxvQkFBb0IsQ0FBQ2EsR0FBRyxDQUFDQyxXQUFMLENBQXpCLEVBQTRDO0FBQzFDZCxVQUFBQSxvQkFBb0IsQ0FBQ2EsR0FBRyxDQUFDQyxXQUFMLENBQXBCLEdBQXdDLEVBQXhDO0FBQ0Q7O0FBRURkLFFBQUFBLG9CQUFvQixDQUFDYSxHQUFHLENBQUNDLFdBQUwsQ0FBcEIsQ0FBc0NQLElBQXRDLENBQTJDTSxHQUEzQztBQUNELE9BTkQsTUFNTztBQUNMZCxRQUFBQSxjQUFjLENBQUNRLElBQWYsQ0FBb0JNLEdBQXBCO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPO0FBQUNkLE1BQUFBLGNBQUQ7QUFBaUJDLE1BQUFBO0FBQWpCLEtBQVA7QUFDRDs7QUFuRCtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybVNjaGVtYSB9IGZyb20gJ2Z1bGNydW0tcXVlcnktc3FsJztcbmltcG9ydCBwZ2Zvcm1hdCBmcm9tICdwZy1mb3JtYXQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2hlbWFMb2FkZXIge1xuICBzdGF0aWMgYXN5bmMgbG9hZEZvcm1TY2hlbWEoZm9ybSkge1xuICAgIGNvbnN0IGNvbHMgPSBhd2FpdCB0aGlzLmxvYWRDb2x1bW5zKGZvcm0pO1xuXG4gICAgcmV0dXJuIG5ldyBGb3JtU2NoZW1hKGZvcm0sIGNvbHMucmF3Rm9ybUNvbHVtbnMsIGNvbHMucmF3UmVwZWF0YWJsZUNvbHVtbnMsIHtmdWxsU2NoZW1hOiB0cnVlfSk7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgbG9hZENvbHVtbnMoZm9ybSkge1xuICAgIGNvbnN0IHRhYmxlTmFtZXMgPSBbXG4gICAgICBgZm9ybV8ke2Zvcm0ucm93SUR9X3ZpZXdgXG4gICAgXTtcblxuICAgIGNvbnN0IHJlcGVhdGFibGVzID0gZm9ybS5lbGVtZW50c09mVHlwZSgnUmVwZWF0YWJsZScpO1xuXG4gICAgZm9yIChjb25zdCByZXBlYXRhYmxlIG9mIHJlcGVhdGFibGVzKSB7XG4gICAgICB0YWJsZU5hbWVzLnB1c2goYGZvcm1fJHtmb3JtLnJvd0lEfV8ke3JlcGVhdGFibGUua2V5fV92aWV3YCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3FsID0gcGdmb3JtYXQoYFxuU0VMRUNUXG4gIHRhYmxlcy5maWVsZCBBUyB0YWJsZV9maWVsZCxcbiAgY29sdW1ucy5uYW1lLFxuICBjb2x1bW5zLm9yZGluYWwsXG4gIGNvbHVtbnMuZmllbGQsXG4gIGNvbHVtbnMudHlwZSxcbiAgY29sdW1ucy5wYXJ0XG5GUk9NIGNvbHVtbnNcbklOTkVSIEpPSU4gdGFibGVzIE9OIGNvbHVtbnMudGFibGVfbmFtZSA9IHRhYmxlcy5uYW1lXG5XSEVSRVxuICBjb2x1bW5zLnRhYmxlX25hbWUgSU4gKCVMKVxuT1JERVIgQlkgY29sdW1ucy50YWJsZV9uYW1lLCBjb2x1bW5zLm9yZGluYWxcbiAgICBgLCB0YWJsZU5hbWVzKTtcblxuICAgIGNvbnN0IHJvd3MgPSBhd2FpdCBmb3JtLmRiLmFsbChzcWwpO1xuXG4gICAgY29uc3QgcmF3Rm9ybUNvbHVtbnMgPSBbXTtcbiAgICBjb25zdCByYXdSZXBlYXRhYmxlQ29sdW1ucyA9IHt9O1xuXG4gICAgZm9yIChjb25zdCByb3cgb2Ygcm93cykge1xuICAgICAgaWYgKHJvdy50YWJsZV9maWVsZCkge1xuICAgICAgICBpZiAoIXJhd1JlcGVhdGFibGVDb2x1bW5zW3Jvdy50YWJsZV9maWVsZF0pIHtcbiAgICAgICAgICByYXdSZXBlYXRhYmxlQ29sdW1uc1tyb3cudGFibGVfZmllbGRdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICByYXdSZXBlYXRhYmxlQ29sdW1uc1tyb3cudGFibGVfZmllbGRdLnB1c2gocm93KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhd0Zvcm1Db2x1bW5zLnB1c2gocm93KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge3Jhd0Zvcm1Db2x1bW5zLCByYXdSZXBlYXRhYmxlQ29sdW1uc307XG4gIH1cbn1cbiJdfQ==