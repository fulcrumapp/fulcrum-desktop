"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uuid = _interopRequireDefault(require("uuid"));

var _lodash = _interopRequireDefault(require("lodash"));

var _fs = _interopRequireDefault(require("fs"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _child_process = require("child_process");

var _async = _interopRequireDefault(require("async"));

var _rimraf = _interopRequireDefault(require("rimraf"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_MARGIN = '0.75in';
const DEFAULT_PAGE_SIZE = 'Letter';
const DEFAULT_IMAGE_QUALITY = '85';
const DEFAULT_ORIENTATION = 'Portrait';

class HtmlToPdf {
  constructor(html, {
    header,
    footer,
    cover,
    marginTop,
    marginBottom,
    marginLeft,
    marginRight,
    pageSize,
    imageQuality,
    orientation,
    wkhtmltopdf
  }) {
    this.tempID = _uuid.default.v4();
    this.debug = false;
    this.html = html;
    this.header = header;
    this.footer = footer;
    this.cover = cover;
    this.wkhtmltopdf = wkhtmltopdf;
    this.marginTop = marginTop || DEFAULT_MARGIN;
    this.marginBottom = marginBottom || DEFAULT_MARGIN;
    this.marginLeft = marginLeft || DEFAULT_MARGIN;
    this.marginRight = marginRight || DEFAULT_MARGIN;
    this.pageSize = pageSize || DEFAULT_PAGE_SIZE;
    this.imageQuality = imageQuality || DEFAULT_IMAGE_QUALITY;
    this.orientation = orientation || DEFAULT_ORIENTATION;
  }

  get binary() {
    return this.wkhtmltopdf || '/usr/local/bin/wkhtmltopdf';
  }

  get command() {
    const parts = ['--page-size', this.pageSize, '--margin-top', this.marginTop, '--margin-left', this.marginLeft, '--margin-bottom', this.marginBottom, '--margin-right', this.marginRight, '--image-quality', this.imageQuality, '--orientation', this.orientation, '--encoding', 'UTF-8', this.quietArgument, ...this.coverArgument, ...this.headerArgument, ...this.footerArgument, this.inputArgument, this.outputArgument];
    return _lodash.default.compact(parts);
  }

  tempFilePath(part, ext = 'html') {
    return _path.default.join(_os.default.tmpdir(), `${this.tempID}_${part}.${ext}`);
  }

  get quietArgument() {
    return '--quiet'; // return this.debug ? null : '--quiet';
  }

  get inputArgument() {
    return '-';
  }

  get outputArgument() {
    return this.tempFilePath(this.tempID + '_output', 'pdf');
  }

  get coverArgument() {
    if (this.cover) {
      const coverPath = this.tempFilePath('cover');

      _fs.default.writeFileSync(coverPath, this.cover);

      return ['cover', coverPath];
    }

    return [];
  }

  get headerArgument() {
    if (this.header) {
      const headerPath = this.tempFilePath('header');

      _fs.default.writeFileSync(headerPath, this.header);

      return ['--header-html', headerPath];
    }

    return [];
  }

  get footerArgument() {
    if (this.footer) {
      const footerPath = this.tempFilePath('footer');

      _fs.default.writeFileSync(footerPath, this.footer);

      return ['--footer-html', footerPath];
    }

    return [];
  }

  run() {
    return new Promise((resolve, reject) => {
      const cmd = this.command;
      const process = (0, _child_process.spawn)(this.binary, cmd, {});
      const stdout = [];
      const stderr = [];
      process.stdin.setEncoding('utf8');
      process.stdin.end(this.html);
      process.stdout.on('data', data => {
        stdout.push(data.toString());
      });
      process.stderr.on('data', data => {
        stderr.push(data.toString());
      });
      process.on('close', code => {
        _fs.default.stat(this.outputArgument, (err, stat) => {
          if (err) {
            return reject(err);
          }

          return resolve({
            code: code,
            stdout: stdout,
            stderr: stderr,
            size: stat.size,
            file: this.outputArgument
          });
        });
      });
    });
  }

  cleanup() {
    const files = [this.tempFilePath('header'), this.tempFilePath('cover'), this.tempFilePath('content'), this.tempFilePath('footer'), this.tempFilePath('toc', 'xml'), this.tempFilePath('output', 'pdf')];
    return new Promise((resolve, reject) => {
      _async.default.each(files, _rimraf.default, err => {
        if (err) {
          return reject(err);
        } else {
          return resolve();
        }
      });
    });
  }

}

exports.default = HtmlToPdf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBvcnRzL2h0bWwtdG8tcGRmLmpzIl0sIm5hbWVzIjpbIkRFRkFVTFRfTUFSR0lOIiwiREVGQVVMVF9QQUdFX1NJWkUiLCJERUZBVUxUX0lNQUdFX1FVQUxJVFkiLCJERUZBVUxUX09SSUVOVEFUSU9OIiwiSHRtbFRvUGRmIiwiY29uc3RydWN0b3IiLCJodG1sIiwiaGVhZGVyIiwiZm9vdGVyIiwiY292ZXIiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJwYWdlU2l6ZSIsImltYWdlUXVhbGl0eSIsIm9yaWVudGF0aW9uIiwid2todG1sdG9wZGYiLCJ0ZW1wSUQiLCJ1dWlkIiwidjQiLCJkZWJ1ZyIsImJpbmFyeSIsImNvbW1hbmQiLCJwYXJ0cyIsInF1aWV0QXJndW1lbnQiLCJjb3ZlckFyZ3VtZW50IiwiaGVhZGVyQXJndW1lbnQiLCJmb290ZXJBcmd1bWVudCIsImlucHV0QXJndW1lbnQiLCJvdXRwdXRBcmd1bWVudCIsIl8iLCJjb21wYWN0IiwidGVtcEZpbGVQYXRoIiwicGFydCIsImV4dCIsInBhdGgiLCJqb2luIiwib3MiLCJ0bXBkaXIiLCJjb3ZlclBhdGgiLCJmcyIsIndyaXRlRmlsZVN5bmMiLCJoZWFkZXJQYXRoIiwiZm9vdGVyUGF0aCIsInJ1biIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY21kIiwicHJvY2VzcyIsInN0ZG91dCIsInN0ZGVyciIsInN0ZGluIiwic2V0RW5jb2RpbmciLCJlbmQiLCJvbiIsImRhdGEiLCJwdXNoIiwidG9TdHJpbmciLCJjb2RlIiwic3RhdCIsImVyciIsInNpemUiLCJmaWxlIiwiY2xlYW51cCIsImZpbGVzIiwiYXN5bmMiLCJlYWNoIiwicmltcmFmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxjQUFjLEdBQUcsUUFBdkI7QUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxRQUExQjtBQUNBLE1BQU1DLHFCQUFxQixHQUFHLElBQTlCO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsVUFBNUI7O0FBRWUsTUFBTUMsU0FBTixDQUFnQjtBQUM3QkMsRUFBQUEsV0FBVyxDQUFDQyxJQUFELEVBQU87QUFBQ0MsSUFBQUEsTUFBRDtBQUFTQyxJQUFBQSxNQUFUO0FBQWlCQyxJQUFBQSxLQUFqQjtBQUF3QkMsSUFBQUEsU0FBeEI7QUFBbUNDLElBQUFBLFlBQW5DO0FBQWlEQyxJQUFBQSxVQUFqRDtBQUE2REMsSUFBQUEsV0FBN0Q7QUFBMEVDLElBQUFBLFFBQTFFO0FBQW9GQyxJQUFBQSxZQUFwRjtBQUFrR0MsSUFBQUEsV0FBbEc7QUFBK0dDLElBQUFBO0FBQS9HLEdBQVAsRUFBb0k7QUFDN0ksU0FBS0MsTUFBTCxHQUFjQyxjQUFLQyxFQUFMLEVBQWQ7QUFDQSxTQUFLQyxLQUFMLEdBQWEsS0FBYjtBQUNBLFNBQUtmLElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtDLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtDLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtDLEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtRLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0EsU0FBS1AsU0FBTCxHQUFpQkEsU0FBUyxJQUFJVixjQUE5QjtBQUNBLFNBQUtXLFlBQUwsR0FBb0JBLFlBQVksSUFBSVgsY0FBcEM7QUFDQSxTQUFLWSxVQUFMLEdBQWtCQSxVQUFVLElBQUlaLGNBQWhDO0FBQ0EsU0FBS2EsV0FBTCxHQUFtQkEsV0FBVyxJQUFJYixjQUFsQztBQUNBLFNBQUtjLFFBQUwsR0FBZ0JBLFFBQVEsSUFBSWIsaUJBQTVCO0FBQ0EsU0FBS2MsWUFBTCxHQUFvQkEsWUFBWSxJQUFJYixxQkFBcEM7QUFDQSxTQUFLYyxXQUFMLEdBQW1CQSxXQUFXLElBQUliLG1CQUFsQztBQUNEOztBQUVTLE1BQU5tQixNQUFNLEdBQUc7QUFDWCxXQUFPLEtBQUtMLFdBQUwsSUFBb0IsNEJBQTNCO0FBQ0Q7O0FBRVUsTUFBUE0sT0FBTyxHQUFHO0FBQ1osVUFBTUMsS0FBSyxHQUFHLENBQ1osYUFEWSxFQUNHLEtBQUtWLFFBRFIsRUFFWixjQUZZLEVBRUksS0FBS0osU0FGVCxFQUdaLGVBSFksRUFHSyxLQUFLRSxVQUhWLEVBSVosaUJBSlksRUFJTyxLQUFLRCxZQUpaLEVBS1osZ0JBTFksRUFLTSxLQUFLRSxXQUxYLEVBTVosaUJBTlksRUFNTyxLQUFLRSxZQU5aLEVBT1osZUFQWSxFQU9LLEtBQUtDLFdBUFYsRUFRWixZQVJZLEVBUUUsT0FSRixFQVNaLEtBQUtTLGFBVE8sRUFVWixHQUFHLEtBQUtDLGFBVkksRUFXWixHQUFHLEtBQUtDLGNBWEksRUFZWixHQUFHLEtBQUtDLGNBWkksRUFhWixLQUFLQyxhQWJPLEVBY1osS0FBS0MsY0FkTyxDQUFkO0FBZ0JBLFdBQU9DLGdCQUFFQyxPQUFGLENBQVVSLEtBQVYsQ0FBUDtBQUNEOztBQUVEUyxFQUFBQSxZQUFZLENBQUNDLElBQUQsRUFBT0MsR0FBRyxHQUFHLE1BQWIsRUFBcUI7QUFDL0IsV0FBT0MsY0FBS0MsSUFBTCxDQUFVQyxZQUFHQyxNQUFILEVBQVYsRUFBd0IsR0FBRSxLQUFLckIsTUFBTyxJQUFHZ0IsSUFBSyxJQUFHQyxHQUFJLEVBQXJELENBQVA7QUFDRDs7QUFFZ0IsTUFBYlYsYUFBYSxHQUFHO0FBQ2xCLFdBQU8sU0FBUCxDQURrQixDQUVsQjtBQUNEOztBQUVnQixNQUFiSSxhQUFhLEdBQUc7QUFDbEIsV0FBTyxHQUFQO0FBQ0Q7O0FBRWlCLE1BQWRDLGNBQWMsR0FBRztBQUNuQixXQUFPLEtBQUtHLFlBQUwsQ0FBa0IsS0FBS2YsTUFBTCxHQUFjLFNBQWhDLEVBQTJDLEtBQTNDLENBQVA7QUFDRDs7QUFFZ0IsTUFBYlEsYUFBYSxHQUFHO0FBQ2xCLFFBQUksS0FBS2pCLEtBQVQsRUFBZ0I7QUFDZCxZQUFNK0IsU0FBUyxHQUFHLEtBQUtQLFlBQUwsQ0FBa0IsT0FBbEIsQ0FBbEI7O0FBRUFRLGtCQUFHQyxhQUFILENBQWlCRixTQUFqQixFQUE0QixLQUFLL0IsS0FBakM7O0FBRUEsYUFBTyxDQUFFLE9BQUYsRUFBVytCLFNBQVgsQ0FBUDtBQUNEOztBQUVELFdBQU8sRUFBUDtBQUNEOztBQUVpQixNQUFkYixjQUFjLEdBQUc7QUFDbkIsUUFBSSxLQUFLcEIsTUFBVCxFQUFpQjtBQUNmLFlBQU1vQyxVQUFVLEdBQUcsS0FBS1YsWUFBTCxDQUFrQixRQUFsQixDQUFuQjs7QUFFQVEsa0JBQUdDLGFBQUgsQ0FBaUJDLFVBQWpCLEVBQTZCLEtBQUtwQyxNQUFsQzs7QUFFQSxhQUFPLENBQUUsZUFBRixFQUFtQm9DLFVBQW5CLENBQVA7QUFDRDs7QUFFRCxXQUFPLEVBQVA7QUFDRDs7QUFFaUIsTUFBZGYsY0FBYyxHQUFHO0FBQ25CLFFBQUksS0FBS3BCLE1BQVQsRUFBaUI7QUFDZixZQUFNb0MsVUFBVSxHQUFHLEtBQUtYLFlBQUwsQ0FBa0IsUUFBbEIsQ0FBbkI7O0FBRUFRLGtCQUFHQyxhQUFILENBQWlCRSxVQUFqQixFQUE2QixLQUFLcEMsTUFBbEM7O0FBRUEsYUFBTyxDQUFFLGVBQUYsRUFBbUJvQyxVQUFuQixDQUFQO0FBQ0Q7O0FBRUQsV0FBTyxFQUFQO0FBQ0Q7O0FBRURDLEVBQUFBLEdBQUcsR0FBRztBQUNKLFdBQU8sSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUN0QyxZQUFNQyxHQUFHLEdBQUcsS0FBSzFCLE9BQWpCO0FBRUEsWUFBTTJCLE9BQU8sR0FBRywwQkFBTSxLQUFLNUIsTUFBWCxFQUFtQjJCLEdBQW5CLEVBQXdCLEVBQXhCLENBQWhCO0FBRUEsWUFBTUUsTUFBTSxHQUFHLEVBQWY7QUFDQSxZQUFNQyxNQUFNLEdBQUcsRUFBZjtBQUVBRixNQUFBQSxPQUFPLENBQUNHLEtBQVIsQ0FBY0MsV0FBZCxDQUEwQixNQUExQjtBQUNBSixNQUFBQSxPQUFPLENBQUNHLEtBQVIsQ0FBY0UsR0FBZCxDQUFrQixLQUFLakQsSUFBdkI7QUFFQTRDLE1BQUFBLE9BQU8sQ0FBQ0MsTUFBUixDQUFlSyxFQUFmLENBQWtCLE1BQWxCLEVBQTJCQyxJQUFELElBQVU7QUFDbENOLFFBQUFBLE1BQU0sQ0FBQ08sSUFBUCxDQUFZRCxJQUFJLENBQUNFLFFBQUwsRUFBWjtBQUNELE9BRkQ7QUFJQVQsTUFBQUEsT0FBTyxDQUFDRSxNQUFSLENBQWVJLEVBQWYsQ0FBa0IsTUFBbEIsRUFBMkJDLElBQUQsSUFBVTtBQUNsQ0wsUUFBQUEsTUFBTSxDQUFDTSxJQUFQLENBQVlELElBQUksQ0FBQ0UsUUFBTCxFQUFaO0FBQ0QsT0FGRDtBQUlBVCxNQUFBQSxPQUFPLENBQUNNLEVBQVIsQ0FBVyxPQUFYLEVBQXFCSSxJQUFELElBQVU7QUFDNUJuQixvQkFBR29CLElBQUgsQ0FBUSxLQUFLL0IsY0FBYixFQUE2QixDQUFDZ0MsR0FBRCxFQUFNRCxJQUFOLEtBQWU7QUFDMUMsY0FBSUMsR0FBSixFQUFTO0FBQ1AsbUJBQU9kLE1BQU0sQ0FBQ2MsR0FBRCxDQUFiO0FBQ0Q7O0FBRUQsaUJBQU9mLE9BQU8sQ0FBQztBQUFDYSxZQUFBQSxJQUFJLEVBQUVBLElBQVA7QUFDQ1QsWUFBQUEsTUFBTSxFQUFFQSxNQURUO0FBRUNDLFlBQUFBLE1BQU0sRUFBRUEsTUFGVDtBQUdDVyxZQUFBQSxJQUFJLEVBQUVGLElBQUksQ0FBQ0UsSUFIWjtBQUlDQyxZQUFBQSxJQUFJLEVBQUUsS0FBS2xDO0FBSlosV0FBRCxDQUFkO0FBS0QsU0FWRDtBQVdELE9BWkQ7QUFhRCxLQWhDTSxDQUFQO0FBaUNEOztBQUVEbUMsRUFBQUEsT0FBTyxHQUFHO0FBQ1IsVUFBTUMsS0FBSyxHQUFHLENBQ1osS0FBS2pDLFlBQUwsQ0FBa0IsUUFBbEIsQ0FEWSxFQUVaLEtBQUtBLFlBQUwsQ0FBa0IsT0FBbEIsQ0FGWSxFQUdaLEtBQUtBLFlBQUwsQ0FBa0IsU0FBbEIsQ0FIWSxFQUlaLEtBQUtBLFlBQUwsQ0FBa0IsUUFBbEIsQ0FKWSxFQUtaLEtBQUtBLFlBQUwsQ0FBa0IsS0FBbEIsRUFBeUIsS0FBekIsQ0FMWSxFQU1aLEtBQUtBLFlBQUwsQ0FBa0IsUUFBbEIsRUFBNEIsS0FBNUIsQ0FOWSxDQUFkO0FBU0EsV0FBTyxJQUFJYSxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDbUIscUJBQU1DLElBQU4sQ0FBV0YsS0FBWCxFQUFrQkcsZUFBbEIsRUFBMkJQLEdBQUQsSUFBUztBQUNqQyxZQUFJQSxHQUFKLEVBQVM7QUFDUCxpQkFBT2QsTUFBTSxDQUFDYyxHQUFELENBQWI7QUFDRCxTQUZELE1BRU87QUFDTCxpQkFBT2YsT0FBTyxFQUFkO0FBQ0Q7QUFDRixPQU5EO0FBT0QsS0FSTSxDQUFQO0FBU0Q7O0FBdEo0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1dWlkIGZyb20gJ3V1aWQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBzcGF3biB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IGFzeW5jIGZyb20gJ2FzeW5jJztcbmltcG9ydCByaW1yYWYgZnJvbSAncmltcmFmJztcblxuY29uc3QgREVGQVVMVF9NQVJHSU4gPSAnMC43NWluJztcbmNvbnN0IERFRkFVTFRfUEFHRV9TSVpFID0gJ0xldHRlcic7XG5jb25zdCBERUZBVUxUX0lNQUdFX1FVQUxJVFkgPSAnODUnO1xuY29uc3QgREVGQVVMVF9PUklFTlRBVElPTiA9ICdQb3J0cmFpdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEh0bWxUb1BkZiB7XG4gIGNvbnN0cnVjdG9yKGh0bWwsIHtoZWFkZXIsIGZvb3RlciwgY292ZXIsIG1hcmdpblRvcCwgbWFyZ2luQm90dG9tLCBtYXJnaW5MZWZ0LCBtYXJnaW5SaWdodCwgcGFnZVNpemUsIGltYWdlUXVhbGl0eSwgb3JpZW50YXRpb24sIHdraHRtbHRvcGRmfSkge1xuICAgIHRoaXMudGVtcElEID0gdXVpZC52NCgpO1xuICAgIHRoaXMuZGVidWcgPSBmYWxzZTtcbiAgICB0aGlzLmh0bWwgPSBodG1sO1xuICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyO1xuICAgIHRoaXMuZm9vdGVyID0gZm9vdGVyO1xuICAgIHRoaXMuY292ZXIgPSBjb3ZlcjtcbiAgICB0aGlzLndraHRtbHRvcGRmID0gd2todG1sdG9wZGY7XG4gICAgdGhpcy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3AgfHwgREVGQVVMVF9NQVJHSU47XG4gICAgdGhpcy5tYXJnaW5Cb3R0b20gPSBtYXJnaW5Cb3R0b20gfHwgREVGQVVMVF9NQVJHSU47XG4gICAgdGhpcy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdCB8fCBERUZBVUxUX01BUkdJTjtcbiAgICB0aGlzLm1hcmdpblJpZ2h0ID0gbWFyZ2luUmlnaHQgfHwgREVGQVVMVF9NQVJHSU47XG4gICAgdGhpcy5wYWdlU2l6ZSA9IHBhZ2VTaXplIHx8IERFRkFVTFRfUEFHRV9TSVpFO1xuICAgIHRoaXMuaW1hZ2VRdWFsaXR5ID0gaW1hZ2VRdWFsaXR5IHx8IERFRkFVTFRfSU1BR0VfUVVBTElUWTtcbiAgICB0aGlzLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb24gfHwgREVGQVVMVF9PUklFTlRBVElPTjtcbiAgfVxuXG4gIGdldCBiaW5hcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMud2todG1sdG9wZGYgfHwgJy91c3IvbG9jYWwvYmluL3draHRtbHRvcGRmJztcbiAgfVxuXG4gIGdldCBjb21tYW5kKCkge1xuICAgIGNvbnN0IHBhcnRzID0gW1xuICAgICAgJy0tcGFnZS1zaXplJywgdGhpcy5wYWdlU2l6ZSxcbiAgICAgICctLW1hcmdpbi10b3AnLCB0aGlzLm1hcmdpblRvcCxcbiAgICAgICctLW1hcmdpbi1sZWZ0JywgdGhpcy5tYXJnaW5MZWZ0LFxuICAgICAgJy0tbWFyZ2luLWJvdHRvbScsIHRoaXMubWFyZ2luQm90dG9tLFxuICAgICAgJy0tbWFyZ2luLXJpZ2h0JywgdGhpcy5tYXJnaW5SaWdodCxcbiAgICAgICctLWltYWdlLXF1YWxpdHknLCB0aGlzLmltYWdlUXVhbGl0eSxcbiAgICAgICctLW9yaWVudGF0aW9uJywgdGhpcy5vcmllbnRhdGlvbixcbiAgICAgICctLWVuY29kaW5nJywgJ1VURi04JyxcbiAgICAgIHRoaXMucXVpZXRBcmd1bWVudCxcbiAgICAgIC4uLnRoaXMuY292ZXJBcmd1bWVudCxcbiAgICAgIC4uLnRoaXMuaGVhZGVyQXJndW1lbnQsXG4gICAgICAuLi50aGlzLmZvb3RlckFyZ3VtZW50LFxuICAgICAgdGhpcy5pbnB1dEFyZ3VtZW50LFxuICAgICAgdGhpcy5vdXRwdXRBcmd1bWVudCBdO1xuXG4gICAgcmV0dXJuIF8uY29tcGFjdChwYXJ0cyk7XG4gIH1cblxuICB0ZW1wRmlsZVBhdGgocGFydCwgZXh0ID0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIHBhdGguam9pbihvcy50bXBkaXIoKSwgYCR7dGhpcy50ZW1wSUR9XyR7cGFydH0uJHtleHR9YCk7XG4gIH1cblxuICBnZXQgcXVpZXRBcmd1bWVudCgpIHtcbiAgICByZXR1cm4gJy0tcXVpZXQnO1xuICAgIC8vIHJldHVybiB0aGlzLmRlYnVnID8gbnVsbCA6ICctLXF1aWV0JztcbiAgfVxuXG4gIGdldCBpbnB1dEFyZ3VtZW50KCkge1xuICAgIHJldHVybiAnLSc7XG4gIH1cblxuICBnZXQgb3V0cHV0QXJndW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVtcEZpbGVQYXRoKHRoaXMudGVtcElEICsgJ19vdXRwdXQnLCAncGRmJyk7XG4gIH1cblxuICBnZXQgY292ZXJBcmd1bWVudCgpIHtcbiAgICBpZiAodGhpcy5jb3Zlcikge1xuICAgICAgY29uc3QgY292ZXJQYXRoID0gdGhpcy50ZW1wRmlsZVBhdGgoJ2NvdmVyJyk7XG5cbiAgICAgIGZzLndyaXRlRmlsZVN5bmMoY292ZXJQYXRoLCB0aGlzLmNvdmVyKTtcblxuICAgICAgcmV0dXJuIFsgJ2NvdmVyJywgY292ZXJQYXRoIF07XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgZ2V0IGhlYWRlckFyZ3VtZW50KCkge1xuICAgIGlmICh0aGlzLmhlYWRlcikge1xuICAgICAgY29uc3QgaGVhZGVyUGF0aCA9IHRoaXMudGVtcEZpbGVQYXRoKCdoZWFkZXInKTtcblxuICAgICAgZnMud3JpdGVGaWxlU3luYyhoZWFkZXJQYXRoLCB0aGlzLmhlYWRlcik7XG5cbiAgICAgIHJldHVybiBbICctLWhlYWRlci1odG1sJywgaGVhZGVyUGF0aCBdO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGdldCBmb290ZXJBcmd1bWVudCgpIHtcbiAgICBpZiAodGhpcy5mb290ZXIpIHtcbiAgICAgIGNvbnN0IGZvb3RlclBhdGggPSB0aGlzLnRlbXBGaWxlUGF0aCgnZm9vdGVyJyk7XG5cbiAgICAgIGZzLndyaXRlRmlsZVN5bmMoZm9vdGVyUGF0aCwgdGhpcy5mb290ZXIpO1xuXG4gICAgICByZXR1cm4gWyAnLS1mb290ZXItaHRtbCcsIGZvb3RlclBhdGggXTtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBydW4oKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGNtZCA9IHRoaXMuY29tbWFuZDtcblxuICAgICAgY29uc3QgcHJvY2VzcyA9IHNwYXduKHRoaXMuYmluYXJ5LCBjbWQsIHt9KTtcblxuICAgICAgY29uc3Qgc3Rkb3V0ID0gW107XG4gICAgICBjb25zdCBzdGRlcnIgPSBbXTtcblxuICAgICAgcHJvY2Vzcy5zdGRpbi5zZXRFbmNvZGluZygndXRmOCcpO1xuICAgICAgcHJvY2Vzcy5zdGRpbi5lbmQodGhpcy5odG1sKTtcblxuICAgICAgcHJvY2Vzcy5zdGRvdXQub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgICBzdGRvdXQucHVzaChkYXRhLnRvU3RyaW5nKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIHByb2Nlc3Muc3RkZXJyLm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgc3RkZXJyLnB1c2goZGF0YS50b1N0cmluZygpKTtcbiAgICAgIH0pO1xuXG4gICAgICBwcm9jZXNzLm9uKCdjbG9zZScsIChjb2RlKSA9PiB7XG4gICAgICAgIGZzLnN0YXQodGhpcy5vdXRwdXRBcmd1bWVudCwgKGVyciwgc3RhdCkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7Y29kZTogY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0OiBzdGRvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZGVycjogc3RkZXJyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBzdGF0LnNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IHRoaXMub3V0cHV0QXJndW1lbnR9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFudXAoKSB7XG4gICAgY29uc3QgZmlsZXMgPSBbXG4gICAgICB0aGlzLnRlbXBGaWxlUGF0aCgnaGVhZGVyJyksXG4gICAgICB0aGlzLnRlbXBGaWxlUGF0aCgnY292ZXInKSxcbiAgICAgIHRoaXMudGVtcEZpbGVQYXRoKCdjb250ZW50JyksXG4gICAgICB0aGlzLnRlbXBGaWxlUGF0aCgnZm9vdGVyJyksXG4gICAgICB0aGlzLnRlbXBGaWxlUGF0aCgndG9jJywgJ3htbCcpLFxuICAgICAgdGhpcy50ZW1wRmlsZVBhdGgoJ291dHB1dCcsICdwZGYnKVxuICAgIF07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgYXN5bmMuZWFjaChmaWxlcywgcmltcmFmLCAoZXJyKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==