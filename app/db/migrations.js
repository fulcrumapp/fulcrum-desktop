"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _migration = _interopRequireDefault(require("./migration"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CURRENT_VERSION = 3;

class Migrations {
  static get currentVersion() {
    return CURRENT_VERSION;
  }

  constructor(db) {
    this.db = db;
  }

  async executeMigrations() {
    const methods = [];
    const versions = [];
    let upgrade = true;

    if (this.version !== CURRENT_VERSION) {
      if (this.version > CURRENT_VERSION) {
        for (let i = this.version; i > CURRENT_VERSION + 1; --i) {
          versions.push(i);
        }

        upgrade = false;
      } else {
        for (let i = this.version + 1; i < CURRENT_VERSION + 1; ++i) {
          versions.push(i);
        }
      }
    }

    if (versions.length > 0) {
      for (let version of versions) {
        await this.runMigration(version, upgrade);
      }
    }

    return methods;
  }

  async runMigration(version, upgrade) {
    let versionName = '000' + version.toString();
    versionName = versionName.slice(-3);
    const newVersion = upgrade ? version : version - 1;
    await this.db.execute('BEGIN TRANSACTION');
    const migration = new _migration.default(this.db, versionName);

    if (upgrade) {
      this.log('\nUpgrading database to version ' + version + '\n');
      await migration.up();
      this.log('\nUpgraded database to version ' + version + '\n');
    } else {
      this.log('\nDowngrading database to version ' + newVersion + '\n');
      await migration.down();
      this.log('\nDowngraded database to version ' + newVersion);
    }

    await this.updateDatabaseVersion(newVersion);
    await this.db.execute('COMMIT TRANSACTION');
  }

  async updateDatabaseVersion(version) {
    await this.db.execute("UPDATE metadata SET value = '" + version + "' WHERE key = 'database_version'", null);
  }

  log(message) {
    if (process.env.FULCRUM_DEBUG) {
      fulcrum.logger.log(message);
    }
  }

  async migrate() {
    await this.createMetadataTable();
    await this.getDatabaseVersion();
    await this.executeMigrations();
  }

  async getDatabaseVersion() {
    const result = await this.db.get("SELECT key, value FROM metadata WHERE key = 'database_version'");
    this.version = result ? +result.value : 0;
  }

  async createMetadataTable() {
    await this.db.execute('CREATE TABLE IF NOT EXISTS metadata (key TEXT, value TEXT)', null);
    await this.db.execute("INSERT INTO metadata (key, value) SELECT 'database_version', 0 WHERE NOT EXISTS (SELECT 1 FROM metadata WHERE key = 'database_version')", null);
  }

}

exports.default = Migrations;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYi9taWdyYXRpb25zLmpzIl0sIm5hbWVzIjpbIkNVUlJFTlRfVkVSU0lPTiIsIk1pZ3JhdGlvbnMiLCJjdXJyZW50VmVyc2lvbiIsImNvbnN0cnVjdG9yIiwiZGIiLCJleGVjdXRlTWlncmF0aW9ucyIsIm1ldGhvZHMiLCJ2ZXJzaW9ucyIsInVwZ3JhZGUiLCJ2ZXJzaW9uIiwiaSIsInB1c2giLCJsZW5ndGgiLCJydW5NaWdyYXRpb24iLCJ2ZXJzaW9uTmFtZSIsInRvU3RyaW5nIiwic2xpY2UiLCJuZXdWZXJzaW9uIiwiZXhlY3V0ZSIsIm1pZ3JhdGlvbiIsIk1pZ3JhdGlvbiIsImxvZyIsInVwIiwiZG93biIsInVwZGF0ZURhdGFiYXNlVmVyc2lvbiIsIm1lc3NhZ2UiLCJwcm9jZXNzIiwiZW52IiwiRlVMQ1JVTV9ERUJVRyIsImZ1bGNydW0iLCJsb2dnZXIiLCJtaWdyYXRlIiwiY3JlYXRlTWV0YWRhdGFUYWJsZSIsImdldERhdGFiYXNlVmVyc2lvbiIsInJlc3VsdCIsImdldCIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFFQSxNQUFNQSxlQUFlLEdBQUcsQ0FBeEI7O0FBRWUsTUFBTUMsVUFBTixDQUFpQjtBQUNMLGFBQWRDLGNBQWMsR0FBRztBQUMxQixXQUFPRixlQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLFdBQVcsQ0FBQ0MsRUFBRCxFQUFLO0FBQ2QsU0FBS0EsRUFBTCxHQUFVQSxFQUFWO0FBQ0Q7O0FBRXNCLFFBQWpCQyxpQkFBaUIsR0FBRztBQUN4QixVQUFNQyxPQUFPLEdBQUcsRUFBaEI7QUFDQSxVQUFNQyxRQUFRLEdBQUcsRUFBakI7QUFFQSxRQUFJQyxPQUFPLEdBQUcsSUFBZDs7QUFFQSxRQUFJLEtBQUtDLE9BQUwsS0FBaUJULGVBQXJCLEVBQXNDO0FBQ3BDLFVBQUksS0FBS1MsT0FBTCxHQUFlVCxlQUFuQixFQUFvQztBQUNsQyxhQUFLLElBQUlVLENBQUMsR0FBRyxLQUFLRCxPQUFsQixF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Z0IsNERBQWhCLEVBQThFLElBQTlFLENBQU47QUFDQSxVQUFNLEtBQUtkLEVBQUwsQ0FBUWMsT0FBUixDQUFnQix5SUFBaEIsRUFBMkosSUFBM0osQ0FBTjtBQUNEOztBQXZGNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWlncmF0aW9uIGZyb20gJy4vbWlncmF0aW9uJztcblxuY29uc3QgQ1VSUkVOVF9WRVJTSU9OID0gMztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWlncmF0aW9ucyB7XG4gIHN0YXRpYyBnZXQgY3VycmVudFZlcnNpb24oKSB7XG4gICAgcmV0dXJuIENVUlJFTlRfVkVSU0lPTjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgdGhpcy5kYiA9IGRiO1xuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZU1pZ3JhdGlvbnMoKSB7XG4gICAgY29uc3QgbWV0aG9kcyA9IFtdO1xuICAgIGNvbnN0IHZlcnNpb25zID0gW107XG5cbiAgICBsZXQgdXBncmFkZSA9IHRydWU7XG5cbiAgICBpZiAodGhpcy52ZXJzaW9uICE9PSBDVVJSRU5UX1ZFUlNJT04pIHtcbiAgICAgIGlmICh0aGlzLnZlcnNpb24gPiBDVVJSRU5UX1ZFUlNJT04pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMudmVyc2lvbjsgaSA+IENVUlJFTlRfVkVSU0lPTiArIDE7IC0taSkge1xuICAgICAgICAgIHZlcnNpb25zLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgdXBncmFkZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMudmVyc2lvbiArIDE7IGkgPCBDVVJSRU5UX1ZFUlNJT04gKyAxOyArK2kpIHtcbiAgICAgICAgICB2ZXJzaW9ucy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IHZlcnNpb24gb2YgdmVyc2lvbnMpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5ydW5NaWdyYXRpb24odmVyc2lvbiwgdXBncmFkZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1ldGhvZHM7XG4gIH1cblxuICBhc3luYyBydW5NaWdyYXRpb24odmVyc2lvbiwgdXBncmFkZSkge1xuICAgIGxldCB2ZXJzaW9uTmFtZSA9ICcwMDAnICsgdmVyc2lvbi50b1N0cmluZygpO1xuXG4gICAgdmVyc2lvbk5hbWUgPSB2ZXJzaW9uTmFtZS5zbGljZSgtMyk7XG5cbiAgICBjb25zdCBuZXdWZXJzaW9uID0gdXBncmFkZSA/IHZlcnNpb24gOiB2ZXJzaW9uIC0gMTtcblxuICAgIGF3YWl0IHRoaXMuZGIuZXhlY3V0ZSgnQkVHSU4gVFJBTlNBQ1RJT04nKTtcblxuICAgIGNvbnN0IG1pZ3JhdGlvbiA9IG5ldyBNaWdyYXRpb24odGhpcy5kYiwgdmVyc2lvbk5hbWUpO1xuXG4gICAgaWYgKHVwZ3JhZGUpIHtcbiAgICAgIHRoaXMubG9nKCdcXG5VcGdyYWRpbmcgZGF0YWJhc2UgdG8gdmVyc2lvbiAnICsgdmVyc2lvbiArICdcXG4nKTtcbiAgICAgIGF3YWl0IG1pZ3JhdGlvbi51cCgpO1xuICAgICAgdGhpcy5sb2coJ1xcblVwZ3JhZGVkIGRhdGFiYXNlIHRvIHZlcnNpb24gJyArIHZlcnNpb24gKyAnXFxuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nKCdcXG5Eb3duZ3JhZGluZyBkYXRhYmFzZSB0byB2ZXJzaW9uICcgKyBuZXdWZXJzaW9uICsgJ1xcbicpO1xuICAgICAgYXdhaXQgbWlncmF0aW9uLmRvd24oKTtcbiAgICAgIHRoaXMubG9nKCdcXG5Eb3duZ3JhZGVkIGRhdGFiYXNlIHRvIHZlcnNpb24gJyArIG5ld1ZlcnNpb24pO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMudXBkYXRlRGF0YWJhc2VWZXJzaW9uKG5ld1ZlcnNpb24pO1xuXG4gICAgYXdhaXQgdGhpcy5kYi5leGVjdXRlKCdDT01NSVQgVFJBTlNBQ1RJT04nKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZURhdGFiYXNlVmVyc2lvbih2ZXJzaW9uKSB7XG4gICAgYXdhaXQgdGhpcy5kYi5leGVjdXRlKFwiVVBEQVRFIG1ldGFkYXRhIFNFVCB2YWx1ZSA9ICdcIiArIHZlcnNpb24gKyBcIicgV0hFUkUga2V5ID0gJ2RhdGFiYXNlX3ZlcnNpb24nXCIsIG51bGwpO1xuICB9XG5cbiAgbG9nKG1lc3NhZ2UpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuRlVMQ1JVTV9ERUJVRykge1xuICAgICAgZnVsY3J1bS5sb2dnZXIubG9nKG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG1pZ3JhdGUoKSB7XG4gICAgYXdhaXQgdGhpcy5jcmVhdGVNZXRhZGF0YVRhYmxlKCk7XG4gICAgYXdhaXQgdGhpcy5nZXREYXRhYmFzZVZlcnNpb24oKTtcbiAgICBhd2FpdCB0aGlzLmV4ZWN1dGVNaWdyYXRpb25zKCk7XG4gIH1cblxuICBhc3luYyBnZXREYXRhYmFzZVZlcnNpb24oKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5kYi5nZXQoXCJTRUxFQ1Qga2V5LCB2YWx1ZSBGUk9NIG1ldGFkYXRhIFdIRVJFIGtleSA9ICdkYXRhYmFzZV92ZXJzaW9uJ1wiKTtcbiAgICB0aGlzLnZlcnNpb24gPSByZXN1bHQgPyArcmVzdWx0LnZhbHVlIDogMDtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZU1ldGFkYXRhVGFibGUoKSB7XG4gICAgYXdhaXQgdGhpcy5kYi5leGVjdXRlKCdDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBtZXRhZGF0YSAoa2V5IFRFWFQsIHZhbHVlIFRFWFQpJywgbnVsbCk7XG4gICAgYXdhaXQgdGhpcy5kYi5leGVjdXRlKFwiSU5TRVJUIElOVE8gbWV0YWRhdGEgKGtleSwgdmFsdWUpIFNFTEVDVCAnZGF0YWJhc2VfdmVyc2lvbicsIDAgV0hFUkUgTk9UIEVYSVNUUyAoU0VMRUNUIDEgRlJPTSBtZXRhZGF0YSBXSEVSRSBrZXkgPSAnZGF0YWJhc2VfdmVyc2lvbicpXCIsIG51bGwpO1xuICB9XG59XG4iXX0=