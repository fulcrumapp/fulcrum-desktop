"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _glob = _interopRequireDefault(require("glob"));

var _path = _interopRequireDefault(require("path"));

var _yargs = _interopRequireDefault(require("yargs"));

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _os = _interopRequireDefault(require("os"));

var _database = _interopRequireDefault(require("./db/database"));

var _api = _interopRequireDefault(require("./api"));

var _environment = _interopRequireDefault(require("./environment"));

var _account = _interopRequireDefault(require("./models/account"));

var _localDatabaseDataSource = _interopRequireDefault(require("./local-database-data-source"));

var _fulcrumCore = require("fulcrum-core");

var _applicationPaths = _interopRequireDefault(require("../application-paths"));

var _pluginLogger = _interopRequireDefault(require("./plugin-logger"));

var _logger = _interopRequireDefault(require("./logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let app = null;

class App {
  static get instance() {
    return app;
  }

  constructor() {
    this._plugins = [];
    this._pluginsByName = [];
    this._listeners = {};
    this._api = _api.default;
    const pathOverride = this.args.homePath;
    this._appPath = pathOverride || _applicationPaths.default.userData;
    this._homePath = pathOverride || _path.default.join(_os.default.homedir(), '.fulcrum');
    this._dataPath = this.args.dataPath || this.appPath('data');
    this._logPath = this.args.logPath || this.appPath('log');
    this._pluginPath = this.path('plugins');

    _mkdirp.default.sync(this._appPath);

    _mkdirp.default.sync(this._homePath);

    _mkdirp.default.sync(this._dataPath);

    _mkdirp.default.sync(this._logPath);

    _mkdirp.default.sync(this._pluginPath);

    this._logger = new _logger.default(this._logPath);
    this._environment = new _environment.default({
      app: this
    });
  }

  get pluginsByName() {
    return this._pluginsByName;
  }

  get environment() {
    return this._environment;
  }

  get api() {
    return this._api;
  }

  get yargs() {
    if (!this._yargs) {
      this._yargs = _yargs.default.env('FULCRUM');
    }

    return this._yargs;
  }

  get args() {
    return this.yargs.argv;
  }

  appPath(name) {
    return _path.default.join(this._appPath, name);
  }

  appDir(name) {
    return this.appPath(name);
  }

  path(name) {
    return _path.default.join(this._homePath, name);
  }

  dir(name) {
    return this.path(name);
  }

  mkdirp(name) {
    _mkdirp.default.sync(this.path(name));
  }

  get pluginPath() {
    return this._pluginPath;
  }

  get dataPath() {
    return this._dataPath;
  }

  get databaseFilePath() {
    return _path.default.join(this.dataPath, 'fulcrum.db');
  }

  get logPath() {
    return this._logPath;
  }

  get db() {
    return this._db;
  }

  on(name, func) {
    if (!this._listeners[name]) {
      this._listeners[name] = [];
    }

    this._listeners[name].push(func);
  }

  off(name, func) {
    if (this._listeners[name]) {
      const index = this._listeners.indexOf(func);

      if (index > -1) {
        this._listeners.splice(index, 1);
      }
    }
  }

  async emit(name, ...args) {
    if (this._listeners[name]) {
      for (const listener of this._listeners[name]) {
        await listener(...args);
      }
    }
  }

  async initialize() {
    this._db = await (0, _database.default)({
      file: this.databaseFilePath
    });

    if (!this.args.safe) {
      await this.initializePlugins();
    }
  }

  async dispose() {
    for (const plugin of this._plugins) {
      if (plugin.deactivate) {
        await plugin.deactivate();
      }
    }

    if (this._db) {
      await this._db.close();
    }
  }

  async initializePlugins() {
    const pluginPaths = _glob.default.sync(_path.default.join(this.pluginPath, '*'));

    for (const pluginPath of pluginPaths) {
      const fullPath = _path.default.resolve(pluginPath);

      const logger = (0, _pluginLogger.default)(pluginPath);

      try {
        const pluginModule = require(fullPath);

        const PluginClass = pluginModule.default || pluginModule;
        const plugin = new PluginClass();
        const nameParts = fullPath.split(_path.default.sep);
        const name = nameParts[nameParts.length - 1].replace(/^fulcrum-desktop-/, '');
        this._pluginsByName[name] = plugin;

        this._plugins.push(plugin);

        if (this.args.debug) {
          logger.error('Loading plugin', fullPath);
        }
      } catch (ex) {
        logger.error('Failed to load plugin', ex);
        logger.error('This is most likely an error in the plugin.');
      }
    }
  }

  async activatePlugins() {
    for (const plugin of this._plugins) {
      await plugin.activate();
    }
  }

  async fetchAccount(name) {
    const where = {};

    if (name) {
      where.organization_name = name;
    }

    const accounts = await _account.default.findAll(this.db, where, 'updated_at DESC');
    return accounts[0];
  }

  async createDataSource(account) {
    let dataSource = new _fulcrumCore.DataSource();
    const localDatabase = new _localDatabaseDataSource.default(account);
    dataSource.add(localDatabase);
    await localDatabase.load(this.db);
    return dataSource;
  }

}

app = new App();
_environment.default.app = app;
global.__app__ = app;
global.__api__ = _api.default;
global.fulcrum = app.environment;
var _default = app;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,