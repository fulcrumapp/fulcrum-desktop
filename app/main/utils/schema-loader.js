"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fulcrumQuerySql = require("fulcrum-query-sql");

var _pgFormat = _interopRequireDefault(require("pg-format"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SchemaLoader {
  static async loadFormSchema(form) {
    const cols = await this.loadColumns(form);
    return new _fulcrumQuerySql.FormSchema(form, cols.rawFormColumns, cols.rawRepeatableColumns, {
      fullSchema: true
    });
  }

  static async loadColumns(form) {
    const tableNames = [`form_${form.rowID}_view`];
    const repeatables = form.elementsOfType('Repeatable');

    for (const repeatable of repeatables) {
      tableNames.push(`form_${form.rowID}_${repeatable.key}_view`);
    }

    const sql = (0, _pgFormat.default)(`
SELECT
  tables.field AS table_field,
  columns.name,
  columns.ordinal,
  columns.field,
  columns.type,
  columns.part
FROM columns
INNER JOIN tables ON columns.table_name = tables.name
WHERE
  columns.table_name IN (%L)
ORDER BY columns.table_name, columns.ordinal
    `, tableNames);
    const rows = await form.db.all(sql);
    const rawFormColumns = [];
    const rawRepeatableColumns = {};

    for (const row of rows) {
      if (row.table_field) {
        if (!rawRepeatableColumns[row.table_field]) {
          rawRepeatableColumns[row.table_field] = [];
        }

        rawRepeatableColumns[row.table_field].push(row);
      } else {
        rawFormColumns.push(row);
      }
    }

    return {
      rawFormColumns,
      rawRepeatableColumns
    };
  }

}

exports.default = SchemaLoader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWluL3V0aWxzL3NjaGVtYS1sb2FkZXIuanMiXSwibmFtZXMiOlsiU2NoZW1hTG9hZGVyIiwibG9hZEZvcm1TY2hlbWEiLCJmb3JtIiwiY29scyIsImxvYWRDb2x1bW5zIiwiRm9ybVNjaGVtYSIsInJhd0Zvcm1Db2x1bW5zIiwicmF3UmVwZWF0YWJsZUNvbHVtbnMiLCJmdWxsU2NoZW1hIiwidGFibGVOYW1lcyIsInJvd0lEIiwicmVwZWF0YWJsZXMiLCJlbGVtZW50c09mVHlwZSIsInJlcGVhdGFibGUiLCJwdXNoIiwia2V5Iiwic3FsIiwicm93cyIsImRiIiwiYWxsIiwicm93IiwidGFibGVfZmllbGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVlLE1BQU1BLFlBQU4sQ0FBbUI7QUFDTCxlQUFkQyxjQUFjLENBQUNDLElBQUQsRUFBTztBQUNoQyxVQUFNQyxJQUFJLEdBQUcsTUFBTSxLQUFLQyxXQUFMLENBQWlCRixJQUFqQixDQUFuQjtBQUVBLFdBQU8sSUFBSUcsMkJBQUosQ0FBZUgsSUFBZixFQUFxQkMsSUFBSSxDQUFDRyxjQUExQixFQUEwQ0gsSUFBSSxDQUFDSSxvQkFBL0MsRUFBcUU7QUFBQ0MsTUFBQUEsVUFBVSxFQUFFO0FBQWIsS0FBckUsQ0FBUDtBQUNEOztBQUV1QixlQUFYSixXQUFXLENBQUNGLElBQUQsRUFBTztBQUM3QixVQUFNTyxVQUFVLEdBQUcsQ0FDaEIsUUFBT1AsSUFBSSxDQUFDUSxLQUFNLE9BREYsQ0FBbkI7QUFJQSxVQUFNQyxXQUFXLEdBQUdULElBQUksQ0FBQ1UsY0FBTCxDQUFvQixZQUFwQixDQUFwQjs7QUFFQSxTQUFLLE1BQU1DLFVBQVgsSUFBeUJGLFdBQXpCLEVBQXNDO0FBQ3BDRixNQUFBQSxVQUFVLENBQUNLLElBQVgsQ0FBaUIsUUFBT1osSUFBSSxDQUFDUSxLQUFNLElBQUdHLFVBQVUsQ0FBQ0UsR0FBSSxPQUFyRDtBQUNEOztBQUVELFVBQU1DLEdBQUcsR0FBRyx1QkFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQWJnQixFQWFUUCxVQWJTLENBQVo7QUFlQSxVQUFNUSxJQUFJLEdBQUcsTUFBTWYsSUFBSSxDQUFDZ0IsRUFBTCxDQUFRQyxHQUFSLENBQVlILEdBQVosQ0FBbkI7QUFFQSxVQUFNVixjQUFjLEdBQUcsRUFBdkI7QUFDQSxVQUFNQyxvQkFBb0IsR0FBRyxFQUE3Qjs7QUFFQSxTQUFLLE1BQU1hLEdBQVgsSUFBa0JILElBQWxCLEVBQXdCO0FBQ3RCLFVBQUlHLEdBQUcsQ0FBQ0MsV0FBUixFQUFxQjtBQUNuQixZQUFJLENBQUNkLG9CQUFvQixDQUFDYSxHQUFHLENBQUNDLFdBQUwsQ0FBekIsRUFBNEM7QUFDMUNkLFVBQUFBLG9CQUFvQixDQUFDYSxHQUFHLENBQUNDLFdBQUwsQ0FBcEIsR0FBd0MsRUFBeEM7QUFDRDs7QUFFRGQsUUFBQUEsb0JBQW9CLENBQUNhLEdBQUcsQ0FBQ0MsV0FBTCxDQUFwQixDQUFzQ1AsSUFBdEMsQ0FBMkNNLEdBQTNDO0FBQ0QsT0FORCxNQU1PO0FBQ0xkLFFBQUFBLGNBQWMsQ0FBQ1EsSUFBZixDQUFvQk0sR0FBcEI7QUFDRDtBQUNGOztBQUVELFdBQU87QUFBQ2QsTUFBQUEsY0FBRDtBQUFpQkMsTUFBQUE7QUFBakIsS0FBUDtBQUNEOztBQW5EK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtU2NoZW1hIH0gZnJvbSAnZnVsY3J1bS1xdWVyeS1zcWwnO1xuaW1wb3J0IHBnZm9ybWF0IGZyb20gJ3BnLWZvcm1hdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjaGVtYUxvYWRlciB7XG4gIHN0YXRpYyBhc3luYyBsb2FkRm9ybVNjaGVtYShmb3JtKSB7XG4gICAgY29uc3QgY29scyA9IGF3YWl0IHRoaXMubG9hZENvbHVtbnMoZm9ybSk7XG5cbiAgICByZXR1cm4gbmV3IEZvcm1TY2hlbWEoZm9ybSwgY29scy5yYXdGb3JtQ29sdW1ucywgY29scy5yYXdSZXBlYXRhYmxlQ29sdW1ucywge2Z1bGxTY2hlbWE6IHRydWV9KTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBsb2FkQ29sdW1ucyhmb3JtKSB7XG4gICAgY29uc3QgdGFibGVOYW1lcyA9IFtcbiAgICAgIGBmb3JtXyR7Zm9ybS5yb3dJRH1fdmlld2BcbiAgICBdO1xuXG4gICAgY29uc3QgcmVwZWF0YWJsZXMgPSBmb3JtLmVsZW1lbnRzT2ZUeXBlKCdSZXBlYXRhYmxlJyk7XG5cbiAgICBmb3IgKGNvbnN0IHJlcGVhdGFibGUgb2YgcmVwZWF0YWJsZXMpIHtcbiAgICAgIHRhYmxlTmFtZXMucHVzaChgZm9ybV8ke2Zvcm0ucm93SUR9XyR7cmVwZWF0YWJsZS5rZXl9X3ZpZXdgKTtcbiAgICB9XG5cbiAgICBjb25zdCBzcWwgPSBwZ2Zvcm1hdChgXG5TRUxFQ1RcbiAgdGFibGVzLmZpZWxkIEFTIHRhYmxlX2ZpZWxkLFxuICBjb2x1bW5zLm5hbWUsXG4gIGNvbHVtbnMub3JkaW5hbCxcbiAgY29sdW1ucy5maWVsZCxcbiAgY29sdW1ucy50eXBlLFxuICBjb2x1bW5zLnBhcnRcbkZST00gY29sdW1uc1xuSU5ORVIgSk9JTiB0YWJsZXMgT04gY29sdW1ucy50YWJsZV9uYW1lID0gdGFibGVzLm5hbWVcbldIRVJFXG4gIGNvbHVtbnMudGFibGVfbmFtZSBJTiAoJUwpXG5PUkRFUiBCWSBjb2x1bW5zLnRhYmxlX25hbWUsIGNvbHVtbnMub3JkaW5hbFxuICAgIGAsIHRhYmxlTmFtZXMpO1xuXG4gICAgY29uc3Qgcm93cyA9IGF3YWl0IGZvcm0uZGIuYWxsKHNxbCk7XG5cbiAgICBjb25zdCByYXdGb3JtQ29sdW1ucyA9IFtdO1xuICAgIGNvbnN0IHJhd1JlcGVhdGFibGVDb2x1bW5zID0ge307XG5cbiAgICBmb3IgKGNvbnN0IHJvdyBvZiByb3dzKSB7XG4gICAgICBpZiAocm93LnRhYmxlX2ZpZWxkKSB7XG4gICAgICAgIGlmICghcmF3UmVwZWF0YWJsZUNvbHVtbnNbcm93LnRhYmxlX2ZpZWxkXSkge1xuICAgICAgICAgIHJhd1JlcGVhdGFibGVDb2x1bW5zW3Jvdy50YWJsZV9maWVsZF0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJhd1JlcGVhdGFibGVDb2x1bW5zW3Jvdy50YWJsZV9maWVsZF0ucHVzaChyb3cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmF3Rm9ybUNvbHVtbnMucHVzaChyb3cpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7cmF3Rm9ybUNvbHVtbnMsIHJhd1JlcGVhdGFibGVDb2x1bW5zfTtcbiAgfVxufVxuIl19