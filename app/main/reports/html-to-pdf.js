"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uuid = _interopRequireDefault(require("uuid"));

var _lodash = _interopRequireDefault(require("lodash"));

var _fs = _interopRequireDefault(require("fs"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _child_process = require("child_process");

var _async = _interopRequireDefault(require("async"));

var _rimraf = _interopRequireDefault(require("rimraf"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_MARGIN = '0.75in';
const DEFAULT_PAGE_SIZE = 'Letter';
const DEFAULT_IMAGE_QUALITY = '85';
const DEFAULT_ORIENTATION = 'Portrait';

class HtmlToPdf {
  constructor(html, {
    header,
    footer,
    cover,
    marginTop,
    marginBottom,
    marginLeft,
    marginRight,
    pageSize,
    imageQuality,
    orientation,
    wkhtmltopdf
  }) {
    this.tempID = _uuid.default.v4();
    this.debug = false;
    this.html = html;
    this.header = header;
    this.footer = footer;
    this.cover = cover;
    this.wkhtmltopdf = wkhtmltopdf;
    this.marginTop = marginTop || DEFAULT_MARGIN;
    this.marginBottom = marginBottom || DEFAULT_MARGIN;
    this.marginLeft = marginLeft || DEFAULT_MARGIN;
    this.marginRight = marginRight || DEFAULT_MARGIN;
    this.pageSize = pageSize || DEFAULT_PAGE_SIZE;
    this.imageQuality = imageQuality || DEFAULT_IMAGE_QUALITY;
    this.orientation = orientation || DEFAULT_ORIENTATION;
  }

  get binary() {
    return this.wkhtmltopdf || '/usr/local/bin/wkhtmltopdf';
  }

  get command() {
    const parts = ['--page-size', this.pageSize, '--margin-top', this.marginTop, '--margin-left', this.marginLeft, '--margin-bottom', this.marginBottom, '--margin-right', this.marginRight, '--image-quality', this.imageQuality, '--orientation', this.orientation, '--encoding', 'UTF-8', this.quietArgument, ...this.coverArgument, ...this.headerArgument, ...this.footerArgument, this.inputArgument, this.outputArgument];
    return _lodash.default.compact(parts);
  }

  tempFilePath(part, ext = 'html') {
    return _path.default.join(_os.default.tmpdir(), `${this.tempID}_${part}.${ext}`);
  }

  get quietArgument() {
    return '--quiet'; // return this.debug ? null : '--quiet';
  }

  get inputArgument() {
    return '-';
  }

  get outputArgument() {
    return this.tempFilePath(this.tempID + '_output', 'pdf');
  }

  get coverArgument() {
    if (this.cover) {
      const coverPath = this.tempFilePath('cover');

      _fs.default.writeFileSync(coverPath, this.cover);

      return ['cover', coverPath];
    }

    return [];
  }

  get headerArgument() {
    if (this.header) {
      const headerPath = this.tempFilePath('header');

      _fs.default.writeFileSync(headerPath, this.header);

      return ['--header-html', headerPath];
    }

    return [];
  }

  get footerArgument() {
    if (this.footer) {
      const footerPath = this.tempFilePath('footer');

      _fs.default.writeFileSync(footerPath, this.footer);

      return ['--footer-html', footerPath];
    }

    return [];
  }

  run() {
    return new Promise((resolve, reject) => {
      const cmd = this.command;
      const process = (0, _child_process.spawn)(this.binary, cmd, {});
      const stdout = [];
      const stderr = [];
      process.stdin.setEncoding('utf8');
      process.stdin.end(this.html);
      process.stdout.on('data', data => {
        stdout.push(data.toString());
      });
      process.stderr.on('data', data => {
        stderr.push(data.toString());
      });
      process.on('close', code => {
        _fs.default.stat(this.outputArgument, (err, stat) => {
          if (err) {
            return reject(err);
          }

          return resolve({
            code: code,
            stdout: stdout,
            stderr: stderr,
            size: stat.size,
            file: this.outputArgument
          });
        });
      });
    });
  }

  cleanup() {
    const files = [this.tempFilePath('header'), this.tempFilePath('cover'), this.tempFilePath('content'), this.tempFilePath('footer'), this.tempFilePath('toc', 'xml'), this.tempFilePath('output', 'pdf')];
    return new Promise((resolve, reject) => {
      _async.default.each(files, _rimraf.default, err => {
        if (err) {
          return reject(err);
        } else {
          return resolve();
        }
      });
    });
  }

}

exports.default = HtmlToPdf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,