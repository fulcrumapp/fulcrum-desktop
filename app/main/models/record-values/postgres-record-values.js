"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _recordValues = _interopRequireDefault(require("./record-values"));

var _pgFormat = _interopRequireDefault(require("pg-format"));

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class PostgresRecordValues extends _recordValues.default {
  static setupSearch(values, feature, options) {
    const searchableValue = feature.searchableValue;

    if (options.disableComplexTypes) {
      values.record_index_text = searchableValue;
      const strings = (0, _lodash.compact)(feature.formValues.all.map(o => o.searchableValue && o.searchableValue.trim()));
      values.record_index = JSON.stringify(strings);
      return values;
    }

    values.record_index_text = searchableValue;
    values.record_index = {
      raw: `to_tsvector('simple', ${(0, _pgFormat.default)('%L', searchableValue)})`
    };
    return values;
  }

  static setupPoint(values, latitude, longitude, options) {
    if (options.disableComplexTypes) {
      return JSON.stringify({
        type: 'Point',
        coordinates: [longitude, latitude]
      });
    }

    const wkt = (0, _pgFormat.default)('POINT(%s %s)', longitude, latitude);
    return {
      raw: `ST_Force2D(ST_SetSRID(ST_GeomFromText('${wkt}'), 4326))`
    };
  }

}

exports.default = PostgresRecordValues;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tYWluL21vZGVscy9yZWNvcmQtdmFsdWVzL3Bvc3RncmVzLXJlY29yZC12YWx1ZXMuanMiXSwibmFtZXMiOlsiUG9zdGdyZXNSZWNvcmRWYWx1ZXMiLCJSZWNvcmRWYWx1ZXMiLCJzZXR1cFNlYXJjaCIsInZhbHVlcyIsImZlYXR1cmUiLCJvcHRpb25zIiwic2VhcmNoYWJsZVZhbHVlIiwiZGlzYWJsZUNvbXBsZXhUeXBlcyIsInJlY29yZF9pbmRleF90ZXh0Iiwic3RyaW5ncyIsImZvcm1WYWx1ZXMiLCJhbGwiLCJtYXAiLCJvIiwidHJpbSIsInJlY29yZF9pbmRleCIsIkpTT04iLCJzdHJpbmdpZnkiLCJyYXciLCJzZXR1cFBvaW50IiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJ0eXBlIiwiY29vcmRpbmF0ZXMiLCJ3a3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUVlLE1BQU1BLG9CQUFOLFNBQW1DQyxxQkFBbkMsQ0FBZ0Q7QUFDM0MsU0FBWEMsV0FBVyxDQUFDQyxNQUFELEVBQVNDLE9BQVQsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQzNDLFVBQU1DLGVBQWUsR0FBR0YsT0FBTyxDQUFDRSxlQUFoQzs7QUFFQSxRQUFJRCxPQUFPLENBQUNFLG1CQUFaLEVBQWlDO0FBQy9CSixNQUFBQSxNQUFNLENBQUNLLGlCQUFQLEdBQTJCRixlQUEzQjtBQUVBLFlBQU1HLE9BQU8sR0FBRyxxQkFBUUwsT0FBTyxDQUFDTSxVQUFSLENBQW1CQyxHQUFuQixDQUF1QkMsR0FBdkIsQ0FBMkJDLENBQUMsSUFBSUEsQ0FBQyxDQUFDUCxlQUFGLElBQXFCTyxDQUFDLENBQUNQLGVBQUYsQ0FBa0JRLElBQWxCLEVBQXJELENBQVIsQ0FBaEI7QUFFQVgsTUFBQUEsTUFBTSxDQUFDWSxZQUFQLEdBQXNCQyxJQUFJLENBQUNDLFNBQUwsQ0FBZVIsT0FBZixDQUF0QjtBQUVBLGFBQU9OLE1BQVA7QUFDRDs7QUFFREEsSUFBQUEsTUFBTSxDQUFDSyxpQkFBUCxHQUEyQkYsZUFBM0I7QUFDQUgsSUFBQUEsTUFBTSxDQUFDWSxZQUFQLEdBQXNCO0FBQUNHLE1BQUFBLEdBQUcsRUFBRyx5QkFBeUIsdUJBQVMsSUFBVCxFQUFlWixlQUFmLENBQWlDO0FBQWpFLEtBQXRCO0FBRUEsV0FBT0gsTUFBUDtBQUNEOztBQUVnQixTQUFWZ0IsVUFBVSxDQUFDaEIsTUFBRCxFQUFTaUIsUUFBVCxFQUFtQkMsU0FBbkIsRUFBOEJoQixPQUE5QixFQUF1QztBQUN0RCxRQUFJQSxPQUFPLENBQUNFLG1CQUFaLEVBQWlDO0FBQy9CLGFBQU9TLElBQUksQ0FBQ0MsU0FBTCxDQUFlO0FBQ3BCSyxRQUFBQSxJQUFJLEVBQUUsT0FEYztBQUVwQkMsUUFBQUEsV0FBVyxFQUFFLENBQUVGLFNBQUYsRUFBYUQsUUFBYjtBQUZPLE9BQWYsQ0FBUDtBQUlEOztBQUVELFVBQU1JLEdBQUcsR0FBRyx1QkFBUyxjQUFULEVBQXlCSCxTQUF6QixFQUFvQ0QsUUFBcEMsQ0FBWjtBQUVBLFdBQU87QUFBQ0YsTUFBQUEsR0FBRyxFQUFHLDBDQUEwQ00sR0FBSztBQUF0RCxLQUFQO0FBQ0Q7O0FBL0I0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWNvcmRWYWx1ZXMgZnJvbSAnLi9yZWNvcmQtdmFsdWVzJztcbmltcG9ydCBwZ2Zvcm1hdCBmcm9tICdwZy1mb3JtYXQnO1xuaW1wb3J0IHsgY29tcGFjdCB9IGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RncmVzUmVjb3JkVmFsdWVzIGV4dGVuZHMgUmVjb3JkVmFsdWVzIHtcbiAgc3RhdGljIHNldHVwU2VhcmNoKHZhbHVlcywgZmVhdHVyZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHNlYXJjaGFibGVWYWx1ZSA9IGZlYXR1cmUuc2VhcmNoYWJsZVZhbHVlO1xuXG4gICAgaWYgKG9wdGlvbnMuZGlzYWJsZUNvbXBsZXhUeXBlcykge1xuICAgICAgdmFsdWVzLnJlY29yZF9pbmRleF90ZXh0ID0gc2VhcmNoYWJsZVZhbHVlO1xuXG4gICAgICBjb25zdCBzdHJpbmdzID0gY29tcGFjdChmZWF0dXJlLmZvcm1WYWx1ZXMuYWxsLm1hcChvID0+IG8uc2VhcmNoYWJsZVZhbHVlICYmIG8uc2VhcmNoYWJsZVZhbHVlLnRyaW0oKSkpO1xuXG4gICAgICB2YWx1ZXMucmVjb3JkX2luZGV4ID0gSlNPTi5zdHJpbmdpZnkoc3RyaW5ncyk7XG5cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgdmFsdWVzLnJlY29yZF9pbmRleF90ZXh0ID0gc2VhcmNoYWJsZVZhbHVlO1xuICAgIHZhbHVlcy5yZWNvcmRfaW5kZXggPSB7cmF3OiBgdG9fdHN2ZWN0b3IoJ3NpbXBsZScsICR7IHBnZm9ybWF0KCclTCcsIHNlYXJjaGFibGVWYWx1ZSkgfSlgfTtcblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICBzdGF0aWMgc2V0dXBQb2ludCh2YWx1ZXMsIGxhdGl0dWRlLCBsb25naXR1ZGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5kaXNhYmxlQ29tcGxleFR5cGVzKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB0eXBlOiAnUG9pbnQnLFxuICAgICAgICBjb29yZGluYXRlczogWyBsb25naXR1ZGUsIGxhdGl0dWRlIF1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHdrdCA9IHBnZm9ybWF0KCdQT0lOVCglcyAlcyknLCBsb25naXR1ZGUsIGxhdGl0dWRlKTtcblxuICAgIHJldHVybiB7cmF3OiBgU1RfRm9yY2UyRChTVF9TZXRTUklEKFNUX0dlb21Gcm9tVGV4dCgnJHsgd2t0IH0nKSwgNDMyNikpYH07XG4gIH1cbn1cbiJdfQ==