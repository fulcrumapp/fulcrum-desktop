"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _minidb = require("minidb");

var _fulcrumCore = require("fulcrum-core");

class Changeset extends _fulcrumCore.Changeset {
  static get tableName() {
    return 'changesets';
  }

  static get columns() {
    return [{
      name: 'accountRowID',
      column: 'account_id',
      type: 'integer',
      null: false
    }, {
      name: 'id',
      column: 'resource_id',
      type: 'string',
      null: false
    }, {
      name: 'formRowID',
      column: 'form_id',
      type: 'integer'
    }, {
      name: 'formID',
      column: 'form_resource_id',
      type: 'string'
    }, {
      name: 'metadata',
      column: 'metadata',
      type: 'json'
    }, {
      name: 'metadataIndexText',
      column: 'metadata_index_text',
      type: 'string'
    }, {
      name: 'closedAt',
      column: 'closed_at',
      type: 'datetime'
    }, {
      name: 'closedByRowID',
      column: 'closed_by_id',
      type: 'integer'
    }, {
      name: 'closedByID',
      column: 'closed_by_resource_id',
      type: 'string'
    }, {
      name: 'createdByRowID',
      column: 'created_by_id',
      type: 'integer'
    }, {
      name: 'createdByID',
      column: 'created_by_resource_id',
      type: 'string'
    }, {
      name: 'updatedByRowID',
      column: 'updated_by_id',
      type: 'integer'
    }, {
      name: 'updatedByID',
      column: 'updated_by_resource_id',
      type: 'string'
    }, {
      name: 'numberOfChanges',
      column: 'number_of_changes',
      type: 'integer'
    }, {
      name: 'numberOfCreates',
      column: 'number_of_creates',
      type: 'integer'
    }, {
      name: 'numberOfUpdates',
      column: 'number_of_updates',
      type: 'integer'
    }, {
      name: 'numberOfDeletes',
      column: 'number_of_deletes',
      type: 'integer'
    }, {
      name: 'minLat',
      column: 'min_lat',
      type: 'double'
    }, {
      name: 'maxLat',
      column: 'max_lat',
      type: 'double'
    }, {
      name: 'minLon',
      column: 'min_lon',
      type: 'double'
    }, {
      name: 'maxLon',
      column: 'max_lon',
      type: 'double'
    }, {
      name: 'createdAt',
      column: 'server_created_at',
      type: 'datetime'
    }, {
      name: 'updatedAt',
      column: 'server_updated_at',
      type: 'datetime'
    }];
  }

  async beforeSave(options) {
    this._metadataIndexText = this.metadataIndexText;
  }

}

exports.default = Changeset;

_minidb.PersistentObject.register(Changeset);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWluL21vZGVscy9jaGFuZ2VzZXQuanMiXSwibmFtZXMiOlsiQ2hhbmdlc2V0IiwiQ2hhbmdlc2V0QmFzZSIsInRhYmxlTmFtZSIsImNvbHVtbnMiLCJuYW1lIiwiY29sdW1uIiwidHlwZSIsIm51bGwiLCJiZWZvcmVTYXZlIiwib3B0aW9ucyIsIl9tZXRhZGF0YUluZGV4VGV4dCIsIm1ldGFkYXRhSW5kZXhUZXh0IiwiUGVyc2lzdGVudE9iamVjdCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRWUsTUFBTUEsU0FBTixTQUF3QkMsc0JBQXhCLENBQXNDO0FBQy9CLGFBQVRDLFNBQVMsR0FBRztBQUNyQixXQUFPLFlBQVA7QUFDRDs7QUFFaUIsYUFBUEMsT0FBTyxHQUFHO0FBQ25CLFdBQU8sQ0FDTDtBQUFFQyxNQUFBQSxJQUFJLEVBQUUsY0FBUjtBQUF3QkMsTUFBQUEsTUFBTSxFQUFFLFlBQWhDO0FBQThDQyxNQUFBQSxJQUFJLEVBQUUsU0FBcEQ7QUFBK0RDLE1BQUFBLElBQUksRUFBRTtBQUFyRSxLQURLLEVBRUw7QUFBRUgsTUFBQUEsSUFBSSxFQUFFLElBQVI7QUFBY0MsTUFBQUEsTUFBTSxFQUFFLGFBQXRCO0FBQXFDQyxNQUFBQSxJQUFJLEVBQUUsUUFBM0M7QUFBcURDLE1BQUFBLElBQUksRUFBRTtBQUEzRCxLQUZLLEVBR0w7QUFBRUgsTUFBQUEsSUFBSSxFQUFFLFdBQVI7QUFBcUJDLE1BQUFBLE1BQU0sRUFBRSxTQUE3QjtBQUF3Q0MsTUFBQUEsSUFBSSxFQUFFO0FBQTlDLEtBSEssRUFJTDtBQUFFRixNQUFBQSxJQUFJLEVBQUUsUUFBUjtBQUFrQkMsTUFBQUEsTUFBTSxFQUFFLGtCQUExQjtBQUE4Q0MsTUFBQUEsSUFBSSxFQUFFO0FBQXBELEtBSkssRUFLTDtBQUFFRixNQUFBQSxJQUFJLEVBQUUsVUFBUjtBQUFvQkMsTUFBQUEsTUFBTSxFQUFFLFVBQTVCO0FBQXdDQyxN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Q0MsT0FBRCxFQUFVO0FBQ3hCLFNBQUtDLGtCQUFMLEdBQTBCLEtBQUtDLGlCQUEvQjtBQUNEOztBQW5Da0Q7Ozs7QUFzQ3JEQyx5QkFBaUJDLFFBQWpCLENBQTBCYixTQUExQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBlcnNpc3RlbnRPYmplY3QgfSBmcm9tICdtaW5pZGInO1xuaW1wb3J0IHsgQ2hhbmdlc2V0IGFzIENoYW5nZXNldEJhc2UgfSBmcm9tICdmdWxjcnVtLWNvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFuZ2VzZXQgZXh0ZW5kcyBDaGFuZ2VzZXRCYXNlIHtcbiAgc3RhdGljIGdldCB0YWJsZU5hbWUoKSB7XG4gICAgcmV0dXJuICdjaGFuZ2VzZXRzJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgY29sdW1ucygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgeyBuYW1lOiAnYWNjb3VudFJvd0lEJywgY29sdW1uOiAnYWNjb3VudF9pZCcsIHR5cGU6ICdpbnRlZ2VyJywgbnVsbDogZmFsc2UgfSxcbiAgICAgIHsgbmFtZTogJ2lkJywgY29sdW1uOiAncmVzb3VyY2VfaWQnLCB0eXBlOiAnc3RyaW5nJywgbnVsbDogZmFsc2UgfSxcbiAgICAgIHsgbmFtZTogJ2Zvcm1Sb3dJRCcsIGNvbHVtbjogJ2Zvcm1faWQnLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ2Zvcm1JRCcsIGNvbHVtbjogJ2Zvcm1fcmVzb3VyY2VfaWQnLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgeyBuYW1lOiAnbWV0YWRhdGEnLCBjb2x1bW46ICdtZXRhZGF0YScsIHR5cGU6ICdqc29uJyB9LFxuICAgICAgeyBuYW1lOiAnbWV0YWRhdGFJbmRleFRleHQnLCBjb2x1bW46ICdtZXRhZGF0YV9pbmRleF90ZXh0JywgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgIHsgbmFtZTogJ2Nsb3NlZEF0JywgY29sdW1uOiAnY2xvc2VkX2F0JywgdHlwZTogJ2RhdGV0aW1lJyB9LFxuICAgICAgeyBuYW1lOiAnY2xvc2VkQnlSb3dJRCcsIGNvbHVtbjogJ2Nsb3NlZF9ieV9pZCcsIHR5cGU6ICdpbnRlZ2VyJyB9LFxuICAgICAgeyBuYW1lOiAnY2xvc2VkQnlJRCcsIGNvbHVtbjogJ2Nsb3NlZF9ieV9yZXNvdXJjZV9pZCcsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICB7IG5hbWU6ICdjcmVhdGVkQnlSb3dJRCcsIGNvbHVtbjogJ2NyZWF0ZWRfYnlfaWQnLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ2NyZWF0ZWRCeUlEJywgY29sdW1uOiAnY3JlYXRlZF9ieV9yZXNvdXJjZV9pZCcsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICB7IG5hbWU6ICd1cGRhdGVkQnlSb3dJRCcsIGNvbHVtbjogJ3VwZGF0ZWRfYnlfaWQnLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ3VwZGF0ZWRCeUlEJywgY29sdW1uOiAndXBkYXRlZF9ieV9yZXNvdXJjZV9pZCcsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICB7IG5hbWU6ICdudW1iZXJPZkNoYW5nZXMnLCBjb2x1bW46ICdudW1iZXJfb2ZfY2hhbmdlcycsIHR5cGU6ICdpbnRlZ2VyJyB9LFxuICAgICAgeyBuYW1lOiAnbnVtYmVyT2ZDcmVhdGVzJywgY29sdW1uOiAnbnVtYmVyX29mX2NyZWF0ZXMnLCB0eXBlOiAnaW50ZWdlcicgfSxcbiAgICAgIHsgbmFtZTogJ251bWJlck9mVXBkYXRlcycsIGNvbHVtbjogJ251bWJlcl9vZl91cGRhdGVzJywgdHlwZTogJ2ludGVnZXInIH0sXG4gICAgICB7IG5hbWU6ICdudW1iZXJPZkRlbGV0ZXMnLCBjb2x1bW46ICdudW1iZXJfb2ZfZGVsZXRlcycsIHR5cGU6ICdpbnRlZ2VyJyB9LFxuICAgICAgeyBuYW1lOiAnbWluTGF0JywgY29sdW1uOiAnbWluX2xhdCcsIHR5cGU6ICdkb3VibGUnIH0sXG4gICAgICB7IG5hbWU6ICdtYXhMYXQnLCBjb2x1bW46ICdtYXhfbGF0JywgdHlwZTogJ2RvdWJsZScgfSxcbiAgICAgIHsgbmFtZTogJ21pbkxvbicsIGNvbHVtbjogJ21pbl9sb24nLCB0eXBlOiAnZG91YmxlJyB9LFxuICAgICAgeyBuYW1lOiAnbWF4TG9uJywgY29sdW1uOiAnbWF4X2xvbicsIHR5cGU6ICdkb3VibGUnIH0sXG4gICAgICB7IG5hbWU6ICdjcmVhdGVkQXQnLCBjb2x1bW46ICdzZXJ2ZXJfY3JlYXRlZF9hdCcsIHR5cGU6ICdkYXRldGltZScgfSxcbiAgICAgIHsgbmFtZTogJ3VwZGF0ZWRBdCcsIGNvbHVtbjogJ3NlcnZlcl91cGRhdGVkX2F0JywgdHlwZTogJ2RhdGV0aW1lJyB9XG4gICAgXTtcbiAgfVxuXG4gIGFzeW5jIGJlZm9yZVNhdmUob3B0aW9ucykge1xuICAgIHRoaXMuX21ldGFkYXRhSW5kZXhUZXh0ID0gdGhpcy5tZXRhZGF0YUluZGV4VGV4dDtcbiAgfVxufVxuXG5QZXJzaXN0ZW50T2JqZWN0LnJlZ2lzdGVyKENoYW5nZXNldCk7XG4iXX0=