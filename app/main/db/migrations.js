"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _migration = _interopRequireDefault(require("./migration"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CURRENT_VERSION = 3;

class Migrations {
  static get currentVersion() {
    return CURRENT_VERSION;
  }

  constructor(db) {
    this.db = db;
  }

  async executeMigrations() {
    const methods = [];
    const versions = [];
    let upgrade = true;

    if (this.version !== CURRENT_VERSION) {
      if (this.version > CURRENT_VERSION) {
        for (let i = this.version; i > CURRENT_VERSION + 1; --i) {
          versions.push(i);
        }

        upgrade = false;
      } else {
        for (let i = this.version + 1; i < CURRENT_VERSION + 1; ++i) {
          versions.push(i);
        }
      }
    }

    if (versions.length > 0) {
      for (let version of versions) {
        await this.runMigration(version, upgrade);
      }
    }

    return methods;
  }

  async runMigration(version, upgrade) {
    let versionName = '000' + version.toString();
    versionName = versionName.slice(-3);
    const newVersion = upgrade ? version : version - 1;
    await this.db.execute('BEGIN TRANSACTION');
    const migration = new _migration.default(this.db, versionName);

    if (upgrade) {
      this.log('\nUpgrading database to version ' + version + '\n');
      await migration.up();
      this.log('\nUpgraded database to version ' + version + '\n');
    } else {
      this.log('\nDowngrading database to version ' + newVersion + '\n');
      await migration.down();
      this.log('\nDowngraded database to version ' + newVersion);
    }

    await this.updateDatabaseVersion(newVersion);
    await this.db.execute('COMMIT TRANSACTION');
  }

  async updateDatabaseVersion(version) {
    await this.db.execute("UPDATE metadata SET value = '" + version + "' WHERE key = 'database_version'", null);
  }

  log(message) {
    if (process.env.FULCRUM_DEBUG) {
      fulcrum.logger.log(message);
    }
  }

  async migrate() {
    await this.createMetadataTable();
    await this.getDatabaseVersion();
    await this.executeMigrations();
  }

  async getDatabaseVersion() {
    const result = await this.db.get("SELECT key, value FROM metadata WHERE key = 'database_version'");
    this.version = result ? +result.value : 0;
  }

  async createMetadataTable() {
    await this.db.execute('CREATE TABLE IF NOT EXISTS metadata (key TEXT, value TEXT)', null);
    await this.db.execute("INSERT INTO metadata (key, value) SELECT 'database_version', 0 WHERE NOT EXISTS (SELECT 1 FROM metadata WHERE key = 'database_version')", null);
  }

}

exports.default = Migrations;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWluL2RiL21pZ3JhdGlvbnMuanMiXSwibmFtZXMiOlsiQ1VSUkVOVF9WRVJTSU9OIiwiTWlncmF0aW9ucyIsImN1cnJlbnRWZXJzaW9uIiwiY29uc3RydWN0b3IiLCJkYiIsImV4ZWN1dGVNaWdyYXRpb25zIiwibWV0aG9kcyIsInZlcnNpb25zIiwidXBncmFkZSIsInZlcnNpb24iLCJpIiwicHVzaCIsImxlbmd0aCIsInJ1bk1pZ3JhdGlvbiIsInZlcnNpb25OYW1lIiwidG9TdHJpbmciLCJzbGljZSIsIm5ld1ZlcnNpb24iLCJleGVjdXRlIiwibWlncmF0aW9uIiwiTWlncmF0aW9uIiwibG9nIiwidXAiLCJkb3duIiwidXBkYXRlRGF0YWJhc2VWZXJzaW9uIiwibWVzc2FnZSIsInByb2Nlc3MiLCJlbnYiLCJGVUxDUlVNX0RFQlVHIiwiZnVsY3J1bSIsImxvZ2dlciIsIm1pZ3JhdGUiLCJjcmVhdGVNZXRhZGF0YVRhYmxlIiwiZ2V0RGF0YWJhc2VWZXJzaW9uIiwicmVzdWx0IiwiZ2V0IiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBLE1BQU1BLGVBQWUsR0FBRyxDQUF4Qjs7QUFFZSxNQUFNQyxVQUFOLENBQWlCO0FBQ0wsYUFBZEMsY0FBYyxHQUFHO0FBQzFCLFdBQU9GLGVBQVA7QUFDRDs7QUFFREcsRUFBQUEsV0FBVyxDQUFDQyxFQUFELEVBQUs7QUFDZCxTQUFLQSxFQUFMLEdBQVVBLEVBQVY7QUFDRDs7QUFFc0IsUUFBakJDLGlCQUFpQixHQUFHO0FBQ3hCLFVBQU1DLE9BQU8sR0FBRyxFQUFoQjtBQUNBLFVBQU1DLFFBQVEsR0FBRyxFQUFqQjtBQUVBLFFBQUlDLE9BQU8sR0FBRyxJQUFkOztBQUVBLFFBQUksS0FBS0MsT0FBTCxLQUFpQlQsZUFBckIsRUFBc0M7QUFDcEMsVUFBSSxLQUFLUyxPQUFMLEdBQWVULGVBQW5CLEVBQW9DO0FBQ2xDLGFBQUssSUFBSVUsQ0FBQyxHQUFHLEtBQUtE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T0FBUixDQUFnQiw0REFBaEIsRUFBOEUsSUFBOUUsQ0FBTjtBQUNBLFVBQU0sS0FBS2QsRUFBTCxDQUFRYyxPQUFSLENBQWdCLHlJQUFoQixFQUEySixJQUEzSixDQUFOO0FBQ0Q7O0FBdkY2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNaWdyYXRpb24gZnJvbSAnLi9taWdyYXRpb24nO1xuXG5jb25zdCBDVVJSRU5UX1ZFUlNJT04gPSAzO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNaWdyYXRpb25zIHtcbiAgc3RhdGljIGdldCBjdXJyZW50VmVyc2lvbigpIHtcbiAgICByZXR1cm4gQ1VSUkVOVF9WRVJTSU9OO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZGIpIHtcbiAgICB0aGlzLmRiID0gZGI7XG4gIH1cblxuICBhc3luYyBleGVjdXRlTWlncmF0aW9ucygpIHtcbiAgICBjb25zdCBtZXRob2RzID0gW107XG4gICAgY29uc3QgdmVyc2lvbnMgPSBbXTtcblxuICAgIGxldCB1cGdyYWRlID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLnZlcnNpb24gIT09IENVUlJFTlRfVkVSU0lPTikge1xuICAgICAgaWYgKHRoaXMudmVyc2lvbiA+IENVUlJFTlRfVkVSU0lPTikge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy52ZXJzaW9uOyBpID4gQ1VSUkVOVF9WRVJTSU9OICsgMTsgLS1pKSB7XG4gICAgICAgICAgdmVyc2lvbnMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICB1cGdyYWRlID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy52ZXJzaW9uICsgMTsgaSA8IENVUlJFTlRfVkVSU0lPTiArIDE7ICsraSkge1xuICAgICAgICAgIHZlcnNpb25zLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgdmVyc2lvbiBvZiB2ZXJzaW9ucykge1xuICAgICAgICBhd2FpdCB0aGlzLnJ1bk1pZ3JhdGlvbih2ZXJzaW9uLCB1cGdyYWRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWV0aG9kcztcbiAgfVxuXG4gIGFzeW5jIHJ1bk1pZ3JhdGlvbih2ZXJzaW9uLCB1cGdyYWRlKSB7XG4gICAgbGV0IHZlcnNpb25OYW1lID0gJzAwMCcgKyB2ZXJzaW9uLnRvU3RyaW5nKCk7XG5cbiAgICB2ZXJzaW9uTmFtZSA9IHZlcnNpb25OYW1lLnNsaWNlKC0zKTtcblxuICAgIGNvbnN0IG5ld1ZlcnNpb24gPSB1cGdyYWRlID8gdmVyc2lvbiA6IHZlcnNpb24gLSAxO1xuXG4gICAgYXdhaXQgdGhpcy5kYi5leGVjdXRlKCdCRUdJTiBUUkFOU0FDVElPTicpO1xuXG4gICAgY29uc3QgbWlncmF0aW9uID0gbmV3IE1pZ3JhdGlvbih0aGlzLmRiLCB2ZXJzaW9uTmFtZSk7XG5cbiAgICBpZiAodXBncmFkZSkge1xuICAgICAgdGhpcy5sb2coJ1xcblVwZ3JhZGluZyBkYXRhYmFzZSB0byB2ZXJzaW9uICcgKyB2ZXJzaW9uICsgJ1xcbicpO1xuICAgICAgYXdhaXQgbWlncmF0aW9uLnVwKCk7XG4gICAgICB0aGlzLmxvZygnXFxuVXBncmFkZWQgZGF0YWJhc2UgdG8gdmVyc2lvbiAnICsgdmVyc2lvbiArICdcXG4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2coJ1xcbkRvd25ncmFkaW5nIGRhdGFiYXNlIHRvIHZlcnNpb24gJyArIG5ld1ZlcnNpb24gKyAnXFxuJyk7XG4gICAgICBhd2FpdCBtaWdyYXRpb24uZG93bigpO1xuICAgICAgdGhpcy5sb2coJ1xcbkRvd25ncmFkZWQgZGF0YWJhc2UgdG8gdmVyc2lvbiAnICsgbmV3VmVyc2lvbik7XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy51cGRhdGVEYXRhYmFzZVZlcnNpb24obmV3VmVyc2lvbik7XG5cbiAgICBhd2FpdCB0aGlzLmRiLmV4ZWN1dGUoJ0NPTU1JVCBUUkFOU0FDVElPTicpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlRGF0YWJhc2VWZXJzaW9uKHZlcnNpb24pIHtcbiAgICBhd2FpdCB0aGlzLmRiLmV4ZWN1dGUoXCJVUERBVEUgbWV0YWRhdGEgU0VUIHZhbHVlID0gJ1wiICsgdmVyc2lvbiArIFwiJyBXSEVSRSBrZXkgPSAnZGF0YWJhc2VfdmVyc2lvbidcIiwgbnVsbCk7XG4gIH1cblxuICBsb2cobWVzc2FnZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5GVUxDUlVNX0RFQlVHKSB7XG4gICAgICBmdWxjcnVtLmxvZ2dlci5sb2cobWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgbWlncmF0ZSgpIHtcbiAgICBhd2FpdCB0aGlzLmNyZWF0ZU1ldGFkYXRhVGFibGUoKTtcbiAgICBhd2FpdCB0aGlzLmdldERhdGFiYXNlVmVyc2lvbigpO1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZU1pZ3JhdGlvbnMoKTtcbiAgfVxuXG4gIGFzeW5jIGdldERhdGFiYXNlVmVyc2lvbigpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmRiLmdldChcIlNFTEVDVCBrZXksIHZhbHVlIEZST00gbWV0YWRhdGEgV0hFUkUga2V5ID0gJ2RhdGFiYXNlX3ZlcnNpb24nXCIpO1xuICAgIHRoaXMudmVyc2lvbiA9IHJlc3VsdCA/ICtyZXN1bHQudmFsdWUgOiAwO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlTWV0YWRhdGFUYWJsZSgpIHtcbiAgICBhd2FpdCB0aGlzLmRiLmV4ZWN1dGUoJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIG1ldGFkYXRhIChrZXkgVEVYVCwgdmFsdWUgVEVYVCknLCBudWxsKTtcbiAgICBhd2FpdCB0aGlzLmRiLmV4ZWN1dGUoXCJJTlNFUlQgSU5UTyBtZXRhZGF0YSAoa2V5LCB2YWx1ZSkgU0VMRUNUICdkYXRhYmFzZV92ZXJzaW9uJywgMCBXSEVSRSBOT1QgRVhJU1RTIChTRUxFQ1QgMSBGUk9NIG1ldGFkYXRhIFdIRVJFIGtleSA9ICdkYXRhYmFzZV92ZXJzaW9uJylcIiwgbnVsbCk7XG4gIH1cbn1cbiJdfQ==