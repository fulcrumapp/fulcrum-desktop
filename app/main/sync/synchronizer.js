"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _downloadRoles = _interopRequireDefault(require("./tasks/download-roles"));

var _downloadMemberships = _interopRequireDefault(require("./tasks/download-memberships"));

var _downloadChoiceLists = _interopRequireDefault(require("./tasks/download-choice-lists"));

var _downloadClassificationSets = _interopRequireDefault(require("./tasks/download-classification-sets"));

var _downloadProjects = _interopRequireDefault(require("./tasks/download-projects"));

var _downloadForms = _interopRequireDefault(require("./tasks/download-forms"));

var _downloadChangesets = _interopRequireDefault(require("./tasks/download-changesets"));

var _downloadAllRecords = _interopRequireDefault(require("./tasks/download-all-records"));

var _app = _interopRequireDefault(require("../app"));

var _exec = _interopRequireDefault(require("../utils/exec"));

var _client = _interopRequireDefault(require("../api/client"));

var _humanizeDuration = _interopRequireDefault(require("humanize-duration"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Synchronizer {
  constructor() {
    this._tasks = [];
    this._recordCount = 0;
  }

  addTask(task) {
    this._tasks.push(task);
  }

  popTask() {
    return this._tasks.shift();
  }

  incrementRecordCount() {
    this._recordCount++;
  }

  async run(account, formName, dataSource, {
    fullSync
  }) {
    const start = new Date().getTime();
    this._recordCount = 0;
    const response = await _client.default.getSync(account);
    this.syncState = fullSync ? [] : JSON.parse(response.body).resources;
    this.taskParams = {
      synchronizer: this,
      syncState: this.syncState
    };
    this.addTask(new _downloadRoles.default(this.taskParams));
    this.addTask(new _downloadMemberships.default(this.taskParams));
    this.addTask(new _downloadChoiceLists.default(this.taskParams));
    this.addTask(new _downloadClassificationSets.default(this.taskParams));
    this.addTask(new _downloadProjects.default(this.taskParams));
    this.addTask(new _downloadForms.default(this.taskParams));
    this.addTask(new _downloadChangesets.default(this.taskParams));
    this.addTask(new _downloadAllRecords.default(this.taskParams));
    await dataSource.source.load(account.db);
    await _app.default.emit('sync:start', {
      account,
      tasks: this._tasks
    });

    do {
      const task = this.popTask();
      await task.execute({
        account,
        dataSource
      });
    } while (this._tasks.length);

    await _app.default.emit('sync:finish', {
      account
    });

    if (_app.default.args.afterSyncCommand) {
      await (0, _exec.default)(_app.default.args.afterSyncCommand, this.afterSyncCommandOptions, 'after-sync');
    }

    fulcrum.logger.log('Synced'.green, (0, _humanizeDuration.default)(new Date().getTime() - start));
  }

  get afterSyncCommandOptions() {
    const options = {
      changedRecordCount: this._recordCount,
      args: _app.default.args
    };
    return {
      env: {
        FULCRUM_PAYLOAD: JSON.stringify(options),
        FULCRUM_CHANGED_RECORD_COUNT: options.recordCount
      }
    };
  }

}

exports.default = Synchronizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWluL3N5bmMvc3luY2hyb25pemVyLmpzIl0sIm5hbWVzIjpbIlN5bmNocm9uaXplciIsImNvbnN0cnVjdG9yIiwiX3Rhc2tzIiwiX3JlY29yZENvdW50IiwiYWRkVGFzayIsInRhc2siLCJwdXNoIiwicG9wVGFzayIsInNoaWZ0IiwiaW5jcmVtZW50UmVjb3JkQ291bnQiLCJydW4iLCJhY2NvdW50IiwiZm9ybU5hbWUiLCJkYXRhU291cmNlIiwiZnVsbFN5bmMiLCJzdGFydCIsIkRhdGUiLCJnZXRUaW1lIiwicmVzcG9uc2UiLCJDbGllbnQiLCJnZXRTeW5jIiwic3luY1N0YXRlIiwiSlNPTiIsInBhcnNlIiwiYm9keSIsInJlc291cmNlcyIsInRhc2tQYXJhbXMiLCJzeW5jaHJvbml6ZXIiLCJEb3dubG9hZFJvbGVzIiwiRG93bmxvYWRNZW1iZXJzaGlwcyIsIkRvd25sb2FkQ2hvaWNlTGlzdHMiLCJEb3dubG9hZENsYXNzaWZpY2F0aW9uU2V0cyIsIkRvd25sb2FkUHJvamVjdHMiLCJEb3dubG9hZEZvcm1zIiwiRG93bmxvYWRDaGFuZ2VzZXRzIiwiRG93bmxvYWRBbGxSZWNvcmRzIiwic291cmNlIiwibG9hZCIsImRiIiwiYXBwIiwiZW1pdCIsInRhc2tzIiwiZXhlY3V0ZSIsImxlbmd0aCIsImFyZ3MiLCJhZnRlclN5bmNDb21tYW5kIiwiYWZ0ZXJTeW5jQ29tbWFuZE9wdGlvbnMiLCJmdWxjcnVtIiwibG9nZ2VyIiwibG9nIiwiZ3JlZW4iLCJvcHRpb25zIiwiY2hhbmdlZFJlY29yZENvdW50IiwiZW52IiwiRlVMQ1JVTV9QQVlMT0FEIiwic3RyaW5naWZ5IiwiRlVMQ1JVTV9DSEFOR0VEX1JFQ09SRF9DT1VOVCIsInJlY29yZENvdW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUE7Ozs7QUFFZSxNQUFN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QztBQUNEOztBQUUwQixNQUF2QitCLHVCQUF1QixHQUFHO0FBQzVCLFVBQU1LLE9BQU8sR0FBRztBQUNkQyxNQUFBQSxrQkFBa0IsRUFBRSxLQUFLakQsWUFEWDtBQUVkeUMsTUFBQUEsSUFBSSxFQUFFTCxhQUFJSztBQUZJLEtBQWhCO0FBS0EsV0FBTztBQUNMUyxNQUFBQSxHQUFHLEVBQUU7QUFDSEMsUUFBQUEsZUFBZSxFQUFFaEMsSUFBSSxDQUFDaUMsU0FBTCxDQUFlSixPQUFmLENBRGQ7QUFFSEssUUFBQUEsNEJBQTRCLEVBQUVMLE9BQU8sQ0FBQ007QUFGbkM7QUFEQSxLQUFQO0FBTUQ7O0FBcEUrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEb3dubG9hZFJvbGVzIGZyb20gJy4vdGFza3MvZG93bmxvYWQtcm9sZXMnO1xuaW1wb3J0IERvd25sb2FkTWVtYmVyc2hpcHMgZnJvbSAnLi90YXNrcy9kb3dubG9hZC1tZW1iZXJzaGlwcyc7XG5pbXBvcnQgRG93bmxvYWRDaG9pY2VMaXN0cyBmcm9tICcuL3Rhc2tzL2Rvd25sb2FkLWNob2ljZS1saXN0cyc7XG5pbXBvcnQgRG93bmxvYWRDbGFzc2lmaWNhdGlvblNldHMgZnJvbSAnLi90YXNrcy9kb3dubG9hZC1jbGFzc2lmaWNhdGlvbi1zZXRzJztcbmltcG9ydCBEb3dubG9hZFByb2plY3RzIGZyb20gJy4vdGFza3MvZG93bmxvYWQtcHJvamVjdHMnO1xuaW1wb3J0IERvd25sb2FkRm9ybXMgZnJvbSAnLi90YXNrcy9kb3dubG9hZC1mb3Jtcyc7XG5pbXBvcnQgRG93bmxvYWRDaGFuZ2VzZXRzIGZyb20gJy4vdGFza3MvZG93bmxvYWQtY2hhbmdlc2V0cyc7XG5pbXBvcnQgRG93bmxvYWRBbGxSZWNvcmRzIGZyb20gJy4vdGFza3MvZG93bmxvYWQtYWxsLXJlY29yZHMnO1xuaW1wb3J0IGFwcCBmcm9tICcuLi9hcHAnO1xuaW1wb3J0IGV4ZWMgZnJvbSAnLi4vdXRpbHMvZXhlYyc7XG5cbmltcG9ydCBDbGllbnQgZnJvbSAnLi4vYXBpL2NsaWVudCc7XG5cbmltcG9ydCBodW1hbml6ZUR1cmF0aW9uIGZyb20gJ2h1bWFuaXplLWR1cmF0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3luY2hyb25pemVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdGFza3MgPSBbXTtcbiAgICB0aGlzLl9yZWNvcmRDb3VudCA9IDA7XG4gIH1cblxuICBhZGRUYXNrKHRhc2spIHtcbiAgICB0aGlzLl90YXNrcy5wdXNoKHRhc2spO1xuICB9XG5cbiAgcG9wVGFzaygpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFza3Muc2hpZnQoKTtcbiAgfVxuXG4gIGluY3JlbWVudFJlY29yZENvdW50KCkge1xuICAgIHRoaXMuX3JlY29yZENvdW50Kys7XG4gIH1cblxuICBhc3luYyBydW4oYWNjb3VudCwgZm9ybU5hbWUsIGRhdGFTb3VyY2UsIHtmdWxsU3luY30pIHtcbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgdGhpcy5fcmVjb3JkQ291bnQgPSAwO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBDbGllbnQuZ2V0U3luYyhhY2NvdW50KTtcblxuICAgIHRoaXMuc3luY1N0YXRlID0gZnVsbFN5bmMgPyBbXSA6IEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSkucmVzb3VyY2VzO1xuICAgIHRoaXMudGFza1BhcmFtcyA9IHsgc3luY2hyb25pemVyOiB0aGlzLCBzeW5jU3RhdGU6IHRoaXMuc3luY1N0YXRlIH07XG5cbiAgICB0aGlzLmFkZFRhc2sobmV3IERvd25sb2FkUm9sZXModGhpcy50YXNrUGFyYW1zKSk7XG4gICAgdGhpcy5hZGRUYXNrKG5ldyBEb3dubG9hZE1lbWJlcnNoaXBzKHRoaXMudGFza1BhcmFtcykpO1xuICAgIHRoaXMuYWRkVGFzayhuZXcgRG93bmxvYWRDaG9pY2VMaXN0cyh0aGlzLnRhc2tQYXJhbXMpKTtcbiAgICB0aGlzLmFkZFRhc2sobmV3IERvd25sb2FkQ2xhc3NpZmljYXRpb25TZXRzKHRoaXMudGFza1BhcmFtcykpO1xuICAgIHRoaXMuYWRkVGFzayhuZXcgRG93bmxvYWRQcm9qZWN0cyh0aGlzLnRhc2tQYXJhbXMpKTtcbiAgICB0aGlzLmFkZFRhc2sobmV3IERvd25sb2FkRm9ybXModGhpcy50YXNrUGFyYW1zKSk7XG4gICAgdGhpcy5hZGRUYXNrKG5ldyBEb3dubG9hZENoYW5nZXNldHModGhpcy50YXNrUGFyYW1zKSk7XG4gICAgdGhpcy5hZGRUYXNrKG5ldyBEb3dubG9hZEFsbFJlY29yZHModGhpcy50YXNrUGFyYW1zKSk7XG5cbiAgICBhd2FpdCBkYXRhU291cmNlLnNvdXJjZS5sb2FkKGFjY291bnQuZGIpO1xuXG4gICAgYXdhaXQgYXBwLmVtaXQoJ3N5bmM6c3RhcnQnLCB7YWNjb3VudCwgdGFza3M6IHRoaXMuX3Rhc2tzfSk7XG5cbiAgICBkbyB7XG4gICAgICBjb25zdCB0YXNrID0gdGhpcy5wb3BUYXNrKCk7XG5cbiAgICAgIGF3YWl0IHRhc2suZXhlY3V0ZSh7YWNjb3VudCwgZGF0YVNvdXJjZX0pO1xuICAgIH0gd2hpbGUgKHRoaXMuX3Rhc2tzLmxlbmd0aCk7XG5cbiAgICBhd2FpdCBhcHAuZW1pdCgnc3luYzpmaW5pc2gnLCB7YWNjb3VudH0pO1xuXG4gICAgaWYgKGFwcC5hcmdzLmFmdGVyU3luY0NvbW1hbmQpIHtcbiAgICAgIGF3YWl0IGV4ZWMoYXBwLmFyZ3MuYWZ0ZXJTeW5jQ29tbWFuZCwgdGhpcy5hZnRlclN5bmNDb21tYW5kT3B0aW9ucywgJ2FmdGVyLXN5bmMnKTtcbiAgICB9XG5cbiAgICBmdWxjcnVtLmxvZ2dlci5sb2coJ1N5bmNlZCcuZ3JlZW4sIGh1bWFuaXplRHVyYXRpb24obmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydCkpO1xuICB9XG5cbiAgZ2V0IGFmdGVyU3luY0NvbW1hbmRPcHRpb25zKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBjaGFuZ2VkUmVjb3JkQ291bnQ6IHRoaXMuX3JlY29yZENvdW50LFxuICAgICAgYXJnczogYXBwLmFyZ3NcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVudjoge1xuICAgICAgICBGVUxDUlVNX1BBWUxPQUQ6IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpLFxuICAgICAgICBGVUxDUlVNX0NIQU5HRURfUkVDT1JEX0NPVU5UOiBvcHRpb25zLnJlY29yZENvdW50XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuIl19