"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _client = _interopRequireDefault(require("../../api/client"));

var _form = _interopRequireDefault(require("../../models/form"));

var _schema = _interopRequireDefault(require("fulcrum-schema/dist/schema"));

var _metadata = _interopRequireDefault(require("fulcrum-schema/dist/metadata"));

var _postgresQueryV = _interopRequireDefault(require("fulcrum-schema/dist/schemas/postgres-query-v2"));

var _sqldiff = _interopRequireDefault(require("sqldiff"));

var _downloadResource = _interopRequireDefault(require("./download-resource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  SchemaDiffer,
  Sqlite
} = _sqldiff.default;

class DownloadForms extends _downloadResource.default {
  get resourceName() {
    return 'forms';
  }

  get typeName() {
    return 'form';
  }

  fetchObjects(lastSync, sequence) {
    return _client.default.getForms(this.account);
  }

  fetchLocalObjects() {
    return this.account.findForms();
  }

  findOrCreate(database, attributes) {
    return _form.default.findOrCreate(database, {
      resource_id: attributes.id,
      account_id: this.account.rowID
    });
  }

  async process(object, attributes) {
    const isChanged = !object.isPersisted || attributes.version !== object.version;
    let oldForm = null;

    if (object.isPersisted) {
      oldForm = {
        id: object._id,
        row_id: object.rowID,
        name: object._name,
        elements: object._elementsJSON
      };
    }

    object.updateFromAPIAttributes(attributes);
    object._deletedAt = null;
    await this.db.transaction(async db => {
      await object.save({
        db
      });
      const newForm = {
        id: object.id,
        row_id: object.rowID,
        name: object._name,
        elements: object._elementsJSON
      };
      const statements = await this.updateFormTables(db, oldForm, newForm);

      if (isChanged) {
        await this.triggerEvent('save', {
          form: object,
          account: this.account,
          statements,
          oldForm,
          newForm
        });
      }
    });
  }

  async updateFormTables(db, oldForm, newForm) {
    let oldSchema = null;
    let newSchema = null;

    if (oldForm) {
      oldSchema = new _schema.default(oldForm, _postgresQueryV.default, null);
    }

    if (newForm) {
      newSchema = new _schema.default(newForm, _postgresQueryV.default, null);
    }

    const tablePrefix = 'account_' + this.account.rowID + '_';
    const differ = new SchemaDiffer(oldSchema, newSchema);
    const meta = new _metadata.default(differ, {
      tablePrefix,
      quote: '`',
      includeColumns: true
    });
    const generator = new Sqlite(differ, {
      afterTransform: meta.build.bind(meta)
    });
    generator.tablePrefix = tablePrefix;
    const statements = generator.generate();

    for (const statement of statements) {
      await db.execute(statement);
    }

    return statements;
  }

}

exports.default = DownloadForms;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tYWluL3N5bmMvdGFza3MvZG93bmxvYWQtZm9ybXMuanMiXSwibmFtZXMiOlsiU2NoZW1hRGlmZmVyIiwiU3FsaXRlIiwic3FsZGlmZiIsIkRvd25sb2FkRm9ybXMiLCJEb3dubG9hZFJlc291cmNlIiwicmVzb3VyY2VOYW1lIiwidHlwZU5hbWUiLCJmZXRjaE9iamVjdHMiLCJsYXN0U3luYyIsInNlcXVlbmNlIiwiQ2xpZW50IiwiZ2V0Rm9ybXMiLCJhY2NvdW50IiwiZmV0Y2hMb2NhbE9iamVjdHMiLCJmaW5kRm9ybXMiLCJmaW5kT3JDcmVhdGUiLCJkYXRhYmFzZSIsImF0dHJpYnV0ZXMiLCJGb3JtIiwicmVzb3VyY2VfaWQiLCJpZCIsImFjY291bnRfaWQiLCJyb3dJRCIsInByb2Nlc3MiLCJvYmplY3QiLCJpc0NoYW5nZWQiLCJpc1BlcnNpc3RlZCIsInZlcnNpb24iLCJvbGRGb3JtIiwiX2lkIiwicm93X2lkIiwibmFtZSIsIl9uYW1lIiwiZWxlbWVudHMiLCJfZWxlbWVudHNKU09OIiwidXBkYXRlRnJvbUFQSUF0dHJpYnV0ZXMiLCJfZGVsZXRlZEF0IiwiZGIiLCJ0cmFuc2FjdGlvbiIsInNhdmUiLCJuZXdGb3JtIiwic3RhdGVtZW50cyIsInVwZGF0ZUZvcm1UYWJsZXMiLCJ0cmlnZ2VyRXZlbnQiLCJmb3JtIiwib2xkU2NoZW1hIiwibmV3U2NoZW1hIiwiU2NoZW1hIiwiVjIiLCJ0YWJsZVByZWZpeCIsImRpZmZlciIsIm1ldGEiLCJNZXRhZGF0YSIsInF1b3RlIiwiaW5jbHVkZUNvbHVtbnMiLCJnZW5lcmF0b3IiLCJhZnRlclRyYW5zZm9ybSIsImJ1aWxkIiwiYmluZCIsImdlbmVyYXRlIiwic3RhdGVtZW50IiwiZXhlY3V0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTTtBQUFDQSxFQUFBQSxZQUFEO0FBQWVDLEVBQUFB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LE9BQUosRUFBYTtBQUNYTSxNQUFBQSxTQUFTLEdBQUcsSUFBSUMsZUFBSixDQUFXUCxPQUFYLEVBQW9CUSx1QkFBcEIsRUFBd0IsSUFBeEIsQ0FBWjtBQUNEOztBQUVELFVBQU1DLFdBQVcsR0FBRyxhQUFhLEtBQUtyQyxPQUFMLENBQWFVLEtBQTFCLEdBQWtDLEdBQXREO0FBRUEsVUFBTTRCLE1BQU0sR0FBRyxJQUFJbEQsWUFBSixDQUFpQjZDLFNBQWpCLEVBQTRCQyxTQUE1QixDQUFmO0FBRUEsVUFBTUssSUFBSSxHQUFHLElBQUlDLGlCQUFKLENBQWFGLE1BQWIsRUFBcUI7QUFBQ0QsTUFBQUEsV0FBRDtBQUFjSSxNQUFBQSxLQUFLLEVBQUUsR0FBckI7QUFBMEJDLE1BQUFBLGNBQWMsRUFBRTtBQUExQyxLQUFyQixDQUFiO0FBRUEsVUFBTUMsU0FBUyxHQUFHLElBQUl0RCxNQUFKLENBQVdpRCxNQUFYLEVBQW1CO0FBQUNNLE1BQUFBLGNBQWMsRUFBRUwsSUFBSSxDQUFDTSxLQUFMLENBQVdDLElBQVgsQ0FBZ0JQLElBQWhCO0FBQWpCLEtBQW5CLENBQWxCO0FBRUFJLElBQUFBLFNBQVMsQ0FBQ04sV0FBVixHQUF3QkEsV0FBeEI7QUFFQSxVQUFNUixVQUFVLEdBQUdjLFNBQVMsQ0FBQ0ksUUFBVixFQUFuQjs7QUFFQSxTQUFLLE1BQU1DLFNBQVgsSUFBd0JuQixVQUF4QixFQUFvQztBQUNsQyxZQUFNSixFQUFFLENBQUN3QixPQUFILENBQVdELFNBQVgsQ0FBTjtBQUNEOztBQUVELFdBQU9uQixVQUFQO0FBQ0Q7O0FBckZ5RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbGllbnQgZnJvbSAnLi4vLi4vYXBpL2NsaWVudCc7XG5pbXBvcnQgRm9ybSBmcm9tICcuLi8uLi9tb2RlbHMvZm9ybSc7XG5pbXBvcnQgU2NoZW1hIGZyb20gJ2Z1bGNydW0tc2NoZW1hL2Rpc3Qvc2NoZW1hJztcbmltcG9ydCBNZXRhZGF0YSBmcm9tICdmdWxjcnVtLXNjaGVtYS9kaXN0L21ldGFkYXRhJztcbmltcG9ydCBWMiBmcm9tICdmdWxjcnVtLXNjaGVtYS9kaXN0L3NjaGVtYXMvcG9zdGdyZXMtcXVlcnktdjInO1xuaW1wb3J0IHNxbGRpZmYgZnJvbSAnc3FsZGlmZic7XG5pbXBvcnQgRG93bmxvYWRSZXNvdXJjZSBmcm9tICcuL2Rvd25sb2FkLXJlc291cmNlJztcblxuY29uc3Qge1NjaGVtYURpZmZlciwgU3FsaXRlfSA9IHNxbGRpZmY7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvd25sb2FkRm9ybXMgZXh0ZW5kcyBEb3dubG9hZFJlc291cmNlIHtcbiAgZ2V0IHJlc291cmNlTmFtZSgpIHtcbiAgICByZXR1cm4gJ2Zvcm1zJztcbiAgfVxuXG4gIGdldCB0eXBlTmFtZSgpIHtcbiAgICByZXR1cm4gJ2Zvcm0nO1xuICB9XG5cbiAgZmV0Y2hPYmplY3RzKGxhc3RTeW5jLCBzZXF1ZW5jZSkge1xuICAgIHJldHVybiBDbGllbnQuZ2V0Rm9ybXModGhpcy5hY2NvdW50KTtcbiAgfVxuXG4gIGZldGNoTG9jYWxPYmplY3RzKCkge1xuICAgIHJldHVybiB0aGlzLmFjY291bnQuZmluZEZvcm1zKCk7XG4gIH1cblxuICBmaW5kT3JDcmVhdGUoZGF0YWJhc2UsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gRm9ybS5maW5kT3JDcmVhdGUoZGF0YWJhc2UsIHtyZXNvdXJjZV9pZDogYXR0cmlidXRlcy5pZCwgYWNjb3VudF9pZDogdGhpcy5hY2NvdW50LnJvd0lEfSk7XG4gIH1cblxuICBhc3luYyBwcm9jZXNzKG9iamVjdCwgYXR0cmlidXRlcykge1xuICAgIGNvbnN0IGlzQ2hhbmdlZCA9ICFvYmplY3QuaXNQZXJzaXN0ZWQgfHwgYXR0cmlidXRlcy52ZXJzaW9uICE9PSBvYmplY3QudmVyc2lvbjtcblxuICAgIGxldCBvbGRGb3JtID0gbnVsbDtcblxuICAgIGlmIChvYmplY3QuaXNQZXJzaXN0ZWQpIHtcbiAgICAgIG9sZEZvcm0gPSB7XG4gICAgICAgIGlkOiBvYmplY3QuX2lkLFxuICAgICAgICByb3dfaWQ6IG9iamVjdC5yb3dJRCxcbiAgICAgICAgbmFtZTogb2JqZWN0Ll9uYW1lLFxuICAgICAgICBlbGVtZW50czogb2JqZWN0Ll9lbGVtZW50c0pTT05cbiAgICAgIH07XG4gICAgfVxuXG4gICAgb2JqZWN0LnVwZGF0ZUZyb21BUElBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpO1xuICAgIG9iamVjdC5fZGVsZXRlZEF0ID0gbnVsbDtcblxuICAgIGF3YWl0IHRoaXMuZGIudHJhbnNhY3Rpb24oYXN5bmMgKGRiKSA9PiB7XG4gICAgICBhd2FpdCBvYmplY3Quc2F2ZSh7ZGJ9KTtcblxuICAgICAgY29uc3QgbmV3Rm9ybSA9IHtcbiAgICAgICAgaWQ6IG9iamVjdC5pZCxcbiAgICAgICAgcm93X2lkOiBvYmplY3Qucm93SUQsXG4gICAgICAgIG5hbWU6IG9iamVjdC5fbmFtZSxcbiAgICAgICAgZWxlbWVudHM6IG9iamVjdC5fZWxlbWVudHNKU09OXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzdGF0ZW1lbnRzID0gYXdhaXQgdGhpcy51cGRhdGVGb3JtVGFibGVzKGRiLCBvbGRGb3JtLCBuZXdGb3JtKTtcblxuICAgICAgaWYgKGlzQ2hhbmdlZCkge1xuICAgICAgICBhd2FpdCB0aGlzLnRyaWdnZXJFdmVudCgnc2F2ZScsIHtmb3JtOiBvYmplY3QsIGFjY291bnQ6IHRoaXMuYWNjb3VudCwgc3RhdGVtZW50cywgb2xkRm9ybSwgbmV3Rm9ybX0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlRm9ybVRhYmxlcyhkYiwgb2xkRm9ybSwgbmV3Rm9ybSkge1xuICAgIGxldCBvbGRTY2hlbWEgPSBudWxsO1xuICAgIGxldCBuZXdTY2hlbWEgPSBudWxsO1xuXG4gICAgaWYgKG9sZEZvcm0pIHtcbiAgICAgIG9sZFNjaGVtYSA9IG5ldyBTY2hlbWEob2xkRm9ybSwgVjIsIG51bGwpO1xuICAgIH1cblxuICAgIGlmIChuZXdGb3JtKSB7XG4gICAgICBuZXdTY2hlbWEgPSBuZXcgU2NoZW1hKG5ld0Zvcm0sIFYyLCBudWxsKTtcbiAgICB9XG5cbiAgICBjb25zdCB0YWJsZVByZWZpeCA9ICdhY2NvdW50XycgKyB0aGlzLmFjY291bnQucm93SUQgKyAnXyc7XG5cbiAgICBjb25zdCBkaWZmZXIgPSBuZXcgU2NoZW1hRGlmZmVyKG9sZFNjaGVtYSwgbmV3U2NoZW1hKTtcblxuICAgIGNvbnN0IG1ldGEgPSBuZXcgTWV0YWRhdGEoZGlmZmVyLCB7dGFibGVQcmVmaXgsIHF1b3RlOiAnYCcsIGluY2x1ZGVDb2x1bW5zOiB0cnVlfSk7XG5cbiAgICBjb25zdCBnZW5lcmF0b3IgPSBuZXcgU3FsaXRlKGRpZmZlciwge2FmdGVyVHJhbnNmb3JtOiBtZXRhLmJ1aWxkLmJpbmQobWV0YSl9KTtcblxuICAgIGdlbmVyYXRvci50YWJsZVByZWZpeCA9IHRhYmxlUHJlZml4O1xuXG4gICAgY29uc3Qgc3RhdGVtZW50cyA9IGdlbmVyYXRvci5nZW5lcmF0ZSgpO1xuXG4gICAgZm9yIChjb25zdCBzdGF0ZW1lbnQgb2Ygc3RhdGVtZW50cykge1xuICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzdGF0ZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZW1lbnRzO1xuICB9XG59XG4iXX0=