"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _downloadQuerySequence = _interopRequireDefault(require("./download-query-sequence"));

var _audio = _interopRequireDefault(require("../../models/audio"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DownloadAudio extends _downloadQuerySequence.default {
  get resourceName() {
    return 'audio';
  }

  get typeName() {
    return 'audio';
  }

  get lastSync() {
    return this.account._lastSyncAudio;
  }

  get useRestAPI() {
    return false;
  }

  findOrCreate(database, attributes) {
    return _audio.default.findOrCreate(database, {
      account_id: this.account.rowID,
      resource_id: attributes.access_key
    });
  }

  async loadObject(object, attributes) {
    if (object.isDownloaded == null) {
      object.isDownloaded = false;
    }

    await this.lookup(object, attributes.form_id, '_formRowID', 'getForm');
    await this.lookup(object, attributes.created_by_id, '_createdByRowID', 'getUser');
    await this.lookup(object, attributes.updated_by_id, '_updatedByRowID', 'getUser');

    if (object._formRowID) {
      const record = await this.account.findFirstRecord({
        resource_id: attributes.record_id
      });

      if (record) {
        object._recordRowID = record.rowID;
      }
    }

    this.account._lastSyncAudio = object._updatedAt;
  }

  attributesForQueryRow(row) {
    return {
      access_key: row[0],
      created_at: row[1],
      updated_at: row[2],
      uploaded: row[3],
      stored: row[4],
      processed: row[5],
      created_by_id: row[6],
      updated_by_id: row[7],
      form_id: row[8],
      record_id: row[9],
      content_type: row[10],
      file_size: row[11],
      metadata: row[12] && JSON.parse(row[12]),
      created_by: row[13],
      updated_by: row[14],
      track: row[15] && JSON.parse(row[15])
    };
  }

  generateQuery(sequence, limit) {
    const sequenceString = new Date(+sequence).toISOString();
    return `
SELECT
  "audio_id" AS "access_key",
  to_char(pg_catalog.timezone('UTC', "records"."created_at"), 'YYYY-MM-DD"T"HH24:MI:SS"Z"') AS "created_at",
  to_char(pg_catalog.timezone('UTC', "records"."updated_at"), 'YYYY-MM-DD"T"HH24:MI:SS"Z"') AS "updated_at",
  "uploaded_at" IS NOT NULL AS uploaded,
  "stored_at" IS NOT NULL AS stored,
  "processed_at" IS NOT NULL AS processed,
  "created_by_id" AS "created_by_id",
  "updated_by_id" AS "updated_by_id",
  "form_id" AS "form_id",
  "record_id" AS "record_id",
  "content_type" AS "content_type",
  "file_size" AS "file_size",
  "metadata" AS "metadata",
  NULL AS "created_by",
  NULL AS "updated_by",
  "track" AS "track"
FROM "audio" AS "records"
WHERE
  "records".updated_at > '${sequenceString}'
ORDER BY
  "records".updated_at ASC
LIMIT ${limit} OFFSET 0
`;
  }

}

exports.default = DownloadAudio;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tYWluL3N5bmMvdGFza3MvZG93bmxvYWQtYXVkaW8uanMiXSwibmFtZXMiOlsiRG93bmxvYWRBdWRpbyIsIkRvd25sb2FkUXVlcnlTZXF1ZW5jZSIsInJlc291cmNlTmFtZSIsInR5cGVOYW1lIiwibGFzdFN5bmMiLCJhY2NvdW50IiwiX2xhc3RTeW5jQXVkaW8iLCJ1c2VSZXN0QVBJIiwiZmluZE9yQ3JlYXRlIiwiZGF0YWJhc2UiLCJhdHRyaWJ1dGVzIiwiQXVkaW8iLCJhY2NvdW50X2lkIiwicm93SUQiLCJyZXNvdXJjZV9pZCIsImFjY2Vzc19rZXkiLCJsb2FkT2JqZWN0Iiwib2JqZWN0IiwiaXNEb3dubG9hZGVkIiwibG9va3VwIiwiZm9ybV9pZCIsImNyZWF0ZWRfYnlfaWQiLCJ1cGRhdGVkX2J5X2lkIiwiX2Zvcm1Sb3dJRCIsInJlY29yZCIsImZpbmRGaXJzdFJlY29yZCIsInJlY29yZF9pZCIsIl9yZWNvcmRSb3dJRCIsIl91cGRhdGVkQXQiLCJhdHRyaWJ1dGVzRm9yUXVlcnlSb3ciLCJyb3ciLCJjcmVhdGVkX2F0IiwidXBkYXRlZF9hdCIsInVwbG9hZGVkIiwic3RvcmVkIiwicHJvY2Vzc2VkIiwiY29udGVudF90eXBlIiwiZmlsZV9zaXplIiwibWV0YWRhdGEiLCJKU09OIiwicGFyc2UiLCJjcmVhdGVkX2J5IiwidXBkYXRlZF9ieSIsInRyYWNrIiwiZ2VuZXJhdGVRdWVyeSIsInNlcXVlbmNlIiwibGltaXQiLCJzZXF1ZW5jZVN0cmluZyIsIkRhdGUiLCJ0b0lTT1N0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRWUsTUFBTUEsYUFBTixTQUE0QkMsOEJBQTVCLENBQWtEO0FBQy9DLE1BQVpDLFlBQVksR0FBRztBQUNqQixXQUFPLE9BQVA7QUFDRDs7QUFFVyxNQUFSQyxRQUFRLEdBQUc7QUFDYixXQUFPLE9BQVA7QUFDRDs7QUFFVyxNQUFSQyxRQUFRLEdBQUc7QUFDYixXQUFP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RGMsRUFBQUEsYUFBYSxDQUFDQyxRQUFELEVBQVdDLEtBQVgsRUFBa0I7QUFDN0IsVUFBTUMsY0FBYyxHQUFHLElBQUlDLElBQUosQ0FBUyxDQUFDSCxRQUFWLEVBQW9CSSxXQUFwQixFQUF2QjtBQUVBLFdBQVE7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QkYsY0FBZTtBQUMzQztBQUNBO0FBQ0EsUUFBUUQsS0FBTTtBQUNkLENBeEJJO0FBeUJEOztBQTFGOEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRG93bmxvYWRRdWVyeVNlcXVlbmNlIGZyb20gJy4vZG93bmxvYWQtcXVlcnktc2VxdWVuY2UnO1xuaW1wb3J0IEF1ZGlvIGZyb20gJy4uLy4uL21vZGVscy9hdWRpbyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvd25sb2FkQXVkaW8gZXh0ZW5kcyBEb3dubG9hZFF1ZXJ5U2VxdWVuY2Uge1xuICBnZXQgcmVzb3VyY2VOYW1lKCkge1xuICAgIHJldHVybiAnYXVkaW8nO1xuICB9XG5cbiAgZ2V0IHR5cGVOYW1lKCkge1xuICAgIHJldHVybiAnYXVkaW8nO1xuICB9XG5cbiAgZ2V0IGxhc3RTeW5jKCkge1xuICAgIHJldHVybiB0aGlzLmFjY291bnQuX2xhc3RTeW5jQXVkaW87XG4gIH1cblxuICBnZXQgdXNlUmVzdEFQSSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmaW5kT3JDcmVhdGUoZGF0YWJhc2UsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gQXVkaW8uZmluZE9yQ3JlYXRlKGRhdGFiYXNlLCB7YWNjb3VudF9pZDogdGhpcy5hY2NvdW50LnJvd0lELCByZXNvdXJjZV9pZDogYXR0cmlidXRlcy5hY2Nlc3Nfa2V5fSk7XG4gIH1cblxuICBhc3luYyBsb2FkT2JqZWN0KG9iamVjdCwgYXR0cmlidXRlcykge1xuICAgIGlmIChvYmplY3QuaXNEb3dubG9hZGVkID09IG51bGwpIHtcbiAgICAgIG9iamVjdC5pc0Rvd25sb2FkZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLmxvb2t1cChvYmplY3QsIGF0dHJpYnV0ZXMuZm9ybV9pZCwgJ19mb3JtUm93SUQnLCAnZ2V0Rm9ybScpO1xuICAgIGF3YWl0IHRoaXMubG9va3VwKG9iamVjdCwgYXR0cmlidXRlcy5jcmVhdGVkX2J5X2lkLCAnX2NyZWF0ZWRCeVJvd0lEJywgJ2dldFVzZXInKTtcbiAgICBhd2FpdCB0aGlzLmxvb2t1cChvYmplY3QsIGF0dHJpYnV0ZXMudXBkYXRlZF9ieV9pZCwgJ191cGRhdGVkQnlSb3dJRCcsICdnZXRVc2VyJyk7XG5cbiAgICBpZiAob2JqZWN0Ll9mb3JtUm93SUQpIHtcbiAgICAgIGNvbnN0IHJlY29yZCA9IGF3YWl0IHRoaXMuYWNjb3VudC5maW5kRmlyc3RSZWNvcmQoe3Jlc291cmNlX2lkOiBhdHRyaWJ1dGVzLnJlY29yZF9pZH0pO1xuXG4gICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgIG9iamVjdC5fcmVjb3JkUm93SUQgPSByZWNvcmQucm93SUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hY2NvdW50Ll9sYXN0U3luY0F1ZGlvID0gb2JqZWN0Ll91cGRhdGVkQXQ7XG4gIH1cblxuICBhdHRyaWJ1dGVzRm9yUXVlcnlSb3cocm93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjY2Vzc19rZXk6IHJvd1swXSxcbiAgICAgIGNyZWF0ZWRfYXQ6IHJvd1sxXSxcbiAgICAgIHVwZGF0ZWRfYXQ6IHJvd1syXSxcbiAgICAgIHVwbG9hZGVkOiByb3dbM10sXG4gICAgICBzdG9yZWQ6IHJvd1s0XSxcbiAgICAgIHByb2Nlc3NlZDogcm93WzVdLFxuICAgICAgY3JlYXRlZF9ieV9pZDogcm93WzZdLFxuICAgICAgdXBkYXRlZF9ieV9pZDogcm93WzddLFxuICAgICAgZm9ybV9pZDogcm93WzhdLFxuICAgICAgcmVjb3JkX2lkOiByb3dbOV0sXG4gICAgICBjb250ZW50X3R5cGU6IHJvd1sxMF0sXG4gICAgICBmaWxlX3NpemU6IHJvd1sxMV0sXG4gICAgICBtZXRhZGF0YTogcm93WzEyXSAmJiBKU09OLnBhcnNlKHJvd1sxMl0pLFxuICAgICAgY3JlYXRlZF9ieTogcm93WzEzXSxcbiAgICAgIHVwZGF0ZWRfYnk6IHJvd1sxNF0sXG4gICAgICB0cmFjazogcm93WzE1XSAmJiBKU09OLnBhcnNlKHJvd1sxNV0pXG4gICAgfTtcbiAgfVxuXG4gIGdlbmVyYXRlUXVlcnkoc2VxdWVuY2UsIGxpbWl0KSB7XG4gICAgY29uc3Qgc2VxdWVuY2VTdHJpbmcgPSBuZXcgRGF0ZSgrc2VxdWVuY2UpLnRvSVNPU3RyaW5nKCk7XG5cbiAgICByZXR1cm4gYFxuU0VMRUNUXG4gIFwiYXVkaW9faWRcIiBBUyBcImFjY2Vzc19rZXlcIixcbiAgdG9fY2hhcihwZ19jYXRhbG9nLnRpbWV6b25lKCdVVEMnLCBcInJlY29yZHNcIi5cImNyZWF0ZWRfYXRcIiksICdZWVlZLU1NLUREXCJUXCJISDI0Ok1JOlNTXCJaXCInKSBBUyBcImNyZWF0ZWRfYXRcIixcbiAgdG9fY2hhcihwZ19jYXRhbG9nLnRpbWV6b25lKCdVVEMnLCBcInJlY29yZHNcIi5cInVwZGF0ZWRfYXRcIiksICdZWVlZLU1NLUREXCJUXCJISDI0Ok1JOlNTXCJaXCInKSBBUyBcInVwZGF0ZWRfYXRcIixcbiAgXCJ1cGxvYWRlZF9hdFwiIElTIE5PVCBOVUxMIEFTIHVwbG9hZGVkLFxuICBcInN0b3JlZF9hdFwiIElTIE5PVCBOVUxMIEFTIHN0b3JlZCxcbiAgXCJwcm9jZXNzZWRfYXRcIiBJUyBOT1QgTlVMTCBBUyBwcm9jZXNzZWQsXG4gIFwiY3JlYXRlZF9ieV9pZFwiIEFTIFwiY3JlYXRlZF9ieV9pZFwiLFxuICBcInVwZGF0ZWRfYnlfaWRcIiBBUyBcInVwZGF0ZWRfYnlfaWRcIixcbiAgXCJmb3JtX2lkXCIgQVMgXCJmb3JtX2lkXCIsXG4gIFwicmVjb3JkX2lkXCIgQVMgXCJyZWNvcmRfaWRcIixcbiAgXCJjb250ZW50X3R5cGVcIiBBUyBcImNvbnRlbnRfdHlwZVwiLFxuICBcImZpbGVfc2l6ZVwiIEFTIFwiZmlsZV9zaXplXCIsXG4gIFwibWV0YWRhdGFcIiBBUyBcIm1ldGFkYXRhXCIsXG4gIE5VTEwgQVMgXCJjcmVhdGVkX2J5XCIsXG4gIE5VTEwgQVMgXCJ1cGRhdGVkX2J5XCIsXG4gIFwidHJhY2tcIiBBUyBcInRyYWNrXCJcbkZST00gXCJhdWRpb1wiIEFTIFwicmVjb3Jkc1wiXG5XSEVSRVxuICBcInJlY29yZHNcIi51cGRhdGVkX2F0ID4gJyR7c2VxdWVuY2VTdHJpbmd9J1xuT1JERVIgQllcbiAgXCJyZWNvcmRzXCIudXBkYXRlZF9hdCBBU0NcbkxJTUlUICR7bGltaXR9IE9GRlNFVCAwXG5gO1xuICB9XG59XG4iXX0=