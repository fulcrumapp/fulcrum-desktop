"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _task = _interopRequireDefault(require("./task"));

var _downloadRecords = _interopRequireDefault(require("./download-records"));

var _downloadPhotos = _interopRequireDefault(require("./download-photos"));

var _downloadVideos = _interopRequireDefault(require("./download-videos"));

var _downloadAudio = _interopRequireDefault(require("./download-audio"));

var _downloadSignatures = _interopRequireDefault(require("./download-signatures"));

var _app = _interopRequireDefault(require("../../app"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DownloadAllRecords extends _task.default {
  async run({
    dataSource
  }) {
    const forms = await this.account.findActiveForms();
    const includedForms = this.includedForms;

    for (const form of forms) {
      if (includedForms != null && includedForms.indexOf(form.id) === -1) {
        continue;
      }

      await new Promise((resolve, reject) => {
        form.load(dataSource, resolve);
      });
      this.synchronizer.addTask(new _downloadRecords.default({
        form: form,
        ...this.synchronizer.taskParams
      }));
    } // download media here to make sure the tasks are ordered after the records


    this.synchronizer.addTask(new _downloadPhotos.default(this.synchronizer.taskParams));
    this.synchronizer.addTask(new _downloadVideos.default(this.synchronizer.taskParams));
    this.synchronizer.addTask(new _downloadAudio.default(this.synchronizer.taskParams));
    this.synchronizer.addTask(new _downloadSignatures.default(this.synchronizer.taskParams));
  }

  get includedForms() {
    if (_app.default.args.form) {
      return Array.isArray(_app.default.args.form) ? _app.default.args.form : [_app.default.args.form];
    }

    return null;
  }

}

exports.default = DownloadAllRecords;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tYWluL3N5bmMvdGFza3MvZG93bmxvYWQtYWxsLXJlY29yZHMuanMiXSwibmFtZXMiOlsiRG93bmxvYWRBbGxSZWNvcmRzIiwiVGFzayIsInJ1biIsImRhdGFTb3VyY2UiLCJmb3JtcyIsImFjY291bnQiLCJmaW5kQWN0aXZlRm9ybXMiLCJpbmNsdWRlZEZvcm1zIiwiZm9ybSIsImluZGV4T2YiLCJpZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwibG9hZCIsInN5bmNocm9uaXplciIsImFkZFRhc2siLCJEb3dubG9hZFJlY29yZHMiLCJ0YXNrUGFyYW1zIiwiRG93bmxvYWRQaG90b3MiLCJEb3dubG9hZFZpZGVvcyIsIkRvd25sb2FkQXVkaW8iLCJEb3dubG9hZFNpZ25hdHVyZXMiLCJhcHAiLCJhcmdzIiwiQXJyYXkiLCJpc0FycmF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFZSxNQUFNQSxrQkFBTixTQUFpQ0MsYUFBakMsQ0FBc0M7QUFDMUMsUUFBSEMsR0FBRyxDQUFDO0FBQUNDLElBQUFBO0FBQUQsR0FBRCxFQUFlO0FBQ3RCLFVBQU1DLEtBQUssR0FBRyxNQUFNLEtBQUtDLE9BQUwsQ0FBYUMsZUFBYixFQUFwQjtBQUVBLFVBQU1DLGFBQWEsR0FBRyxLQUFLQSxhQUEzQjs7QUFFQSxTQUFLLE1BQU1DLElBQVgsSUFBbUJKLEtBQW5CLEVBQTBCO0FBQ3hCLFVBQUlHLGFBQWEsSUFBSSxJQUFqQixJQUF5QkEsYUFBYSxDQUFDRSxPQUFkLENBQXNCRCxJQUFJLENBQUNFLEVBQTNCLE1BQW1DLENBQUMsQ0FBakUsRUFBb0U7QUFDbEU7QUFDRDs7QUFFRCxZQUFNLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDckNMLFFBQUFBLElBQUksQ0FBQ00sSUFBTCxDQUFVWCxVQUFWLEVBQXNCUyxPQUF0QjtBQUNELE9BRkssQ0FBTjtBQUlBLFdBQUtHLFlBQUwsQ0FBa0JDLE9BQWxCLENBQTBCLElBQUlDLHdCQUFKLENBQW9CO0FBQUNULFFBQUFBLElBQUksRUFBRUEsSUFBUDtBQUFhLFdBQUcsS0FBS08sWUFBTCxDQUFrQkc7QUFBbEMsT0FBcEIsQ0FBMUI7QUFDRCxLQWZxQixDQWlCdEI7OztBQUNBLFNBQUtILFlBQUwsQ0FBa0JDLE9BQWxCLENBQTBCLElBQUlHLHVCQUFKLENBQW1CLEtBQUtKLFlBQUwsQ0FBa0JHLFVBQXJDLENBQTFCO0FBQ0EsU0FBS0gsWUFBTCxDQUFrQkMsT0FBbEIsQ0FBMEIsSUFBSUksdUJBQUosQ0FBbUIsS0FBS0wsWUFBTCxDQUFrQkcsVUFBckMsQ0FBMUI7QUFDQSxTQUFLSCxZQUFMLENBQWtCQyxPQUFsQixDQUEwQixJQUFJSyxzQkFBSixDQUFrQixLQUFLTixZQUFMLENBQWtCRyxVQUFwQyxDQUExQjtBQUNBLFNBQUtILFlBQUwsQ0FBa0JDLE9BQWxCLENBQTBCLElBQUlNLDJCQUFKLENBQXVCLEtBQUtQLFlBQUwsQ0FBa0JHLFVBQXpDLENBQTFCO0FBQ0Q7O0FBRWdCLE1BQWJYLGFBQWEsR0FBRztBQUNsQixRQUFJZ0IsYUFBSUMsSUFBSixDQUFTaEIsSUFBYixFQUFtQjtBQUNqQixhQUFPaUIsS0FBSyxDQUFDQyxPQUFOLENBQWNILGFBQUlDLElBQUosQ0FBU2hCLElBQXZCLElBQStCZSxhQUFJQyxJQUFKLENBQVNoQixJQUF4QyxHQUErQyxDQUFFZSxhQUFJQyxJQUFKLENBQVNoQixJQUFYLENBQXREO0FBQ0Q7O0FBRUQsV0FBTyxJQUFQO0FBQ0Q7O0FBL0JrRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUYXNrIGZyb20gJy4vdGFzayc7XG5pbXBvcnQgRG93bmxvYWRSZWNvcmRzIGZyb20gJy4vZG93bmxvYWQtcmVjb3Jkcyc7XG5pbXBvcnQgRG93bmxvYWRQaG90b3MgZnJvbSAnLi9kb3dubG9hZC1waG90b3MnO1xuaW1wb3J0IERvd25sb2FkVmlkZW9zIGZyb20gJy4vZG93bmxvYWQtdmlkZW9zJztcbmltcG9ydCBEb3dubG9hZEF1ZGlvIGZyb20gJy4vZG93bmxvYWQtYXVkaW8nO1xuaW1wb3J0IERvd25sb2FkU2lnbmF0dXJlcyBmcm9tICcuL2Rvd25sb2FkLXNpZ25hdHVyZXMnO1xuaW1wb3J0IGFwcCBmcm9tICcuLi8uLi9hcHAnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEb3dubG9hZEFsbFJlY29yZHMgZXh0ZW5kcyBUYXNrIHtcbiAgYXN5bmMgcnVuKHtkYXRhU291cmNlfSkge1xuICAgIGNvbnN0IGZvcm1zID0gYXdhaXQgdGhpcy5hY2NvdW50LmZpbmRBY3RpdmVGb3JtcygpO1xuXG4gICAgY29uc3QgaW5jbHVkZWRGb3JtcyA9IHRoaXMuaW5jbHVkZWRGb3JtcztcblxuICAgIGZvciAoY29uc3QgZm9ybSBvZiBmb3Jtcykge1xuICAgICAgaWYgKGluY2x1ZGVkRm9ybXMgIT0gbnVsbCAmJiBpbmNsdWRlZEZvcm1zLmluZGV4T2YoZm9ybS5pZCkgPT09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGZvcm0ubG9hZChkYXRhU291cmNlLCByZXNvbHZlKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnN5bmNocm9uaXplci5hZGRUYXNrKG5ldyBEb3dubG9hZFJlY29yZHMoe2Zvcm06IGZvcm0sIC4uLnRoaXMuc3luY2hyb25pemVyLnRhc2tQYXJhbXN9KSk7XG4gICAgfVxuXG4gICAgLy8gZG93bmxvYWQgbWVkaWEgaGVyZSB0byBtYWtlIHN1cmUgdGhlIHRhc2tzIGFyZSBvcmRlcmVkIGFmdGVyIHRoZSByZWNvcmRzXG4gICAgdGhpcy5zeW5jaHJvbml6ZXIuYWRkVGFzayhuZXcgRG93bmxvYWRQaG90b3ModGhpcy5zeW5jaHJvbml6ZXIudGFza1BhcmFtcykpO1xuICAgIHRoaXMuc3luY2hyb25pemVyLmFkZFRhc2sobmV3IERvd25sb2FkVmlkZW9zKHRoaXMuc3luY2hyb25pemVyLnRhc2tQYXJhbXMpKTtcbiAgICB0aGlzLnN5bmNocm9uaXplci5hZGRUYXNrKG5ldyBEb3dubG9hZEF1ZGlvKHRoaXMuc3luY2hyb25pemVyLnRhc2tQYXJhbXMpKTtcbiAgICB0aGlzLnN5bmNocm9uaXplci5hZGRUYXNrKG5ldyBEb3dubG9hZFNpZ25hdHVyZXModGhpcy5zeW5jaHJvbml6ZXIudGFza1BhcmFtcykpO1xuICB9XG5cbiAgZ2V0IGluY2x1ZGVkRm9ybXMoKSB7XG4gICAgaWYgKGFwcC5hcmdzLmZvcm0pIHtcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFwcC5hcmdzLmZvcm0pID8gYXBwLmFyZ3MuZm9ybSA6IFsgYXBwLmFyZ3MuZm9ybSBdO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXX0=