"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _downloadQuerySequence = _interopRequireDefault(require("./download-query-sequence"));

var _photo = _interopRequireDefault(require("../../models/photo"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DownloadPhotos extends _downloadQuerySequence.default {
  get resourceName() {
    return 'photos';
  }

  get typeName() {
    return 'photo';
  }

  get lastSync() {
    return this.account._lastSyncPhotos;
  }

  get useRestAPI() {
    return false;
  }

  findOrCreate(database, attributes) {
    return _photo.default.findOrCreate(database, {
      account_id: this.account.rowID,
      resource_id: attributes.access_key
    });
  }

  async loadObject(object, attributes) {
    if (object.isDownloaded == null) {
      object.isDownloaded = false;
    }

    await this.lookup(object, attributes.form_id, '_formRowID', 'getForm');
    await this.lookup(object, attributes.created_by_id, '_createdByRowID', 'getUser');
    await this.lookup(object, attributes.updated_by_id, '_updatedByRowID', 'getUser');

    if (object._formRowID) {
      const record = await this.account.findFirstRecord({
        resource_id: attributes.record_id
      });

      if (record) {
        object._recordRowID = record.rowID;
      }
    }

    this.account._lastSyncPhotos = object._updatedAt;
  }

  attributesForQueryRow(row) {
    return {
      access_key: row[0],
      created_at: row[1],
      updated_at: row[2],
      uploaded: row[3],
      stored: row[4],
      processed: row[5],
      created_by_id: row[6],
      updated_by_id: row[7],
      form_id: row[8],
      record_id: row[9],
      content_type: row[10],
      file_size: row[11],
      latitude: row[12],
      longitude: row[13],
      exif: row[14] && JSON.parse(row[14]),
      created_by: row[15],
      updated_by: row[16]
    };
  }

  generateQuery(sequence, limit) {
    const sequenceString = new Date(+sequence).toISOString();
    return `
SELECT
  "photo_id" AS "access_key",
  to_char(pg_catalog.timezone('UTC', "records"."created_at"), 'YYYY-MM-DD"T"HH24:MI:SS"Z"') AS "created_at",
  to_char(pg_catalog.timezone('UTC', "records"."updated_at"), 'YYYY-MM-DD"T"HH24:MI:SS"Z"') AS "updated_at",
  "uploaded_at" IS NOT NULL AS uploaded,
  "stored_at" IS NOT NULL AS stored,
  "processed_at" IS NOT NULL AS processed,
  "created_by_id" AS "created_by_id",
  "updated_by_id" AS "updated_by_id",
  "form_id" AS "form_id",
  "record_id" AS "record_id",
  "content_type" AS "content_type",
  "file_size" AS "file_size",
  "latitude" AS "latitude",
  "longitude" AS "longitude",
  "exif" AS "exif",
  NULL AS "created_by",
  NULL AS "updated_by"
FROM "photos" AS "records"
WHERE
  "records".updated_at > '${sequenceString}'
ORDER BY
  "records".updated_at ASC
LIMIT ${limit} OFFSET 0
`;
  }

}

exports.default = DownloadPhotos;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tYWluL3N5bmMvdGFza3MvZG93bmxvYWQtcGhvdG9zLmpzIl0sIm5hbWVzIjpbIkRvd25sb2FkUGhvdG9zIiwiRG93bmxvYWRRdWVyeVNlcXVlbmNlIiwicmVzb3VyY2VOYW1lIiwidHlwZU5hbWUiLCJsYXN0U3luYyIsImFjY291bnQiLCJfbGFzdFN5bmNQaG90b3MiLCJ1c2VSZXN0QVBJIiwiZmluZE9yQ3JlYXRlIiwiZGF0YWJhc2UiLCJhdHRyaWJ1dGVzIiwiUGhvdG8iLCJhY2NvdW50X2lkIiwicm93SUQiLCJyZXNvdXJjZV9pZCIsImFjY2Vzc19rZXkiLCJsb2FkT2JqZWN0Iiwib2JqZWN0IiwiaXNEb3dubG9hZGVkIiwibG9va3VwIiwiZm9ybV9pZCIsImNyZWF0ZWRfYnlfaWQiLCJ1cGRhdGVkX2J5X2lkIiwiX2Zvcm1Sb3dJRCIsInJlY29yZCIsImZpbmRGaXJzdFJlY29yZCIsInJlY29yZF9pZCIsIl9yZWNvcmRSb3dJRCIsIl91cGRhdGVkQXQiLCJhdHRyaWJ1dGVzRm9yUXVlcnlSb3ciLCJyb3ciLCJjcmVhdGVkX2F0IiwidXBkYXRlZF9hdCIsInVwbG9hZGVkIiwic3RvcmVkIiwicHJvY2Vzc2VkIiwiY29udGVudF90eXBlIiwiZmlsZV9zaXplIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJleGlmIiwiSlNPTiIsInBhcnNlIiwiY3JlYXRlZF9ieSIsInVwZGF0ZWRfYnkiLCJnZW5lcmF0ZVF1ZXJ5Iiwic2VxdWVuY2UiLCJsaW1pdCIsInNlcXVlbmNlU3RyaW5nIiwiRGF0ZSIsInRvSVNPU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFZSxNQUFNQSxjQUFOLFNBQTZCQyw4QkFBN0IsQ0FBbUQ7QUFDaEQsTUFBWkMsWUFBWSxHQUFHO0FBQ2pCLFdBQU8sUUFBUDtBQUNEOztBQUVXLE1BQVJDLFFBQVEsR0FBRztBQUNiLFdBQU8sT0FBUDtBQUNEOztBQUVXLE1BQVJDLFFBQVEs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OztBQUVEZSxFQUFBQSxhQUFhLENBQUNDLFFBQUQsRUFBV0MsS0FBWCxFQUFrQjtBQUM3QixVQUFNQyxjQUFjLEdBQUcsSUFBSUMsSUFBSixDQUFTLENBQUNILFFBQVYsRUFBb0JJLFdBQXBCLEVBQXZCO0FBRUEsV0FBUTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEJGLGNBQWU7QUFDM0M7QUFDQTtBQUNBLFFBQVFELEtBQU07QUFDZCxDQXpCSTtBQTBCRDs7QUE1RitEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERvd25sb2FkUXVlcnlTZXF1ZW5jZSBmcm9tICcuL2Rvd25sb2FkLXF1ZXJ5LXNlcXVlbmNlJztcbmltcG9ydCBQaG90byBmcm9tICcuLi8uLi9tb2RlbHMvcGhvdG8nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEb3dubG9hZFBob3RvcyBleHRlbmRzIERvd25sb2FkUXVlcnlTZXF1ZW5jZSB7XG4gIGdldCByZXNvdXJjZU5hbWUoKSB7XG4gICAgcmV0dXJuICdwaG90b3MnO1xuICB9XG5cbiAgZ2V0IHR5cGVOYW1lKCkge1xuICAgIHJldHVybiAncGhvdG8nO1xuICB9XG5cbiAgZ2V0IGxhc3RTeW5jKCkge1xuICAgIHJldHVybiB0aGlzLmFjY291bnQuX2xhc3RTeW5jUGhvdG9zO1xuICB9XG5cbiAgZ2V0IHVzZVJlc3RBUEkoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZmluZE9yQ3JlYXRlKGRhdGFiYXNlLCBhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIFBob3RvLmZpbmRPckNyZWF0ZShkYXRhYmFzZSwge2FjY291bnRfaWQ6IHRoaXMuYWNjb3VudC5yb3dJRCwgcmVzb3VyY2VfaWQ6IGF0dHJpYnV0ZXMuYWNjZXNzX2tleX0pO1xuICB9XG5cbiAgYXN5bmMgbG9hZE9iamVjdChvYmplY3QsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAob2JqZWN0LmlzRG93bmxvYWRlZCA9PSBudWxsKSB7XG4gICAgICBvYmplY3QuaXNEb3dubG9hZGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5sb29rdXAob2JqZWN0LCBhdHRyaWJ1dGVzLmZvcm1faWQsICdfZm9ybVJvd0lEJywgJ2dldEZvcm0nKTtcbiAgICBhd2FpdCB0aGlzLmxvb2t1cChvYmplY3QsIGF0dHJpYnV0ZXMuY3JlYXRlZF9ieV9pZCwgJ19jcmVhdGVkQnlSb3dJRCcsICdnZXRVc2VyJyk7XG4gICAgYXdhaXQgdGhpcy5sb29rdXAob2JqZWN0LCBhdHRyaWJ1dGVzLnVwZGF0ZWRfYnlfaWQsICdfdXBkYXRlZEJ5Um93SUQnLCAnZ2V0VXNlcicpO1xuXG4gICAgaWYgKG9iamVjdC5fZm9ybVJvd0lEKSB7XG4gICAgICBjb25zdCByZWNvcmQgPSBhd2FpdCB0aGlzLmFjY291bnQuZmluZEZpcnN0UmVjb3JkKHtyZXNvdXJjZV9pZDogYXR0cmlidXRlcy5yZWNvcmRfaWR9KTtcblxuICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICBvYmplY3QuX3JlY29yZFJvd0lEID0gcmVjb3JkLnJvd0lEO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYWNjb3VudC5fbGFzdFN5bmNQaG90b3MgPSBvYmplY3QuX3VwZGF0ZWRBdDtcbiAgfVxuXG4gIGF0dHJpYnV0ZXNGb3JRdWVyeVJvdyhyb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYWNjZXNzX2tleTogcm93WzBdLFxuICAgICAgY3JlYXRlZF9hdDogcm93WzFdLFxuICAgICAgdXBkYXRlZF9hdDogcm93WzJdLFxuICAgICAgdXBsb2FkZWQ6IHJvd1szXSxcbiAgICAgIHN0b3JlZDogcm93WzRdLFxuICAgICAgcHJvY2Vzc2VkOiByb3dbNV0sXG4gICAgICBjcmVhdGVkX2J5X2lkOiByb3dbNl0sXG4gICAgICB1cGRhdGVkX2J5X2lkOiByb3dbN10sXG4gICAgICBmb3JtX2lkOiByb3dbOF0sXG4gICAgICByZWNvcmRfaWQ6IHJvd1s5XSxcbiAgICAgIGNvbnRlbnRfdHlwZTogcm93WzEwXSxcbiAgICAgIGZpbGVfc2l6ZTogcm93WzExXSxcbiAgICAgIGxhdGl0dWRlOiByb3dbMTJdLFxuICAgICAgbG9uZ2l0dWRlOiByb3dbMTNdLFxuICAgICAgZXhpZjogcm93WzE0XSAmJiBKU09OLnBhcnNlKHJvd1sxNF0pLFxuICAgICAgY3JlYXRlZF9ieTogcm93WzE1XSxcbiAgICAgIHVwZGF0ZWRfYnk6IHJvd1sxNl1cbiAgICB9O1xuICB9XG5cbiAgZ2VuZXJhdGVRdWVyeShzZXF1ZW5jZSwgbGltaXQpIHtcbiAgICBjb25zdCBzZXF1ZW5jZVN0cmluZyA9IG5ldyBEYXRlKCtzZXF1ZW5jZSkudG9JU09TdHJpbmcoKTtcblxuICAgIHJldHVybiBgXG5TRUxFQ1RcbiAgXCJwaG90b19pZFwiIEFTIFwiYWNjZXNzX2tleVwiLFxuICB0b19jaGFyKHBnX2NhdGFsb2cudGltZXpvbmUoJ1VUQycsIFwicmVjb3Jkc1wiLlwiY3JlYXRlZF9hdFwiKSwgJ1lZWVktTU0tRERcIlRcIkhIMjQ6TUk6U1NcIlpcIicpIEFTIFwiY3JlYXRlZF9hdFwiLFxuICB0b19jaGFyKHBnX2NhdGFsb2cudGltZXpvbmUoJ1VUQycsIFwicmVjb3Jkc1wiLlwidXBkYXRlZF9hdFwiKSwgJ1lZWVktTU0tRERcIlRcIkhIMjQ6TUk6U1NcIlpcIicpIEFTIFwidXBkYXRlZF9hdFwiLFxuICBcInVwbG9hZGVkX2F0XCIgSVMgTk9UIE5VTEwgQVMgdXBsb2FkZWQsXG4gIFwic3RvcmVkX2F0XCIgSVMgTk9UIE5VTEwgQVMgc3RvcmVkLFxuICBcInByb2Nlc3NlZF9hdFwiIElTIE5PVCBOVUxMIEFTIHByb2Nlc3NlZCxcbiAgXCJjcmVhdGVkX2J5X2lkXCIgQVMgXCJjcmVhdGVkX2J5X2lkXCIsXG4gIFwidXBkYXRlZF9ieV9pZFwiIEFTIFwidXBkYXRlZF9ieV9pZFwiLFxuICBcImZvcm1faWRcIiBBUyBcImZvcm1faWRcIixcbiAgXCJyZWNvcmRfaWRcIiBBUyBcInJlY29yZF9pZFwiLFxuICBcImNvbnRlbnRfdHlwZVwiIEFTIFwiY29udGVudF90eXBlXCIsXG4gIFwiZmlsZV9zaXplXCIgQVMgXCJmaWxlX3NpemVcIixcbiAgXCJsYXRpdHVkZVwiIEFTIFwibGF0aXR1ZGVcIixcbiAgXCJsb25naXR1ZGVcIiBBUyBcImxvbmdpdHVkZVwiLFxuICBcImV4aWZcIiBBUyBcImV4aWZcIixcbiAgTlVMTCBBUyBcImNyZWF0ZWRfYnlcIixcbiAgTlVMTCBBUyBcInVwZGF0ZWRfYnlcIlxuRlJPTSBcInBob3Rvc1wiIEFTIFwicmVjb3Jkc1wiXG5XSEVSRVxuICBcInJlY29yZHNcIi51cGRhdGVkX2F0ID4gJyR7c2VxdWVuY2VTdHJpbmd9J1xuT1JERVIgQllcbiAgXCJyZWNvcmRzXCIudXBkYXRlZF9hdCBBU0NcbkxJTUlUICR7bGltaXR9IE9GRlNFVCAwXG5gO1xuICB9XG59XG4iXX0=