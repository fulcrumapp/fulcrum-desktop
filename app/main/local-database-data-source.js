"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _form = _interopRequireDefault(require("./models/form"));

var _choiceList = _interopRequireDefault(require("./models/choice-list"));

var _classificationSet = _interopRequireDefault(require("./models/classification-set"));

var _membership = _interopRequireDefault(require("./models/membership"));

var _role = _interopRequireDefault(require("./models/role"));

var _project = _interopRequireDefault(require("./models/project"));

var _changeset = _interopRequireDefault(require("./models/changeset"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class LocalDatabaseDataSource {
  constructor(account) {
    this.account = account;
    this.db = account.db;
    this.choiceLists = null;
    this.classificationSets = null;
    this.forms = null;
    this.memberships = null;
    this.projects = null;
    this.roles = null;
  }

  async load(db) {}

  async loadObjects(db, type, handler) {
    const objects = await type.findAll(db, {
      account_id: this.account.rowID
    });
    const map = {};

    for (const object of objects) {
      if (handler) {
        handler(map, object);
      } else {
        map[object.id] = object;
      }
    }

    return map;
  }

  async loadObject(db, type, id, handler) {
    const object = await type.findFirst(db, {
      account_id: this.account.rowID,
      resource_id: id
    });

    if (handler) {
      handler(object);
    }

    return object;
  }

  invalidate(collection) {
    this[collection] = null;
  }

  lazyLoad(collection, id, type, handler, callback) {
    if (this[collection] == null) {
      this.loadObjects(this.db, type, handler).then(objects => {
        this[collection] = objects;
        callback(null, this[collection][id]);
      });
      return;
    }

    callback(null, this[collection][id]);
  }

  getProject(id, callback) {
    return this.lazyLoad('projects', id, _project.default, null, callback);
  }

  getChoiceList(id, callback) {
    return this.lazyLoad('choiceLists', id, _choiceList.default, null, callback);
  }

  getClassificationSet(id, callback) {
    return this.lazyLoad('classificationSets', id, _classificationSet.default, null, callback);
  }

  getForm(id, callback) {
    return this.lazyLoad('forms', id, _form.default, null, callback);
  }

  getUser(id, callback) {
    return this.lazyLoad('memberships', id, _membership.default, (map, object) => {
      map[object._userID] = object;
    }, callback);
  }

  getRole(id, callback) {
    return this.lazyLoad('roles', id, _role.default, null, callback);
  }

  getChangeset(id, callback) {
    this.loadObject(this.db, _changeset.default, id).then(object => {
      callback(null, object);
    });
  }

}

exports.default = LocalDatabaseDataSource;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYWluL2xvY2FsLWRhdGFiYXNlLWRhdGEtc291cmNlLmpzIl0sIm5hbWVzIjpbIkxvY2FsRGF0YWJhc2VEYXRhU291cmNlIiwiY29uc3RydWN0b3IiLCJhY2NvdW50IiwiZGIiLCJjaG9pY2VMaXN0cyIsImNsYXNzaWZpY2F0aW9uU2V0cyIsImZvcm1zIiwibWVtYmVyc2hpcHMiLCJwcm9qZWN0cyIsInJvbGVzIiwibG9hZCIsImxvYWRPYmplY3RzIiwidHlwZSIsImhhbmRsZXIiLCJvYmplY3RzIiwiZmluZEFsbCIsImFjY291bnRfaWQiLCJyb3dJRCIsIm1hcCIsIm9iamVjdCIsImlkIiwibG9hZE9iamVjdCIsImZpbmRGaXJzdCIsInJlc291cmNlX2lkIiwiaW52YWxpZGF0ZSIsImNvbGxlY3Rpb24iLCJsYXp5TG9hZCIsImNhbGxiYWNrIiwidGhlbiIsImdldFByb2plY3QiLCJQcm9qZWN0IiwiZ2V0Q2hvaWNlTGlzdCIsIkNob2ljZUxpc3QiLCJnZXRDbGFzc2lmaWNhdGlvblNldCIsIkNsYXNzaWZpY2F0aW9uU2V0IiwiZ2V0Rm9ybSIsIkZvcm0iLCJnZXRVc2VyIiwiTWVtYmVyc2hpcCIsIl91c2VySUQiLCJnZXRSb2xlIiwiUm9sZSIsImdldENoYW5nZXNldCIsIkNoYW5nZXNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRWUsTUFBTUEsdUJBQU4sQ0FBOEI7QUFDM0NDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVO0FBQ25CLFNBQUtBLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFNBQUtDLEVBQUwsR0FBVUQsT0FBTyxDQUFDQyxFQUFsQjtBQUNBLFNBQUtDLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxTQUFLQyxrQkFBTCxHQUEwQixJQUExQjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxJQUFiO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixJQUFuQjtBQUNBLFNB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aUMsSUFBakMsRUFBdUNULFFBQXZDLENBQVA7QUFDRDs7QUFFRFUsRUFBQUEsT0FBTyxDQUFDakIsRUFBRCxFQUFLTyxRQUFMLEVBQWU7QUFDcEIsV0FBTyxLQUFLRCxRQUFMLENBQWMsYUFBZCxFQUE2Qk4sRUFBN0IsRUFBaUNrQixtQkFBakMsRUFBNkMsQ0FBQ3BCLEdBQUQsRUFBTUMsTUFBTixLQUFpQjtBQUNuRUQsTUFBQUEsR0FBRyxDQUFDQyxNQUFNLENBQUNvQixPQUFSLENBQUgsR0FBc0JwQixNQUF0QjtBQUNELEtBRk0sRUFFSlEsUUFGSSxDQUFQO0FBR0Q7O0FBRURhLEVBQUFBLE9BQU8sQ0FBQ3BCLEVBQUQsRUFBS08sUUFBTCxFQUFlO0FBQ3BCLFdBQU8sS0FBS0QsUUFBTCxDQUFjLE9BQWQsRUFBdUJOLEVBQXZCLEVBQTJCcUIsYUFBM0IsRUFBaUMsSUFBakMsRUFBdUNkLFFBQXZDLENBQVA7QUFDRDs7QUFFRGUsRUFBQUEsWUFBWSxDQUFDdEIsRUFBRCxFQUFLTyxRQUFMLEVBQWU7QUFDekIsU0FBS04sVUFBTCxDQUFnQixLQUFLbEIsRUFBckIsRUFBeUJ3QyxrQkFBekIsRUFBb0N2QixFQUFwQyxFQUF3Q1EsSUFBeEMsQ0FBOENULE1BQUQsSUFBWTtBQUN2RFEsTUFBQUEsUUFBUSxDQUFDLElBQUQsRUFBT1IsTUFBUCxDQUFSO0FBQ0QsS0FGRDtBQUdEOztBQXhGMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRm9ybSBmcm9tICcuL21vZGVscy9mb3JtJztcbmltcG9ydCBDaG9pY2VMaXN0IGZyb20gJy4vbW9kZWxzL2Nob2ljZS1saXN0JztcbmltcG9ydCBDbGFzc2lmaWNhdGlvblNldCBmcm9tICcuL21vZGVscy9jbGFzc2lmaWNhdGlvbi1zZXQnO1xuaW1wb3J0IE1lbWJlcnNoaXAgZnJvbSAnLi9tb2RlbHMvbWVtYmVyc2hpcCc7XG5pbXBvcnQgUm9sZSBmcm9tICcuL21vZGVscy9yb2xlJztcbmltcG9ydCBQcm9qZWN0IGZyb20gJy4vbW9kZWxzL3Byb2plY3QnO1xuaW1wb3J0IENoYW5nZXNldCBmcm9tICcuL21vZGVscy9jaGFuZ2VzZXQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbERhdGFiYXNlRGF0YVNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yKGFjY291bnQpIHtcbiAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgIHRoaXMuZGIgPSBhY2NvdW50LmRiO1xuICAgIHRoaXMuY2hvaWNlTGlzdHMgPSBudWxsO1xuICAgIHRoaXMuY2xhc3NpZmljYXRpb25TZXRzID0gbnVsbDtcbiAgICB0aGlzLmZvcm1zID0gbnVsbDtcbiAgICB0aGlzLm1lbWJlcnNoaXBzID0gbnVsbDtcbiAgICB0aGlzLnByb2plY3RzID0gbnVsbDtcbiAgICB0aGlzLnJvbGVzID0gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoZGIpIHtcbiAgfVxuXG4gIGFzeW5jIGxvYWRPYmplY3RzKGRiLCB0eXBlLCBoYW5kbGVyKSB7XG4gICAgY29uc3Qgb2JqZWN0cyA9IGF3YWl0IHR5cGUuZmluZEFsbChkYiwge2FjY291bnRfaWQ6IHRoaXMuYWNjb3VudC5yb3dJRH0pO1xuXG4gICAgY29uc3QgbWFwID0ge307XG5cbiAgICBmb3IgKGNvbnN0IG9iamVjdCBvZiBvYmplY3RzKSB7XG4gICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICBoYW5kbGVyKG1hcCwgb2JqZWN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcFtvYmplY3QuaWRdID0gb2JqZWN0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICBhc3luYyBsb2FkT2JqZWN0KGRiLCB0eXBlLCBpZCwgaGFuZGxlcikge1xuICAgIGNvbnN0IG9iamVjdCA9IGF3YWl0IHR5cGUuZmluZEZpcnN0KGRiLCB7YWNjb3VudF9pZDogdGhpcy5hY2NvdW50LnJvd0lELCByZXNvdXJjZV9pZDogaWR9KTtcblxuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVyKG9iamVjdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIGludmFsaWRhdGUoY29sbGVjdGlvbikge1xuICAgIHRoaXNbY29sbGVjdGlvbl0gPSBudWxsO1xuICB9XG5cbiAgbGF6eUxvYWQoY29sbGVjdGlvbiwgaWQsIHR5cGUsIGhhbmRsZXIsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXNbY29sbGVjdGlvbl0gPT0gbnVsbCkge1xuICAgICAgdGhpcy5sb2FkT2JqZWN0cyh0aGlzLmRiLCB0eXBlLCBoYW5kbGVyKS50aGVuKChvYmplY3RzKSA9PiB7XG4gICAgICAgIHRoaXNbY29sbGVjdGlvbl0gPSBvYmplY3RzO1xuICAgICAgICBjYWxsYmFjayhudWxsLCB0aGlzW2NvbGxlY3Rpb25dW2lkXSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKG51bGwsIHRoaXNbY29sbGVjdGlvbl1baWRdKTtcbiAgfVxuXG4gIGdldFByb2plY3QoaWQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMubGF6eUxvYWQoJ3Byb2plY3RzJywgaWQsIFByb2plY3QsIG51bGwsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGdldENob2ljZUxpc3QoaWQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMubGF6eUxvYWQoJ2Nob2ljZUxpc3RzJywgaWQsIENob2ljZUxpc3QsIG51bGwsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGdldENsYXNzaWZpY2F0aW9uU2V0KGlkLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmxhenlMb2FkKCdjbGFzc2lmaWNhdGlvblNldHMnLCBpZCwgQ2xhc3NpZmljYXRpb25TZXQsIG51bGwsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGdldEZvcm0oaWQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMubGF6eUxvYWQoJ2Zvcm1zJywgaWQsIEZvcm0sIG51bGwsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGdldFVzZXIoaWQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMubGF6eUxvYWQoJ21lbWJlcnNoaXBzJywgaWQsIE1lbWJlcnNoaXAsIChtYXAsIG9iamVjdCkgPT4ge1xuICAgICAgbWFwW29iamVjdC5fdXNlcklEXSA9IG9iamVjdDtcbiAgICB9LCBjYWxsYmFjayk7XG4gIH1cblxuICBnZXRSb2xlKGlkLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmxhenlMb2FkKCdyb2xlcycsIGlkLCBSb2xlLCBudWxsLCBjYWxsYmFjayk7XG4gIH1cblxuICBnZXRDaGFuZ2VzZXQoaWQsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5sb2FkT2JqZWN0KHRoaXMuZGIsIENoYW5nZXNldCwgaWQpLnRoZW4oKG9iamVjdCkgPT4ge1xuICAgICAgY2FsbGJhY2sobnVsbCwgb2JqZWN0KTtcbiAgICB9KTtcbiAgfVxufVxuXG4iXX0=