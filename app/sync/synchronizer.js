"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _downloadRoles = _interopRequireDefault(require("./tasks/download-roles"));

var _downloadMemberships = _interopRequireDefault(require("./tasks/download-memberships"));

var _downloadChoiceLists = _interopRequireDefault(require("./tasks/download-choice-lists"));

var _downloadClassificationSets = _interopRequireDefault(require("./tasks/download-classification-sets"));

var _downloadProjects = _interopRequireDefault(require("./tasks/download-projects"));

var _downloadForms = _interopRequireDefault(require("./tasks/download-forms"));

var _downloadChangesets = _interopRequireDefault(require("./tasks/download-changesets"));

var _downloadAllRecords = _interopRequireDefault(require("./tasks/download-all-records"));

var _app = _interopRequireDefault(require("../app"));

var _exec = _interopRequireDefault(require("../utils/exec"));

var _client = _interopRequireDefault(require("../api/client"));

var _humanizeDuration = _interopRequireDefault(require("humanize-duration"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Synchronizer {
  constructor() {
    this._tasks = [];
    this._recordCount = 0;
  }

  addTask(task) {
    this._tasks.push(task);
  }

  popTask() {
    return this._tasks.shift();
  }

  incrementRecordCount() {
    this._recordCount++;
  }

  async run(account, formName, dataSource, {
    fullSync
  }) {
    const start = new Date().getTime();
    this._recordCount = 0;
    const response = await _client.default.getSync(account);
    this.syncState = fullSync ? [] : JSON.parse(response.body).resources;
    this.taskParams = {
      synchronizer: this,
      syncState: this.syncState
    };
    this.addTask(new _downloadRoles.default(this.taskParams));
    this.addTask(new _downloadMemberships.default(this.taskParams));
    this.addTask(new _downloadChoiceLists.default(this.taskParams));
    this.addTask(new _downloadClassificationSets.default(this.taskParams));
    this.addTask(new _downloadProjects.default(this.taskParams));
    this.addTask(new _downloadForms.default(this.taskParams));
    this.addTask(new _downloadChangesets.default(this.taskParams));
    this.addTask(new _downloadAllRecords.default(this.taskParams));
    await dataSource.source.load(account.db);
    await _app.default.emit('sync:start', {
      account,
      tasks: this._tasks
    });

    do {
      const task = this.popTask();
      await task.execute({
        account,
        dataSource
      });
    } while (this._tasks.length);

    await _app.default.emit('sync:finish', {
      account
    });

    if (_app.default.args.afterSyncCommand) {
      await (0, _exec.default)(_app.default.args.afterSyncCommand, this.afterSyncCommandOptions, 'after-sync');
    }

    fulcrum.logger.log('Synced'.green, (0, _humanizeDuration.default)(new Date().getTime() - start));
  }

  get afterSyncCommandOptions() {
    const options = {
      changedRecordCount: this._recordCount,
      args: _app.default.args
    };
    return {
      env: {
        FULCRUM_PAYLOAD: JSON.stringify(options),
        FULCRUM_CHANGED_RECORD_COUNT: options.recordCount
      }
    };
  }

}

exports.default = Synchronizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zeW5jL3N5bmNocm9uaXplci5qcyJdLCJuYW1lcyI6WyJTeW5jaHJvbml6ZXIiLCJjb25zdHJ1Y3RvciIsIl90YXNrcyIsIl9yZWNvcmRDb3VudCIsImFkZFRhc2siLCJ0YXNrIiwicHVzaCIsInBvcFRhc2siLCJzaGlmdCIsImluY3JlbWVudFJlY29yZENvdW50IiwicnVuIiwiYWNjb3VudCIsImZvcm1OYW1lIiwiZGF0YVNvdXJjZSIsImZ1bGxTeW5jIiwic3RhcnQiLCJEYXRlIiwiZ2V0VGltZSIsInJlc3BvbnNlIiwiQ2xpZW50IiwiZ2V0U3luYyIsInN5bmNTdGF0ZSIsIkpTT04iLCJwYXJzZSIsImJvZHkiLCJyZXNvdXJjZXMiLCJ0YXNrUGFyYW1zIiwic3luY2hyb25pemVyIiwiRG93bmxvYWRSb2xlcyIsIkRvd25sb2FkTWVtYmVyc2hpcHMiLCJEb3dubG9hZENob2ljZUxpc3RzIiwiRG93bmxvYWRDbGFzc2lmaWNhdGlvblNldHMiLCJEb3dubG9hZFByb2plY3RzIiwiRG93bmxvYWRGb3JtcyIsIkRvd25sb2FkQ2hhbmdlc2V0cyIsIkRvd25sb2FkQWxsUmVjb3JkcyIsInNvdXJjZSIsImxvYWQiLCJkYiIsImFwcCIsImVtaXQiLCJ0YXNrcyIsImV4ZWN1dGUiLCJsZW5ndGgiLCJhcmdzIiwiYWZ0ZXJTeW5jQ29tbWFuZCIsImFmdGVyU3luY0NvbW1hbmRPcHRpb25zIiwiZnVsY3J1bSIsImxvZ2dlciIsImxvZyIsImdyZWVuIiwib3B0aW9ucyIsImNoYW5nZWRSZWNvcmRDb3VudCIsImVudiIsIkZVTENSVU1fUEFZTE9BRCIsInN0cmluZ2lmeSIsIkZVTENSVU1fQ0hBTkdFRF9SRUNPUkRfQ09VTlQiLCJyZWNvcmRDb3VudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUVBOzs7O0FBRWUsTUFBTUEsWUFBTixD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QUFFMEIsTUFBdkIrQix1QkFBdUIsR0FBRztBQUM1QixVQUFNSyxPQUFPLEdBQUc7QUFDZEMsTUFBQUEsa0JBQWtCLEVBQUUsS0FBS2pELFlBRFg7QUFFZHlDLE1BQUFBLElBQUksRUFBRUwsYUFBSUs7QUFGSSxLQUFoQjtBQUtBLFdBQU87QUFDTFMsTUFBQUEsR0FBRyxFQUFFO0FBQ0hDLFFBQUFBLGVBQWUsRUFBRWhDLElBQUksQ0FBQ2lDLFNBQUwsQ0FBZUosT0FBZixDQURkO0FBRUhLLFFBQUFBLDRCQUE0QixFQUFFTCxPQUFPLENBQUNNO0FBRm5DO0FBREEsS0FBUDtBQU1EOztBQXBFK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRG93bmxvYWRSb2xlcyBmcm9tICcuL3Rhc2tzL2Rvd25sb2FkLXJvbGVzJztcbmltcG9ydCBEb3dubG9hZE1lbWJlcnNoaXBzIGZyb20gJy4vdGFza3MvZG93bmxvYWQtbWVtYmVyc2hpcHMnO1xuaW1wb3J0IERvd25sb2FkQ2hvaWNlTGlzdHMgZnJvbSAnLi90YXNrcy9kb3dubG9hZC1jaG9pY2UtbGlzdHMnO1xuaW1wb3J0IERvd25sb2FkQ2xhc3NpZmljYXRpb25TZXRzIGZyb20gJy4vdGFza3MvZG93bmxvYWQtY2xhc3NpZmljYXRpb24tc2V0cyc7XG5pbXBvcnQgRG93bmxvYWRQcm9qZWN0cyBmcm9tICcuL3Rhc2tzL2Rvd25sb2FkLXByb2plY3RzJztcbmltcG9ydCBEb3dubG9hZEZvcm1zIGZyb20gJy4vdGFza3MvZG93bmxvYWQtZm9ybXMnO1xuaW1wb3J0IERvd25sb2FkQ2hhbmdlc2V0cyBmcm9tICcuL3Rhc2tzL2Rvd25sb2FkLWNoYW5nZXNldHMnO1xuaW1wb3J0IERvd25sb2FkQWxsUmVjb3JkcyBmcm9tICcuL3Rhc2tzL2Rvd25sb2FkLWFsbC1yZWNvcmRzJztcbmltcG9ydCBhcHAgZnJvbSAnLi4vYXBwJztcbmltcG9ydCBleGVjIGZyb20gJy4uL3V0aWxzL2V4ZWMnO1xuXG5pbXBvcnQgQ2xpZW50IGZyb20gJy4uL2FwaS9jbGllbnQnO1xuXG5pbXBvcnQgaHVtYW5pemVEdXJhdGlvbiBmcm9tICdodW1hbml6ZS1kdXJhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN5bmNocm9uaXplciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3Rhc2tzID0gW107XG4gICAgdGhpcy5fcmVjb3JkQ291bnQgPSAwO1xuICB9XG5cbiAgYWRkVGFzayh0YXNrKSB7XG4gICAgdGhpcy5fdGFza3MucHVzaCh0YXNrKTtcbiAgfVxuXG4gIHBvcFRhc2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Rhc2tzLnNoaWZ0KCk7XG4gIH1cblxuICBpbmNyZW1lbnRSZWNvcmRDb3VudCgpIHtcbiAgICB0aGlzLl9yZWNvcmRDb3VudCsrO1xuICB9XG5cbiAgYXN5bmMgcnVuKGFjY291bnQsIGZvcm1OYW1lLCBkYXRhU291cmNlLCB7ZnVsbFN5bmN9KSB7XG4gICAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIHRoaXMuX3JlY29yZENvdW50ID0gMDtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQ2xpZW50LmdldFN5bmMoYWNjb3VudCk7XG5cbiAgICB0aGlzLnN5bmNTdGF0ZSA9IGZ1bGxTeW5jID8gW10gOiBKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpLnJlc291cmNlcztcbiAgICB0aGlzLnRhc2tQYXJhbXMgPSB7IHN5bmNocm9uaXplcjogdGhpcywgc3luY1N0YXRlOiB0aGlzLnN5bmNTdGF0ZSB9O1xuXG4gICAgdGhpcy5hZGRUYXNrKG5ldyBEb3dubG9hZFJvbGVzKHRoaXMudGFza1BhcmFtcykpO1xuICAgIHRoaXMuYWRkVGFzayhuZXcgRG93bmxvYWRNZW1iZXJzaGlwcyh0aGlzLnRhc2tQYXJhbXMpKTtcbiAgICB0aGlzLmFkZFRhc2sobmV3IERvd25sb2FkQ2hvaWNlTGlzdHModGhpcy50YXNrUGFyYW1zKSk7XG4gICAgdGhpcy5hZGRUYXNrKG5ldyBEb3dubG9hZENsYXNzaWZpY2F0aW9uU2V0cyh0aGlzLnRhc2tQYXJhbXMpKTtcbiAgICB0aGlzLmFkZFRhc2sobmV3IERvd25sb2FkUHJvamVjdHModGhpcy50YXNrUGFyYW1zKSk7XG4gICAgdGhpcy5hZGRUYXNrKG5ldyBEb3dubG9hZEZvcm1zKHRoaXMudGFza1BhcmFtcykpO1xuICAgIHRoaXMuYWRkVGFzayhuZXcgRG93bmxvYWRDaGFuZ2VzZXRzKHRoaXMudGFza1BhcmFtcykpO1xuICAgIHRoaXMuYWRkVGFzayhuZXcgRG93bmxvYWRBbGxSZWNvcmRzKHRoaXMudGFza1BhcmFtcykpO1xuXG4gICAgYXdhaXQgZGF0YVNvdXJjZS5zb3VyY2UubG9hZChhY2NvdW50LmRiKTtcblxuICAgIGF3YWl0IGFwcC5lbWl0KCdzeW5jOnN0YXJ0Jywge2FjY291bnQsIHRhc2tzOiB0aGlzLl90YXNrc30pO1xuXG4gICAgZG8ge1xuICAgICAgY29uc3QgdGFzayA9IHRoaXMucG9wVGFzaygpO1xuXG4gICAgICBhd2FpdCB0YXNrLmV4ZWN1dGUoe2FjY291bnQsIGRhdGFTb3VyY2V9KTtcbiAgICB9IHdoaWxlICh0aGlzLl90YXNrcy5sZW5ndGgpO1xuXG4gICAgYXdhaXQgYXBwLmVtaXQoJ3N5bmM6ZmluaXNoJywge2FjY291bnR9KTtcblxuICAgIGlmIChhcHAuYXJncy5hZnRlclN5bmNDb21tYW5kKSB7XG4gICAgICBhd2FpdCBleGVjKGFwcC5hcmdzLmFmdGVyU3luY0NvbW1hbmQsIHRoaXMuYWZ0ZXJTeW5jQ29tbWFuZE9wdGlvbnMsICdhZnRlci1zeW5jJyk7XG4gICAgfVxuXG4gICAgZnVsY3J1bS5sb2dnZXIubG9nKCdTeW5jZWQnLmdyZWVuLCBodW1hbml6ZUR1cmF0aW9uKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnQpKTtcbiAgfVxuXG4gIGdldCBhZnRlclN5bmNDb21tYW5kT3B0aW9ucygpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgY2hhbmdlZFJlY29yZENvdW50OiB0aGlzLl9yZWNvcmRDb3VudCxcbiAgICAgIGFyZ3M6IGFwcC5hcmdzXG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBlbnY6IHtcbiAgICAgICAgRlVMQ1JVTV9QQVlMT0FEOiBKU09OLnN0cmluZ2lmeShvcHRpb25zKSxcbiAgICAgICAgRlVMQ1JVTV9DSEFOR0VEX1JFQ09SRF9DT1VOVDogb3B0aW9ucy5yZWNvcmRDb3VudFxuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiJdfQ==