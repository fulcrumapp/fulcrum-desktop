"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _downloadQuerySequence = _interopRequireDefault(require("./download-query-sequence"));

var _photo = _interopRequireDefault(require("../../models/photo"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DownloadPhotos extends _downloadQuerySequence.default {
  get resourceName() {
    return 'photos';
  }

  get typeName() {
    return 'photo';
  }

  get lastSync() {
    return this.account._lastSyncPhotos;
  }

  get useRestAPI() {
    return false;
  }

  findOrCreate(database, attributes) {
    return _photo.default.findOrCreate(database, {
      account_id: this.account.rowID,
      resource_id: attributes.access_key
    });
  }

  async loadObject(object, attributes) {
    if (object.isDownloaded == null) {
      object.isDownloaded = false;
    }

    await this.lookup(object, attributes.form_id, '_formRowID', 'getForm');
    await this.lookup(object, attributes.created_by_id, '_createdByRowID', 'getUser');
    await this.lookup(object, attributes.updated_by_id, '_updatedByRowID', 'getUser');

    if (object._formRowID) {
      const record = await this.account.findFirstRecord({
        resource_id: attributes.record_id
      });

      if (record) {
        object._recordRowID = record.rowID;
      }
    }

    this.account._lastSyncPhotos = object._updatedAt;
  }

  attributesForQueryRow(row) {
    return {
      access_key: row[0],
      created_at: row[1],
      updated_at: row[2],
      uploaded: row[3],
      stored: row[4],
      processed: row[5],
      created_by_id: row[6],
      updated_by_id: row[7],
      form_id: row[8],
      record_id: row[9],
      content_type: row[10],
      file_size: row[11],
      latitude: row[12],
      longitude: row[13],
      exif: row[14] && JSON.parse(row[14]),
      created_by: row[15],
      updated_by: row[16]
    };
  }

  generateQuery(sequence, limit) {
    const sequenceString = new Date(+sequence).toISOString();
    return `
SELECT
  "photo_id" AS "access_key",
  to_char(pg_catalog.timezone('UTC', "records"."created_at"), 'YYYY-MM-DD"T"HH24:MI:SS"Z"') AS "created_at",
  to_char(pg_catalog.timezone('UTC', "records"."updated_at"), 'YYYY-MM-DD"T"HH24:MI:SS"Z"') AS "updated_at",
  "uploaded_at" IS NOT NULL AS uploaded,
  "stored_at" IS NOT NULL AS stored,
  "processed_at" IS NOT NULL AS processed,
  "created_by_id" AS "created_by_id",
  "updated_by_id" AS "updated_by_id",
  "form_id" AS "form_id",
  "record_id" AS "record_id",
  "content_type" AS "content_type",
  "file_size" AS "file_size",
  "latitude" AS "latitude",
  "longitude" AS "longitude",
  "exif" AS "exif",
  NULL AS "created_by",
  NULL AS "updated_by"
FROM "photos" AS "records"
WHERE
  "records".updated_at > '${sequenceString}'
ORDER BY
  "records".updated_at ASC
LIMIT ${limit} OFFSET 0
`;
  }

}

exports.default = DownloadPhotos;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zeW5jL3Rhc2tzL2Rvd25sb2FkLXBob3Rvcy5qcyJdLCJuYW1lcyI6WyJEb3dubG9hZFBob3RvcyIsIkRvd25sb2FkUXVlcnlTZXF1ZW5jZSIsInJlc291cmNlTmFtZSIsInR5cGVOYW1lIiwibGFzdFN5bmMiLCJhY2NvdW50IiwiX2xhc3RTeW5jUGhvdG9zIiwidXNlUmVzdEFQSSIsImZpbmRPckNyZWF0ZSIsImRhdGFiYXNlIiwiYXR0cmlidXRlcyIsIlBob3RvIiwiYWNjb3VudF9pZCIsInJvd0lEIiwicmVzb3VyY2VfaWQiLCJhY2Nlc3Nfa2V5IiwibG9hZE9iamVjdCIsIm9iamVjdCIsImlzRG93bmxvYWRlZCIsImxvb2t1cCIsImZvcm1faWQiLCJjcmVhdGVkX2J5X2lkIiwidXBkYXRlZF9ieV9pZCIsIl9mb3JtUm93SUQiLCJyZWNvcmQiLCJmaW5kRmlyc3RSZWNvcmQiLCJyZWNvcmRfaWQiLCJfcmVjb3JkUm93SUQiLCJfdXBkYXRlZEF0IiwiYXR0cmlidXRlc0ZvclF1ZXJ5Um93Iiwicm93IiwiY3JlYXRlZF9hdCIsInVwZGF0ZWRfYXQiLCJ1cGxvYWRlZCIsInN0b3JlZCIsInByb2Nlc3NlZCIsImNvbnRlbnRfdHlwZSIsImZpbGVfc2l6ZSIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiZXhpZiIsIkpTT04iLCJwYXJzZSIsImNyZWF0ZWRfYnkiLCJ1cGRhdGVkX2J5IiwiZ2VuZXJhdGVRdWVyeSIsInNlcXVlbmNlIiwibGltaXQiLCJzZXF1ZW5jZVN0cmluZyIsIkRhdGUiLCJ0b0lTT1N0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRWUsTUFBTUEsY0FBTixTQUE2QkMsOEJBQTdCLENBQW1EO0FBQ2hELE1BQVpDLFlBQVksR0FBRztBQUNqQixXQUFPLFFBQVA7QUFDRDs7QUFFVyxNQUFSQyxRQUFRLEdBQUc7QUFDYixXQUFPLE9BQVA7QUFDRDs7QUFFVyxNQUFSQyxRQUFRLEdBQUc7QUFD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RUFBQUEsYUFBYSxDQUFDQyxRQUFELEVBQVdDLEtBQVgsRUFBa0I7QUFDN0IsVUFBTUMsY0FBYyxHQUFHLElBQUlDLElBQUosQ0FBUyxDQUFDSCxRQUFWLEVBQW9CSSxXQUFwQixFQUF2QjtBQUVBLFdBQVE7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCRixjQUFlO0FBQzNDO0FBQ0E7QUFDQSxRQUFRRCxLQUFNO0FBQ2QsQ0F6Qkk7QUEwQkQ7O0FBNUYrRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEb3dubG9hZFF1ZXJ5U2VxdWVuY2UgZnJvbSAnLi9kb3dubG9hZC1xdWVyeS1zZXF1ZW5jZSc7XG5pbXBvcnQgUGhvdG8gZnJvbSAnLi4vLi4vbW9kZWxzL3Bob3RvJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG93bmxvYWRQaG90b3MgZXh0ZW5kcyBEb3dubG9hZFF1ZXJ5U2VxdWVuY2Uge1xuICBnZXQgcmVzb3VyY2VOYW1lKCkge1xuICAgIHJldHVybiAncGhvdG9zJztcbiAgfVxuXG4gIGdldCB0eXBlTmFtZSgpIHtcbiAgICByZXR1cm4gJ3Bob3RvJztcbiAgfVxuXG4gIGdldCBsYXN0U3luYygpIHtcbiAgICByZXR1cm4gdGhpcy5hY2NvdW50Ll9sYXN0U3luY1Bob3RvcztcbiAgfVxuXG4gIGdldCB1c2VSZXN0QVBJKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZpbmRPckNyZWF0ZShkYXRhYmFzZSwgYXR0cmlidXRlcykge1xuICAgIHJldHVybiBQaG90by5maW5kT3JDcmVhdGUoZGF0YWJhc2UsIHthY2NvdW50X2lkOiB0aGlzLmFjY291bnQucm93SUQsIHJlc291cmNlX2lkOiBhdHRyaWJ1dGVzLmFjY2Vzc19rZXl9KTtcbiAgfVxuXG4gIGFzeW5jIGxvYWRPYmplY3Qob2JqZWN0LCBhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKG9iamVjdC5pc0Rvd25sb2FkZWQgPT0gbnVsbCkge1xuICAgICAgb2JqZWN0LmlzRG93bmxvYWRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMubG9va3VwKG9iamVjdCwgYXR0cmlidXRlcy5mb3JtX2lkLCAnX2Zvcm1Sb3dJRCcsICdnZXRGb3JtJyk7XG4gICAgYXdhaXQgdGhpcy5sb29rdXAob2JqZWN0LCBhdHRyaWJ1dGVzLmNyZWF0ZWRfYnlfaWQsICdfY3JlYXRlZEJ5Um93SUQnLCAnZ2V0VXNlcicpO1xuICAgIGF3YWl0IHRoaXMubG9va3VwKG9iamVjdCwgYXR0cmlidXRlcy51cGRhdGVkX2J5X2lkLCAnX3VwZGF0ZWRCeVJvd0lEJywgJ2dldFVzZXInKTtcblxuICAgIGlmIChvYmplY3QuX2Zvcm1Sb3dJRCkge1xuICAgICAgY29uc3QgcmVjb3JkID0gYXdhaXQgdGhpcy5hY2NvdW50LmZpbmRGaXJzdFJlY29yZCh7cmVzb3VyY2VfaWQ6IGF0dHJpYnV0ZXMucmVjb3JkX2lkfSk7XG5cbiAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgb2JqZWN0Ll9yZWNvcmRSb3dJRCA9IHJlY29yZC5yb3dJRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFjY291bnQuX2xhc3RTeW5jUGhvdG9zID0gb2JqZWN0Ll91cGRhdGVkQXQ7XG4gIH1cblxuICBhdHRyaWJ1dGVzRm9yUXVlcnlSb3cocm93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjY2Vzc19rZXk6IHJvd1swXSxcbiAgICAgIGNyZWF0ZWRfYXQ6IHJvd1sxXSxcbiAgICAgIHVwZGF0ZWRfYXQ6IHJvd1syXSxcbiAgICAgIHVwbG9hZGVkOiByb3dbM10sXG4gICAgICBzdG9yZWQ6IHJvd1s0XSxcbiAgICAgIHByb2Nlc3NlZDogcm93WzVdLFxuICAgICAgY3JlYXRlZF9ieV9pZDogcm93WzZdLFxuICAgICAgdXBkYXRlZF9ieV9pZDogcm93WzddLFxuICAgICAgZm9ybV9pZDogcm93WzhdLFxuICAgICAgcmVjb3JkX2lkOiByb3dbOV0sXG4gICAgICBjb250ZW50X3R5cGU6IHJvd1sxMF0sXG4gICAgICBmaWxlX3NpemU6IHJvd1sxMV0sXG4gICAgICBsYXRpdHVkZTogcm93WzEyXSxcbiAgICAgIGxvbmdpdHVkZTogcm93WzEzXSxcbiAgICAgIGV4aWY6IHJvd1sxNF0gJiYgSlNPTi5wYXJzZShyb3dbMTRdKSxcbiAgICAgIGNyZWF0ZWRfYnk6IHJvd1sxNV0sXG4gICAgICB1cGRhdGVkX2J5OiByb3dbMTZdXG4gICAgfTtcbiAgfVxuXG4gIGdlbmVyYXRlUXVlcnkoc2VxdWVuY2UsIGxpbWl0KSB7XG4gICAgY29uc3Qgc2VxdWVuY2VTdHJpbmcgPSBuZXcgRGF0ZSgrc2VxdWVuY2UpLnRvSVNPU3RyaW5nKCk7XG5cbiAgICByZXR1cm4gYFxuU0VMRUNUXG4gIFwicGhvdG9faWRcIiBBUyBcImFjY2Vzc19rZXlcIixcbiAgdG9fY2hhcihwZ19jYXRhbG9nLnRpbWV6b25lKCdVVEMnLCBcInJlY29yZHNcIi5cImNyZWF0ZWRfYXRcIiksICdZWVlZLU1NLUREXCJUXCJISDI0Ok1JOlNTXCJaXCInKSBBUyBcImNyZWF0ZWRfYXRcIixcbiAgdG9fY2hhcihwZ19jYXRhbG9nLnRpbWV6b25lKCdVVEMnLCBcInJlY29yZHNcIi5cInVwZGF0ZWRfYXRcIiksICdZWVlZLU1NLUREXCJUXCJISDI0Ok1JOlNTXCJaXCInKSBBUyBcInVwZGF0ZWRfYXRcIixcbiAgXCJ1cGxvYWRlZF9hdFwiIElTIE5PVCBOVUxMIEFTIHVwbG9hZGVkLFxuICBcInN0b3JlZF9hdFwiIElTIE5PVCBOVUxMIEFTIHN0b3JlZCxcbiAgXCJwcm9jZXNzZWRfYXRcIiBJUyBOT1QgTlVMTCBBUyBwcm9jZXNzZWQsXG4gIFwiY3JlYXRlZF9ieV9pZFwiIEFTIFwiY3JlYXRlZF9ieV9pZFwiLFxuICBcInVwZGF0ZWRfYnlfaWRcIiBBUyBcInVwZGF0ZWRfYnlfaWRcIixcbiAgXCJmb3JtX2lkXCIgQVMgXCJmb3JtX2lkXCIsXG4gIFwicmVjb3JkX2lkXCIgQVMgXCJyZWNvcmRfaWRcIixcbiAgXCJjb250ZW50X3R5cGVcIiBBUyBcImNvbnRlbnRfdHlwZVwiLFxuICBcImZpbGVfc2l6ZVwiIEFTIFwiZmlsZV9zaXplXCIsXG4gIFwibGF0aXR1ZGVcIiBBUyBcImxhdGl0dWRlXCIsXG4gIFwibG9uZ2l0dWRlXCIgQVMgXCJsb25naXR1ZGVcIixcbiAgXCJleGlmXCIgQVMgXCJleGlmXCIsXG4gIE5VTEwgQVMgXCJjcmVhdGVkX2J5XCIsXG4gIE5VTEwgQVMgXCJ1cGRhdGVkX2J5XCJcbkZST00gXCJwaG90b3NcIiBBUyBcInJlY29yZHNcIlxuV0hFUkVcbiAgXCJyZWNvcmRzXCIudXBkYXRlZF9hdCA+ICcke3NlcXVlbmNlU3RyaW5nfSdcbk9SREVSIEJZXG4gIFwicmVjb3Jkc1wiLnVwZGF0ZWRfYXQgQVNDXG5MSU1JVCAke2xpbWl0fSBPRkZTRVQgMFxuYDtcbiAgfVxufVxuIl19