"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _downloadQuerySequence = _interopRequireDefault(require("./download-query-sequence"));

var _audio = _interopRequireDefault(require("../../models/audio"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DownloadAudio extends _downloadQuerySequence.default {
  get resourceName() {
    return 'audio';
  }

  get typeName() {
    return 'audio';
  }

  get lastSync() {
    return this.account._lastSyncAudio;
  }

  get useRestAPI() {
    return false;
  }

  findOrCreate(database, attributes) {
    return _audio.default.findOrCreate(database, {
      account_id: this.account.rowID,
      resource_id: attributes.access_key
    });
  }

  async loadObject(object, attributes) {
    if (object.isDownloaded == null) {
      object.isDownloaded = false;
    }

    await this.lookup(object, attributes.form_id, '_formRowID', 'getForm');
    await this.lookup(object, attributes.created_by_id, '_createdByRowID', 'getUser');
    await this.lookup(object, attributes.updated_by_id, '_updatedByRowID', 'getUser');

    if (object._formRowID) {
      const record = await this.account.findFirstRecord({
        resource_id: attributes.record_id
      });

      if (record) {
        object._recordRowID = record.rowID;
      }
    }

    this.account._lastSyncAudio = object._updatedAt;
  }

  attributesForQueryRow(row) {
    return {
      access_key: row[0],
      created_at: row[1],
      updated_at: row[2],
      uploaded: row[3],
      stored: row[4],
      processed: row[5],
      created_by_id: row[6],
      updated_by_id: row[7],
      form_id: row[8],
      record_id: row[9],
      content_type: row[10],
      file_size: row[11],
      metadata: row[12] && JSON.parse(row[12]),
      created_by: row[13],
      updated_by: row[14],
      track: row[15] && JSON.parse(row[15])
    };
  }

  generateQuery(sequence, limit) {
    const sequenceString = new Date(+sequence).toISOString();
    return `
SELECT
  "audio_id" AS "access_key",
  to_char(pg_catalog.timezone('UTC', "records"."created_at"), 'YYYY-MM-DD"T"HH24:MI:SS"Z"') AS "created_at",
  to_char(pg_catalog.timezone('UTC', "records"."updated_at"), 'YYYY-MM-DD"T"HH24:MI:SS"Z"') AS "updated_at",
  "uploaded_at" IS NOT NULL AS uploaded,
  "stored_at" IS NOT NULL AS stored,
  "processed_at" IS NOT NULL AS processed,
  "created_by_id" AS "created_by_id",
  "updated_by_id" AS "updated_by_id",
  "form_id" AS "form_id",
  "record_id" AS "record_id",
  "content_type" AS "content_type",
  "file_size" AS "file_size",
  "metadata" AS "metadata",
  NULL AS "created_by",
  NULL AS "updated_by",
  "track" AS "track"
FROM "audio" AS "records"
WHERE
  "records".updated_at > '${sequenceString}'
ORDER BY
  "records".updated_at ASC
LIMIT ${limit} OFFSET 0
`;
  }

}

exports.default = DownloadAudio;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zeW5jL3Rhc2tzL2Rvd25sb2FkLWF1ZGlvLmpzIl0sIm5hbWVzIjpbIkRvd25sb2FkQXVkaW8iLCJEb3dubG9hZFF1ZXJ5U2VxdWVuY2UiLCJyZXNvdXJjZU5hbWUiLCJ0eXBlTmFtZSIsImxhc3RTeW5jIiwiYWNjb3VudCIsIl9sYXN0U3luY0F1ZGlvIiwidXNlUmVzdEFQSSIsImZpbmRPckNyZWF0ZSIsImRhdGFiYXNlIiwiYXR0cmlidXRlcyIsIkF1ZGlvIiwiYWNjb3VudF9pZCIsInJvd0lEIiwicmVzb3VyY2VfaWQiLCJhY2Nlc3Nfa2V5IiwibG9hZE9iamVjdCIsIm9iamVjdCIsImlzRG93bmxvYWRlZCIsImxvb2t1cCIsImZvcm1faWQiLCJjcmVhdGVkX2J5X2lkIiwidXBkYXRlZF9ieV9pZCIsIl9mb3JtUm93SUQiLCJyZWNvcmQiLCJmaW5kRmlyc3RSZWNvcmQiLCJyZWNvcmRfaWQiLCJfcmVjb3JkUm93SUQiLCJfdXBkYXRlZEF0IiwiYXR0cmlidXRlc0ZvclF1ZXJ5Um93Iiwicm93IiwiY3JlYXRlZF9hdCIsInVwZGF0ZWRfYXQiLCJ1cGxvYWRlZCIsInN0b3JlZCIsInByb2Nlc3NlZCIsImNvbnRlbnRfdHlwZSIsImZpbGVfc2l6ZSIsIm1ldGFkYXRhIiwiSlNPTiIsInBhcnNlIiwiY3JlYXRlZF9ieSIsInVwZGF0ZWRfYnkiLCJ0cmFjayIsImdlbmVyYXRlUXVlcnkiLCJzZXF1ZW5jZSIsImxpbWl0Iiwic2VxdWVuY2VTdHJpbmciLCJEYXRlIiwidG9JU09TdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVlLE1BQU1BLGFBQU4sU0FBNEJDLDhCQUE1QixDQUFrRDtBQUMvQyxNQUFaQyxZQUFZLEdBQUc7QUFDakIsV0FBTyxPQUFQO0FBQ0Q7O0FBRVcsTUFBUkMsUUFBUSxHQUFHO0FBQ2IsV0FBTyxPQUFQO0FBQ0Q7O0FBRVcsTUFBUkMsUUFBUSxHQUFHO0FBQ2IsV0FBTyxLQUFLQyxP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LGFBQWEsQ0FBQ0MsUUFBRCxFQUFXQyxLQUFYLEVBQWtCO0FBQzdCLFVBQU1DLGNBQWMsR0FBRyxJQUFJQyxJQUFKLENBQVMsQ0FBQ0gsUUFBVixFQUFvQkksV0FBcEIsRUFBdkI7QUFFQSxXQUFRO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEJGLGNBQWU7QUFDM0M7QUFDQTtBQUNBLFFBQVFELEtBQU07QUFDZCxDQXhCSTtBQXlCRDs7QUExRjhEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERvd25sb2FkUXVlcnlTZXF1ZW5jZSBmcm9tICcuL2Rvd25sb2FkLXF1ZXJ5LXNlcXVlbmNlJztcbmltcG9ydCBBdWRpbyBmcm9tICcuLi8uLi9tb2RlbHMvYXVkaW8nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEb3dubG9hZEF1ZGlvIGV4dGVuZHMgRG93bmxvYWRRdWVyeVNlcXVlbmNlIHtcbiAgZ2V0IHJlc291cmNlTmFtZSgpIHtcbiAgICByZXR1cm4gJ2F1ZGlvJztcbiAgfVxuXG4gIGdldCB0eXBlTmFtZSgpIHtcbiAgICByZXR1cm4gJ2F1ZGlvJztcbiAgfVxuXG4gIGdldCBsYXN0U3luYygpIHtcbiAgICByZXR1cm4gdGhpcy5hY2NvdW50Ll9sYXN0U3luY0F1ZGlvO1xuICB9XG5cbiAgZ2V0IHVzZVJlc3RBUEkoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZmluZE9yQ3JlYXRlKGRhdGFiYXNlLCBhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIEF1ZGlvLmZpbmRPckNyZWF0ZShkYXRhYmFzZSwge2FjY291bnRfaWQ6IHRoaXMuYWNjb3VudC5yb3dJRCwgcmVzb3VyY2VfaWQ6IGF0dHJpYnV0ZXMuYWNjZXNzX2tleX0pO1xuICB9XG5cbiAgYXN5bmMgbG9hZE9iamVjdChvYmplY3QsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAob2JqZWN0LmlzRG93bmxvYWRlZCA9PSBudWxsKSB7XG4gICAgICBvYmplY3QuaXNEb3dubG9hZGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5sb29rdXAob2JqZWN0LCBhdHRyaWJ1dGVzLmZvcm1faWQsICdfZm9ybVJvd0lEJywgJ2dldEZvcm0nKTtcbiAgICBhd2FpdCB0aGlzLmxvb2t1cChvYmplY3QsIGF0dHJpYnV0ZXMuY3JlYXRlZF9ieV9pZCwgJ19jcmVhdGVkQnlSb3dJRCcsICdnZXRVc2VyJyk7XG4gICAgYXdhaXQgdGhpcy5sb29rdXAob2JqZWN0LCBhdHRyaWJ1dGVzLnVwZGF0ZWRfYnlfaWQsICdfdXBkYXRlZEJ5Um93SUQnLCAnZ2V0VXNlcicpO1xuXG4gICAgaWYgKG9iamVjdC5fZm9ybVJvd0lEKSB7XG4gICAgICBjb25zdCByZWNvcmQgPSBhd2FpdCB0aGlzLmFjY291bnQuZmluZEZpcnN0UmVjb3JkKHtyZXNvdXJjZV9pZDogYXR0cmlidXRlcy5yZWNvcmRfaWR9KTtcblxuICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICBvYmplY3QuX3JlY29yZFJvd0lEID0gcmVjb3JkLnJvd0lEO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYWNjb3VudC5fbGFzdFN5bmNBdWRpbyA9IG9iamVjdC5fdXBkYXRlZEF0O1xuICB9XG5cbiAgYXR0cmlidXRlc0ZvclF1ZXJ5Um93KHJvdykge1xuICAgIHJldHVybiB7XG4gICAgICBhY2Nlc3Nfa2V5OiByb3dbMF0sXG4gICAgICBjcmVhdGVkX2F0OiByb3dbMV0sXG4gICAgICB1cGRhdGVkX2F0OiByb3dbMl0sXG4gICAgICB1cGxvYWRlZDogcm93WzNdLFxuICAgICAgc3RvcmVkOiByb3dbNF0sXG4gICAgICBwcm9jZXNzZWQ6IHJvd1s1XSxcbiAgICAgIGNyZWF0ZWRfYnlfaWQ6IHJvd1s2XSxcbiAgICAgIHVwZGF0ZWRfYnlfaWQ6IHJvd1s3XSxcbiAgICAgIGZvcm1faWQ6IHJvd1s4XSxcbiAgICAgIHJlY29yZF9pZDogcm93WzldLFxuICAgICAgY29udGVudF90eXBlOiByb3dbMTBdLFxuICAgICAgZmlsZV9zaXplOiByb3dbMTFdLFxuICAgICAgbWV0YWRhdGE6IHJvd1sxMl0gJiYgSlNPTi5wYXJzZShyb3dbMTJdKSxcbiAgICAgIGNyZWF0ZWRfYnk6IHJvd1sxM10sXG4gICAgICB1cGRhdGVkX2J5OiByb3dbMTRdLFxuICAgICAgdHJhY2s6IHJvd1sxNV0gJiYgSlNPTi5wYXJzZShyb3dbMTVdKVxuICAgIH07XG4gIH1cblxuICBnZW5lcmF0ZVF1ZXJ5KHNlcXVlbmNlLCBsaW1pdCkge1xuICAgIGNvbnN0IHNlcXVlbmNlU3RyaW5nID0gbmV3IERhdGUoK3NlcXVlbmNlKS50b0lTT1N0cmluZygpO1xuXG4gICAgcmV0dXJuIGBcblNFTEVDVFxuICBcImF1ZGlvX2lkXCIgQVMgXCJhY2Nlc3Nfa2V5XCIsXG4gIHRvX2NoYXIocGdfY2F0YWxvZy50aW1lem9uZSgnVVRDJywgXCJyZWNvcmRzXCIuXCJjcmVhdGVkX2F0XCIpLCAnWVlZWS1NTS1ERFwiVFwiSEgyNDpNSTpTU1wiWlwiJykgQVMgXCJjcmVhdGVkX2F0XCIsXG4gIHRvX2NoYXIocGdfY2F0YWxvZy50aW1lem9uZSgnVVRDJywgXCJyZWNvcmRzXCIuXCJ1cGRhdGVkX2F0XCIpLCAnWVlZWS1NTS1ERFwiVFwiSEgyNDpNSTpTU1wiWlwiJykgQVMgXCJ1cGRhdGVkX2F0XCIsXG4gIFwidXBsb2FkZWRfYXRcIiBJUyBOT1QgTlVMTCBBUyB1cGxvYWRlZCxcbiAgXCJzdG9yZWRfYXRcIiBJUyBOT1QgTlVMTCBBUyBzdG9yZWQsXG4gIFwicHJvY2Vzc2VkX2F0XCIgSVMgTk9UIE5VTEwgQVMgcHJvY2Vzc2VkLFxuICBcImNyZWF0ZWRfYnlfaWRcIiBBUyBcImNyZWF0ZWRfYnlfaWRcIixcbiAgXCJ1cGRhdGVkX2J5X2lkXCIgQVMgXCJ1cGRhdGVkX2J5X2lkXCIsXG4gIFwiZm9ybV9pZFwiIEFTIFwiZm9ybV9pZFwiLFxuICBcInJlY29yZF9pZFwiIEFTIFwicmVjb3JkX2lkXCIsXG4gIFwiY29udGVudF90eXBlXCIgQVMgXCJjb250ZW50X3R5cGVcIixcbiAgXCJmaWxlX3NpemVcIiBBUyBcImZpbGVfc2l6ZVwiLFxuICBcIm1ldGFkYXRhXCIgQVMgXCJtZXRhZGF0YVwiLFxuICBOVUxMIEFTIFwiY3JlYXRlZF9ieVwiLFxuICBOVUxMIEFTIFwidXBkYXRlZF9ieVwiLFxuICBcInRyYWNrXCIgQVMgXCJ0cmFja1wiXG5GUk9NIFwiYXVkaW9cIiBBUyBcInJlY29yZHNcIlxuV0hFUkVcbiAgXCJyZWNvcmRzXCIudXBkYXRlZF9hdCA+ICcke3NlcXVlbmNlU3RyaW5nfSdcbk9SREVSIEJZXG4gIFwicmVjb3Jkc1wiLnVwZGF0ZWRfYXQgQVNDXG5MSU1JVCAke2xpbWl0fSBPRkZTRVQgMFxuYDtcbiAgfVxufVxuIl19